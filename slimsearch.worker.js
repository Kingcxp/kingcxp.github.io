/**
* @vue/shared v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function xt(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return n=>n in t}const Ot={},St=()=>{},ze=Object.assign,It=Object.prototype.hasOwnProperty,se=(e,t)=>It.call(e,t),z=Array.isArray,Y=e=>Ve(e)==="[object Map]",oe=e=>typeof e=="function",Ce=e=>typeof e=="string",L=e=>typeof e=="symbol",B=e=>e!==null&&typeof e=="object",Nt=Object.prototype.toString,Ve=e=>Nt.call(e),ke=e=>Ve(e).slice(8,-1),ie=e=>Ce(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Mt=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Ln=Mt(e=>e.charAt(0).toUpperCase()+e.slice(1)),W=(e,t)=>!Object.is(e,t);let $e;const ce=()=>$e||($e=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Rt(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let Tt,je=0,ae;function ue(){je++}function le(){if(--je>0)return;let e;for(;ae;){let t=ae;for(ae=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(s){e||(e=s)}t=n}}if(e)throw e}let G=!0;const De=[];function fe(){De.push(G),G=!1}function de(){const e=De.pop();G=e===void 0?!0:e}class Fe{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.__v_skip=!0}track(t){}trigger(t){this.version++,this.notify(t)}notify(t){ue();try{for(let n=this.subs;n;n=n.prevSub)n.sub.notify()&&n.sub.dep.notify()}finally{le()}}}const he=new WeakMap,C=Symbol(""),pe=Symbol(""),H=Symbol("");function E(e,t,n){if(G&&Tt){let s=he.get(e);s||he.set(e,s=new Map);let r=s.get(n);r||(s.set(n,r=new Fe),r.map=s,r.key=n),r.track()}}function I(e,t,n,s,r,o){const i=he.get(e);if(!i)return;const c=a=>{a&&a.trigger()};if(ue(),t==="clear")i.forEach(c);else{const a=z(e),u=a&&ie(n);if(a&&n==="length"){const l=Number(s);i.forEach((f,d)=>{(d==="length"||d===H||!L(d)&&d>=l)&&c(f)})}else switch((n!==void 0||i.has(void 0))&&c(i.get(n)),u&&c(i.get(H)),t){case"add":a?u&&c(i.get("length")):(c(i.get(C)),Y(e)&&c(i.get(pe)));break;case"delete":a||(c(i.get(C)),Y(e)&&c(i.get(pe)));break;case"set":Y(e)&&c(i.get(C));break}}le()}function $(e){const t=p(e);return t===e?t:(E(t,"iterate",H),N(e)?t:t.map(v))}function ge(e){return E(e=p(e),"iterate",H),e}const zt={__proto__:null,[Symbol.iterator](){return _e(this,Symbol.iterator,v)},concat(...e){return $(this).concat(...e.map(t=>z(t)?$(t):t))},entries(){return _e(this,"entries",e=>(e[1]=v(e[1]),e))},every(e,t){return O(this,"every",e,t,void 0,arguments)},filter(e,t){return O(this,"filter",e,t,n=>n.map(v),arguments)},find(e,t){return O(this,"find",e,t,v,arguments)},findIndex(e,t){return O(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return O(this,"findLast",e,t,v,arguments)},findLastIndex(e,t){return O(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return O(this,"forEach",e,t,void 0,arguments)},includes(...e){return me(this,"includes",e)},indexOf(...e){return me(this,"indexOf",e)},join(e){return $(this).join(e)},lastIndexOf(...e){return me(this,"lastIndexOf",e)},map(e,t){return O(this,"map",e,t,void 0,arguments)},pop(){return K(this,"pop")},push(...e){return K(this,"push",e)},reduce(e,...t){return Pe(this,"reduce",e,t)},reduceRight(e,...t){return Pe(this,"reduceRight",e,t)},shift(){return K(this,"shift")},some(e,t){return O(this,"some",e,t,void 0,arguments)},splice(...e){return K(this,"splice",e)},toReversed(){return $(this).toReversed()},toSorted(e){return $(this).toSorted(e)},toSpliced(...e){return $(this).toSpliced(...e)},unshift(...e){return K(this,"unshift",e)},values(){return _e(this,"values",v)}};function _e(e,t,n){const s=ge(e),r=s[t]();return s!==e&&!N(e)&&(r._next=r.next,r.next=()=>{const o=r._next();return o.value&&(o.value=n(o.value)),o}),r}const Ct=Array.prototype;function O(e,t,n,s,r,o){const i=ge(e),c=i!==e&&!N(e),a=i[t];if(a!==Ct[t]){const f=a.apply(e,o);return c?v(f):f}let u=n;i!==e&&(c?u=function(f,d){return n.call(this,v(f),d,e)}:n.length>2&&(u=function(f,d){return n.call(this,f,d,e)}));const l=a.call(i,u,s);return c&&r?r(l):l}function Pe(e,t,n,s){const r=ge(e);let o=n;return r!==e&&(N(e)?n.length>3&&(o=function(i,c,a){return n.call(this,i,c,a,e)}):o=function(i,c,a){return n.call(this,i,v(c),a,e)}),r[t](o,...s)}function me(e,t,n){const s=p(e);E(s,"iterate",H);const r=s[t](...n);return(r===-1||r===!1)&&Jt(n[0])?(n[0]=p(n[0]),s[t](...n)):r}function K(e,t,n=[]){fe(),ue();const s=p(e)[t].apply(e,n);return le(),de(),s}const Vt=xt("__proto__,__v_isRef,__isVue"),Ae=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(L));function kt(e){L(e)||(e=String(e));const t=p(this);return E(t,"has",e),t.hasOwnProperty(e)}class Le{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,s){if(n==="__v_skip")return t.__v_skip;const r=this._isReadonly,o=this._isShallow;if(n==="__v_isReactive")return!r;if(n==="__v_isReadonly")return r;if(n==="__v_isShallow")return o;if(n==="__v_raw")return s===(r?o?Kt:Ke:o?Ht:He).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(s)?t:void 0;const i=z(t);if(!r){let a;if(i&&(a=zt[n]))return a;if(n==="hasOwnProperty")return kt}const c=Reflect.get(t,n,V(t)?t:s);return(L(n)?Ae.has(n):Vt(n))||(r||E(t,"get",n),o)?c:V(c)?i&&ie(n)?c:c.value:B(c)?r?Ue(c):qe(c):c}}class $t extends Le{constructor(t=!1){super(!1,t)}set(t,n,s,r){let o=t[n];if(!this._isShallow){const a=j(o);if(!N(s)&&!j(s)&&(o=p(o),s=p(s)),!z(t)&&V(o)&&!V(s))return a?!1:(o.value=s,!0)}const i=z(t)&&ie(n)?Number(n)<t.length:se(t,n),c=Reflect.set(t,n,s,V(t)?t:r);return t===p(r)&&(i?W(s,o)&&I(t,"set",n,s,o):I(t,"add",n,s)),c}deleteProperty(t,n){const s=se(t,n),r=t[n],o=Reflect.deleteProperty(t,n);return o&&s&&I(t,"delete",n,void 0,r),o}has(t,n){const s=Reflect.has(t,n);return(!L(n)||!Ae.has(n))&&E(t,"has",n),s}ownKeys(t){return E(t,"iterate",z(t)?"length":C),Reflect.ownKeys(t)}}class jt extends Le{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const Dt=new $t,Ft=new jt,ye=e=>e,Q=e=>Reflect.getPrototypeOf(e);function Pt(e,t,n){return function(...s){const r=this.__v_raw,o=p(r),i=Y(o),c=e==="entries"||e===Symbol.iterator&&i,a=e==="keys"&&i,u=r[e](...s),l=n?ye:t?we:v;return!t&&E(o,"iterate",a?pe:C),{next(){const{value:f,done:d}=u.next();return d?{value:f,done:d}:{value:c?[l(f[0]),l(f[1])]:l(f),done:d}},[Symbol.iterator](){return this}}}}function X(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function At(e,t){const n={get(r){const o=this.__v_raw,i=p(o),c=p(r);e||(W(r,c)&&E(i,"get",r),E(i,"get",c));const{has:a}=Q(i),u=t?ye:e?we:v;if(a.call(i,r))return u(o.get(r));if(a.call(i,c))return u(o.get(c));o!==i&&o.get(r)},get size(){const r=this.__v_raw;return!e&&E(p(r),"iterate",C),Reflect.get(r,"size",r)},has(r){const o=this.__v_raw,i=p(o),c=p(r);return e||(W(r,c)&&E(i,"has",r),E(i,"has",c)),r===c?o.has(r):o.has(r)||o.has(c)},forEach(r,o){const i=this,c=i.__v_raw,a=p(c),u=t?ye:e?we:v;return!e&&E(a,"iterate",C),c.forEach((l,f)=>r.call(o,u(l),u(f),i))}};return ze(n,e?{add:X("add"),set:X("set"),delete:X("delete"),clear:X("clear")}:{add(r){!t&&!N(r)&&!j(r)&&(r=p(r));const o=p(this);return Q(o).has.call(o,r)||(o.add(r),I(o,"add",r,r)),this},set(r,o){!t&&!N(o)&&!j(o)&&(o=p(o));const i=p(this),{has:c,get:a}=Q(i);let u=c.call(i,r);u||(r=p(r),u=c.call(i,r));const l=a.call(i,r);return i.set(r,o),u?W(o,l)&&I(i,"set",r,o,l):I(i,"add",r,o),this},delete(r){const o=p(this),{has:i,get:c}=Q(o);let a=i.call(o,r);a||(r=p(r),a=i.call(o,r));const u=c?c.call(o,r):void 0,l=o.delete(r);return a&&I(o,"delete",r,void 0,u),l},clear(){const r=p(this),o=r.size!==0,i=void 0,c=r.clear();return o&&I(r,"clear",void 0,void 0,i),c}}),["keys","values","entries",Symbol.iterator].forEach(r=>{n[r]=Pt(r,e,t)}),n}function We(e,t){const n=At(e,t);return(s,r,o)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?s:Reflect.get(se(n,r)&&r in s?n:s,r,o)}const Lt={get:We(!1,!1)},Wt={get:We(!0,!1)};function Wn(e,t,n){const s=p(n);if(s!==n&&t.call(e,s)){const r=ke(e);Rt(`Reactive ${r} contains both the raw and reactive versions of the same object${r==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const He=new WeakMap,Ht=new WeakMap,Ke=new WeakMap,Kt=new WeakMap;function qt(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Ut(e){return e.__v_skip||!Object.isExtensible(e)?0:qt(ke(e))}function qe(e){return j(e)?e:Je(e,!1,Dt,Lt,He)}function Ue(e){return Je(e,!0,Ft,Wt,Ke)}function Je(e,t,n,s,r){if(!B(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=Ut(e);if(o===0)return e;const i=r.get(e);if(i)return i;const c=new Proxy(e,o===2?s:n);return r.set(e,c),c}function j(e){return!!(e&&e.__v_isReadonly)}function N(e){return!!(e&&e.__v_isShallow)}function Jt(e){return e?!!e.__v_raw:!1}function p(e){const t=e&&e.__v_raw;return t?p(t):e}const v=e=>B(e)?qe(e):e,we=e=>B(e)?Ue(e):e;function V(e){return e?e.__v_isRef===!0:!1}function Yt(e){return Bt(e,!1)}function Bt(e,t){return V(e)?e:new Gt(e,t)}class Gt{constructor(t,n){this.dep=new Fe,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=n?t:p(t),this._value=n?t:v(t),this.__v_isShallow=n}get value(){return this.dep.track(),this._value}set value(t){const n=this._rawValue,s=this.__v_isShallow||N(t)||j(t);t=s?t:p(t),W(t,n)&&(this._rawValue=t,this._value=s?t:v(t),this.dep.trigger())}}/**
* @vue/runtime-core v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const k=[];function Hn(e){k.push(e)}function Kn(){k.pop()}let be=!1;function qn(e,...t){if(be)return;be=!0,fe();const n=k.length?k[k.length-1].component:null,s=n&&n.appContext.config.warnHandler,r=Qt();if(s)ve(s,n,11,[e+t.map(o=>{var i,c;return(c=(i=o.toString)==null?void 0:i.call(o))!=null?c:JSON.stringify(o)}).join(""),n&&n.proxy,r.map(({vnode:o})=>`at <${et(n,o.type)}>`).join(`
`),r]);else{const o=[`[Vue warn]: ${e}`,...t];r.length&&o.push(`
`,...Xt(r)),console.warn(...o)}de(),be=!1}function Qt(){let e=k[k.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const s=e.component&&e.component.parent;e=s&&s.vnode}return t}function Xt(e){const t=[];return e.forEach((n,s)=>{t.push(...s===0?[]:[`
`],...Zt(n))}),t}function Zt({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",s=e.component?e.component.parent==null:!1,r=` at <${et(e.component,e.type,s)}`,o=">"+n;return e.props?[r,...en(e.props),o]:[r+o]}function en(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(s=>{t.push(...Ye(s,e[s]))}),n.length>3&&t.push(" ..."),t}function Ye(e,t,n){return Ce(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:V(t)?(t=Ye(e,p(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):oe(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=p(t),n?t:[`${e}=`,t])}const Un={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function ve(e,t,n,s){try{return s?e(...s):e()}catch(r){Be(r,t,n)}}function Be(e,t,n,s=!0){const r=t?t.vnode:null,{errorHandler:o,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||Ot;if(t){let c=t.parent;const a=t.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const l=c.ec;if(l){for(let f=0;f<l.length;f++)if(l[f](e,a,u)===!1)return}c=c.parent}if(o){fe(),ve(o,null,10,[e,a,u]),de();return}}tn(e,n,r,s,i)}function tn(e,t,n,s=!0,r=!1){if(r)throw e;console.error(e)}const x=[];let S=-1;const D=[];let M=null,F=0;const nn=Promise.resolve();let Ee=null;const rn=100;function sn(e){let t=S+1,n=x.length;for(;t<n;){const s=t+n>>>1,r=x[s],o=q(r);o<e||o===e&&r.flags&2?t=s+1:n=s}return t}function on(e){if(!(e.flags&1)){const t=q(e),n=x[x.length-1];!n||!(e.flags&2)&&t>=q(n)?x.push(e):x.splice(sn(t),0,e),e.flags|=1,Ge()}}function Ge(){Ee||(Ee=nn.then(Qe))}function cn(e){z(e)?D.push(...e):M&&e.id===-1?M.splice(F+1,0,e):e.flags&1||(D.push(e),e.flags|=1),Ge()}function an(e){if(D.length){const t=[...new Set(D)].sort((n,s)=>q(n)-q(s));if(D.length=0,M){M.push(...t);return}for(M=t,F=0;F<M.length;F++){const n=M[F];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}M=null,F=0}}const q=e=>e.id==null?e.flags&2?-1:1/0:e.id;function Qe(e){const t=St;try{for(S=0;S<x.length;S++){const n=x[S];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),ve(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;S<x.length;S++){const n=x[S];n&&(n.flags&=-2)}S=-1,x.length=0,an(e),Ee=null,(x.length||D.length)&&Qe(e)}}function Jn(e,t){const n=e.get(t)||0;if(n>rn){const s=t.i,r=s&&Ze(s.type);return Be(`Maximum recursive updates exceeded${r?` in component <${r}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const xe=new Map,Z=new Map;function Yn(e,t){return Z.has(e)?!1:(Z.set(e,{initialDef:ee(t),instances:new Set}),!0)}function ee(e){return fn(e)?e.__vccOpts:e}function Bn(e,t){const n=Z.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(s=>{t&&(s.render=t,ee(s.type).render=t),s.renderCache=[],s.update()}))}function Gn(e,t){const n=Z.get(e);if(!n)return;t=ee(t),Xe(n.initialDef,t);const s=[...n.instances];for(let r=0;r<s.length;r++){const o=s[r],i=ee(o.type);let c=xe.get(i);c||(i!==n.initialDef&&Xe(i,t),xe.set(i,c=new Set)),c.add(o),o.appContext.propsCache.delete(o.type),o.appContext.emitsCache.delete(o.type),o.appContext.optionsCache.delete(o.type),o.ceReload?(c.add(o),o.ceReload(t.styles),c.delete(o)):o.parent?on(()=>{o.parent.update(),c.delete(o)}):o.appContext.reload?o.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),o.root.ce&&o!==o.root&&o.root.ce._removeChildStyle(i)}cn(()=>{xe.clear()})}function Xe(e,t){ze(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Qn(e){return(t,n)=>{try{return e(t,n)}catch(s){console.error(s),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}ce().requestIdleCallback,ce().cancelIdleCallback;const Xn={};{const e=ce(),t=(n,s)=>{let r;return(r=e[n])||(r=e[n]=[]),r.push(s),o=>{r.length>1?r.forEach(i=>i(o)):r[0](o)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const un=/(?:^|[-_])(\w)/g,ln=e=>e.replace(un,t=>t.toUpperCase()).replace(/[-_]/g,"");function Ze(e,t=!0){return oe(e)?e.displayName||e.name:e.name||t&&e.__name}function et(e,t,n=!1){let s=Ze(t);if(!s&&t.__file){const r=t.__file.match(/([^/\\]+)\.\w+$/);r&&(s=r[1])}if(!s&&e&&e.parent){const r=o=>{for(const i in o)if(o[i]===t)return i};s=r(e.components||e.parent.type.components)||r(e.appContext.components)}return s?ln(s):n?"App":"Anonymous"}function fn(e){return oe(e)&&"__vccOpts"in e}const tt=()=>document.documentElement.getAttribute("data-theme")==="dark";[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:dn}=Object,{fromEntries:hn}=Object,nt=Yt(!1);typeof document<"u"&&(nt.value=tt(),new MutationObserver(()=>{nt.value=tt()}).observe(document.documentElement,{attributeFilter:["data-theme"],attributes:!0}));const pn="ENTRIES",rt="KEYS",st="VALUES",w="";class Oe{set;_type;_path;constructor(t,n){const s=t._tree,r=Array.from(s.keys());this.set=t,this._type=n,this._path=r.length>0?[{node:s,keys:r}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=P(this._path);if(P(n)===w)return{done:!1,value:this.result()};const s=t.get(P(n));return this._path.push({node:s,keys:Array.from(s.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=P(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>P(t)).filter(t=>t!==w).join("")}value(){return P(this._path).node.get(w)}result(){switch(this._type){case st:return this.value();case rt:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const P=e=>e[e.length-1],gn=(e,t,n)=>{const s=new Map;if(typeof t!="string")return s;const r=t.length+1,o=r+n,i=new Uint8Array(o*r).fill(n+1);for(let c=0;c<r;++c)i[c]=c;for(let c=1;c<o;++c)i[c*r]=c;return ot(e,t,n,s,i,1,r,""),s},ot=(e,t,n,s,r,o,i,c)=>{const a=o*i;e:for(const u of e.keys())if(u===w){const l=r[a-1];l<=n&&s.set(c,[e.get(u),l])}else{let l=o;for(let f=0;f<u.length;++f,++l){const d=u[f],m=i*l,b=m-i;let g=r[m];const h=Math.max(0,l-n-1),_=Math.min(i-1,l+n);for(let y=h;y<_;++y){const R=d!==t[y],re=r[b+y]+ +R,J=r[b+y+1]+1,T=r[m+y]+1,A=r[m+y+1]=Math.min(re,J,T);A<g&&(g=A)}if(g>n)continue e}ot(e.get(u),t,n,s,r,l,i,c+u)}};let it=class U{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,s]=te(this._tree,t.slice(this._prefix.length));if(n===void 0){const[r,o]=Ne(s);for(const i of r.keys())if(i!==w&&i.startsWith(o)){const c=new Map;return c.set(i.slice(o.length),r.get(i)),new U(c,t)}}return new U(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,_n(this._tree,t)}entries(){return new Oe(this,pn)}forEach(t){for(const[n,s]of this)t(n,s,this)}fuzzyGet(t,n){return gn(this._tree,t,n)}get(t){const n=Se(this._tree,t);return n!==void 0?n.get(w):void 0}has(t){return Se(this._tree,t)?.has(w)??!1}keys(){return new Oe(this,rt)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,Ie(this._tree,t).set(w,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const s=Ie(this._tree,t);return s.set(w,n(s.get(w))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const s=Ie(this._tree,t);let r=s.get(w);return r===void 0&&s.set(w,r=n()),r}values(){return new Oe(this,st)}[Symbol.iterator](){return this.entries()}static from(t){const n=new U;for(const[s,r]of t)n.set(s,r);return n}static fromObject(t){return U.from(Object.entries(t))}};const te=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const s of e.keys())if(s!==w&&t.startsWith(s))return n.push([e,s]),te(e.get(s),t.slice(s.length),n);return n.push([e,t]),te(void 0,"",n)},Se=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==w&&t.startsWith(n))return Se(e.get(n),t.slice(n.length))},Ie=(e,t)=>{const n=t.length;e:for(let s=0;e&&s<n;){for(const o of e.keys())if(o!==w&&t[s]===o[0]){const i=Math.min(n-s,o.length);let c=1;for(;c<i&&t[s+c]===o[c];)++c;const a=e.get(o);if(c===o.length)e=a;else{const u=new Map;u.set(o.slice(c),a),e.set(t.slice(s,s+c),u),e.delete(o),e=u}s+=c;continue e}const r=new Map;return e.set(t.slice(s),r),r}return e},_n=(e,t)=>{const[n,s]=te(e,t);if(n!==void 0){if(n.delete(w),n.size===0)ct(s);else if(n.size===1){const[r,o]=n.entries().next().value;at(s,r,o)}}},ct=e=>{if(e.length===0)return;const[t,n]=Ne(e);if(t.delete(n),t.size===0)ct(e.slice(0,-1));else if(t.size===1){const[s,r]=t.entries().next().value;s!==w&&at(e.slice(0,-1),s,r)}},at=(e,t,n)=>{if(e.length===0)return;const[s,r]=Ne(e);s.set(r+t,n),s.delete(r)},Ne=e=>e[e.length-1],mn=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},yn=/[\n\r\p{Z}\p{P}]+/u,Me="or",ut="and",wn="and_not",bn=(e,t)=>{e.includes(t)||e.push(t)},lt=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},ft=({score:e},{score:t})=>t-e,vn=()=>new Map,ne=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},dt=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[Me]:(e,t)=>{for(const n of t.keys()){const s=e.get(n);if(s==null)e.set(n,t.get(n));else{const{score:r,terms:o,match:i}=t.get(n);s.score=s.score+r,s.match=Object.assign(s.match,i),lt(s.terms,o)}}return e},[ut]:(e,t)=>{const n=new Map;for(const s of t.keys()){const r=e.get(s);if(r==null)continue;const{score:o,terms:i,match:c}=t.get(s);lt(r.terms,i),n.set(s,{score:r.score+o,terms:r.terms,match:Object.assign(r.match,c)})}return n},[wn]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},En=(e,t,n,s,r,o)=>{const{k:i,b:c,d:a}=o;return Math.log(1+(n-t+.5)/(t+.5))*(a+e*(i+1)/(e+i*(1-c+c*s/r)))},xn=e=>(t,n,s)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,s):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,s):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,s):1}),pt=(e,t,n,s)=>{for(const r of Object.keys(e._fieldIds))if(e._fieldIds[r]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${s}" was not present in field "${r}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},On=(e,t,n,s)=>{if(!e._index.has(s)){pt(e,n,t,s);return}const r=e._index.fetch(s,vn),o=r.get(t),i=o?.get(n);!o||typeof i>"u"?pt(e,n,t,s):i<=1?o.size<=1?r.delete(t):o.delete(n):o.set(n,i-1),e._index.get(s).size===0&&e._index.delete(s)},Sn={k:1.2,b:.7,d:.5},In={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(yn),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},gt={combineWith:Me,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:Sn},Nn={combineWith:ut,prefix:(e,t,n)=>t===n.length-1},Mn={batchSize:1e3,batchWait:10},_t={minDirtFactor:.1,minDirtCount:20},Rn={...Mn,..._t},mt=Symbol("*"),Tn=(e,t)=>{const n=new Map,s={...e._options.searchOptions,...t};for(const[r,o]of e._documentIds){const i=s.boostDocument?s.boostDocument(o,"",e._storedFields.get(r)):1;n.set(r,{score:i,terms:[],match:{}})}return n},yt=(e,t=Me)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in ht))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(ht[n])},Re=(e,t,n,s,r,o,i,c,a,u=new Map)=>{if(o==null)return u;for(const l of Object.keys(i)){const f=i[l],d=e._fieldIds[l],m=o.get(d);if(m==null)continue;let b=m.size;const g=e._avgFieldLength[d];for(const h of m.keys()){if(!e._documentIds.has(h)){On(e,d,h,n),b-=1;continue}const _=c?c(e._documentIds.get(h),n,e._storedFields.get(h)):1;if(!_)continue;const y=m.get(h),R=e._fieldLength.get(h)[d],re=En(y,b,e._documentCount,R,g,a),J=s*r*f*_*re,T=u.get(h);if(T){T.score+=J,bn(T.terms,t);const A=dt(T.match,n);A?A.push(l):T.match[n]=[l]}else u.set(h,{score:J,terms:[t],match:{[n]:[l]}})}}return u},zn=(e,t,n)=>{const s={...e._options.searchOptions,...n},r=(s.fields??e._options.fields).reduce((g,h)=>({...g,[h]:dt(s.boost,h)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:c,bm25:a}=s,{fuzzy:u,prefix:l}={...gt.weights,...i},f=e._index.get(t.term),d=Re(e,t.term,t.term,1,t.termBoost,f,r,o,a);let m,b;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const g=t.fuzzy===!0?.2:t.fuzzy,h=g<1?Math.min(c,Math.round(t.term.length*g)):g;h&&(b=e._index.fuzzyGet(t.term,h))}if(m)for(const[g,h]of m){const _=g.length-t.term.length;if(!_)continue;b?.delete(g);const y=l*g.length/(g.length+.3*_);Re(e,t.term,g,y,t.termBoost,h,r,o,a,d)}if(b)for(const g of b.keys()){const[h,_]=b.get(g);if(!_)continue;const y=u*g.length/(g.length+_);Re(e,t.term,g,y,t.termBoost,h,r,o,a,d)}return d},wt=(e,t,n={})=>{if(t===mt)return Tn(e,n);if(typeof t!="string"){const l={...n,...t,queries:void 0},f=t.queries.map(d=>wt(e,d,l));return yt(f,l.combineWith)}const{tokenize:s,processTerm:r,searchOptions:o}=e._options,i={tokenize:s,processTerm:r,...o,...n},{tokenize:c,processTerm:a}=i,u=c(t).flatMap(l=>a(l)).filter(l=>!!l).map(xn(i)).map(l=>zn(e,l,i));return yt(u,i.combineWith)},bt=(e,t,n={})=>{const{searchOptions:s}=e._options,r={...s,...n},o=wt(e,t,n),i=[];for(const[c,{score:a,terms:u,match:l}]of o){const f=u.length||1,d={id:e._documentIds.get(c),score:a*f,terms:Object.keys(l),queryTerms:u,match:l};Object.assign(d,e._storedFields.get(c)),(r.filter==null||r.filter(d))&&i.push(d)}return t===mt&&r.boostDocument==null||i.sort(ft),i},Cn=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const s=new Map;for(const{score:o,terms:i}of bt(e,t,n)){const c=i.join(" "),a=s.get(c);a!=null?(a.score+=o,a.count+=1):s.set(c,{score:o,terms:i,count:1})}const r=[];for(const[o,{score:i,terms:c,count:a}]of s)r.push({suggestion:o,terms:c,score:i/a});return r.sort(ft),r};class Vn{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?Rn:t.autoVacuum;this._options={...In,...t,autoVacuum:n,searchOptions:{...gt,...t.searchOptions},autoSuggestOptions:{...Nn,...t.autoSuggestOptions}},this._index=new it,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=_t,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,s]of this._index){const r={};for(const[o,i]of s)r[o]=Object.fromEntries(i);t.push([n,r])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const kn=e=>new Vn(e),$n=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:s,dirtCount:r,version:o},i)=>{if(o!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=kn(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=s,c._dirtCount=r??0,c._index=new it,c},jn=(e,t)=>{const{index:n,documentIds:s,fieldLength:r,storedFields:o}=e,i=$n(e,t);i._documentIds=ne(s),i._fieldLength=ne(r),i._storedFields=ne(o);for(const[c,a]of i._documentIds)i._idToShortId.set(a,c);for(const[c,a]of n){const u=new Map;for(const l of Object.keys(a))u.set(parseInt(l,10),ne(a[l]));i._index.set(c,u)}return i},Te=(e,t)=>{const n=e.toLowerCase(),s=t.toLowerCase(),r=[];let o=0,i=0;const c=(u,l=!1)=>{let f;i===0?f=u.length>20?`… ${u.slice(-20)}`:u:l?f=u.length+i>100?`${u.slice(0,100-i)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&r.push(f),i+=f.length,l||(r.push(["mark",t]),i+=t.length,i>=100&&r.push(" …"))};let a=n.indexOf(s,o);if(a===-1)return null;for(;a>=0;){const u=a+s.length;if(c(e.slice(o,a)),o=u,i>100)break;a=n.indexOf(s,o)}return i<100&&c(e.slice(o),!0),r},{entries:Dn}=Object,Fn=(e,t)=>t.contents.reduce((n,[,s])=>n+s,0)-e.contents.reduce((n,[,s])=>n+s,0),Pn=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),vt=(e,t,n={},s="max")=>{const r={};return bt(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(o=>{const{id:i,terms:c,score:a}=o,u=i.includes("@"),l=i.includes("#"),[f,d]=i.split(/[#@]/),m=Number(f),b=c.sort((h,_)=>h.length-_.length).filter((h,_)=>c.slice(_+1).every(y=>!y.includes(h))),{contents:g}=r[m]??={title:"",contents:[]};if(u)g.push([{type:"customField",id:m,index:d,display:b.map(h=>o.c.map(_=>Te(_,h))).flat().filter(h=>h!==null)},a]);else{const h=b.map(_=>Te(o.h,_)).filter(_=>_!==null);if(h.length&&g.push([{type:l?"heading":"title",id:m,...l&&{anchor:d},display:h},a]),"t"in o&&o.t)for(const _ of o.t){const y=b.map(R=>Te(_,R)).filter(R=>R!==null);y.length&&g.push([{type:"text",id:m,...l&&{anchor:d},display:y},a])}}}),Dn(r).sort(([,o],[,i])=>(s?Fn:Pn)(o,i)).map(([o,{title:i,contents:c}])=>{if(!i){const a=mn(t,o);a&&(i=a.h)}return{title:i,contents:c.map(([a])=>a)}})},Et=(e,t,n={})=>{const s=Cn(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:r})=>r);return e.includes(" ")?s:s.filter(r=>!r.includes(" "))},An=hn(dn(JSON.parse("{\"/\":{\"documentCount\":212,\"nextId\":212,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"2@0\",\"4\":\"2@1\",\"5\":\"3\",\"6\":\"3@0\",\"7\":\"3@1\",\"8\":\"4\",\"9\":\"4@0\",\"10\":\"4@1\",\"11\":\"5\",\"12\":\"5@0\",\"13\":\"5@1\",\"14\":\"6\",\"15\":\"6@0\",\"16\":\"6@1\",\"17\":\"7\",\"18\":\"7@0\",\"19\":\"7@1\",\"20\":\"8\",\"21\":\"8@0\",\"22\":\"8@1\",\"23\":\"9\",\"24\":\"9@0\",\"25\":\"9@1\",\"26\":\"10\",\"27\":\"10#struct\",\"28\":\"10#union\",\"29\":\"10@0\",\"30\":\"10@1\",\"31\":\"11\",\"32\":\"11@0\",\"33\":\"11@1\",\"34\":\"12\",\"35\":\"12@0\",\"36\":\"12@1\",\"37\":\"13\",\"38\":\"13@0\",\"39\":\"13@1\",\"40\":\"14\",\"41\":\"14@0\",\"42\":\"14@1\",\"43\":\"15\",\"44\":\"15@0\",\"45\":\"15@1\",\"46\":\"16\",\"47\":\"16@0\",\"48\":\"16@1\",\"49\":\"17\",\"50\":\"17@0\",\"51\":\"17@1\",\"52\":\"18\",\"53\":\"18@0\",\"54\":\"18@1\",\"55\":\"19\",\"56\":\"19@0\",\"57\":\"19@1\",\"58\":\"20\",\"59\":\"20@0\",\"60\":\"20@1\",\"61\":\"21\",\"62\":\"21@0\",\"63\":\"21@1\",\"64\":\"22\",\"65\":\"22@0\",\"66\":\"22@1\",\"67\":\"23\",\"68\":\"23@0\",\"69\":\"23@1\",\"70\":\"24\",\"71\":\"24@0\",\"72\":\"24@1\",\"73\":\"25\",\"74\":\"25@0\",\"75\":\"25@1\",\"76\":\"26\",\"77\":\"26@0\",\"78\":\"26@1\",\"79\":\"27\",\"80\":\"27@0\",\"81\":\"27@1\",\"82\":\"28\",\"83\":\"28@0\",\"84\":\"28@1\",\"85\":\"29\",\"86\":\"29#windows\",\"87\":\"29#macos\",\"88\":\"29@0\",\"89\":\"29@1\",\"90\":\"30\",\"91\":\"30#c-programming-language\",\"92\":\"30#在你的代码中使用注释\",\"93\":\"30#在你的代码中使用缩进\",\"94\":\"30#c-compiler\",\"95\":\"30#试一试\",\"96\":\"30@0\",\"97\":\"30@1\",\"98\":\"31\",\"99\":\"31#变量\",\"100\":\"31#变量的作用域\",\"101\":\"31#常量和静态变量\",\"102\":\"31#变量的命名规则\",\"103\":\"31#数据类型\",\"104\":\"31#整型\",\"105\":\"31#short\",\"106\":\"31#为啥最小值可以比最大值多-1\",\"107\":\"31#为什么负数要使用补码表示法\",\"108\":\"31#补码怎么想出来的\",\"109\":\"31#int\",\"110\":\"31#long-long\",\"111\":\"31#浮点型\",\"112\":\"31#float\",\"113\":\"31#double\",\"114\":\"31#long-double\",\"115\":\"31#字符型\",\"116\":\"31#char\",\"117\":\"31#布尔型\",\"118\":\"31#bool\",\"119\":\"31#输入输出\",\"120\":\"31#scanf\",\"121\":\"31#printf\",\"122\":\"31#getchar\",\"123\":\"31#putchar\",\"124\":\"31#运算符\",\"125\":\"31#算术运算符\",\"126\":\"31#位运算符\",\"127\":\"31#特殊的加减方式\",\"128\":\"31#试一试\",\"129\":\"31@0\",\"130\":\"31@1\",\"131\":\"32\",\"132\":\"32#分支\",\"133\":\"32#if-else\",\"134\":\"32#逻辑运算符\",\"135\":\"32#三目运算符\",\"136\":\"32#switch-case\",\"137\":\"32#循环\",\"138\":\"32#while\",\"139\":\"32#do-while\",\"140\":\"32#数组\",\"141\":\"32#goto\",\"142\":\"32#试一试\",\"143\":\"32@0\",\"144\":\"32@1\",\"145\":\"33\",\"146\":\"33#函数\",\"147\":\"33#函数的调用\",\"148\":\"33#递归\",\"149\":\"33#搜搜你的\",\"150\":\"33#递推\",\"151\":\"33#试一试\",\"152\":\"33@0\",\"153\":\"33@1\",\"154\":\"34\",\"155\":\"34#指针\",\"156\":\"34#取地址\",\"157\":\"34#存地址\",\"158\":\"34#用地址\",\"159\":\"34#函数指针\",\"160\":\"34#试一试\",\"161\":\"34@0\",\"162\":\"34@1\",\"163\":\"35\",\"164\":\"35#结构体\",\"165\":\"35#什么是对象\",\"166\":\"35#什么是悬空指针\",\"167\":\"35#试一试\",\"168\":\"35@0\",\"169\":\"35@1\",\"170\":\"36\",\"171\":\"36@0\",\"172\":\"36@1\",\"173\":\"37\",\"174\":\"37#选择器\",\"175\":\"37#布局设计\",\"176\":\"37#盒子设计-布局精通\",\"177\":\"37#margin-padding\",\"178\":\"37#动画\",\"179\":\"37@0\",\"180\":\"37@1\",\"181\":\"38\",\"182\":\"38#尽量使用-div-或其它替代容器来包裹内容。\",\"183\":\"38#标签属性\",\"184\":\"38#class\",\"185\":\"38#id\",\"186\":\"38#style\",\"187\":\"38#src\",\"188\":\"38#href\",\"189\":\"38#标签应当尽量语义化\",\"190\":\"38@0\",\"191\":\"38@1\",\"192\":\"39\",\"193\":\"39@0\",\"194\":\"39@1\",\"195\":\"40\",\"196\":\"40@0\",\"197\":\"40@1\",\"198\":\"41\",\"199\":\"41@0\",\"200\":\"41@1\",\"201\":\"42\",\"202\":\"42#axios\",\"203\":\"42#function-和-箭头函数\",\"204\":\"42@0\",\"205\":\"42@1\",\"206\":\"43\",\"207\":\"44\",\"208\":\"45\",\"209\":\"46\",\"210\":\"47\",\"211\":\"48\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[4,135],\"3\":[null,null,3],\"4\":[null,null,2],\"5\":[5,334],\"6\":[null,null,3],\"7\":[null,null,2],\"8\":[6,174],\"9\":[null,null,3],\"10\":[null,null,2],\"11\":[6,65],\"12\":[null,null,3],\"13\":[null,null,2],\"14\":[4,51],\"15\":[null,null,3],\"16\":[null,null,2],\"17\":[4,190],\"18\":[null,null,3],\"19\":[null,null,2],\"20\":[6,280],\"21\":[null,null,3],\"22\":[null,null,2],\"23\":[4,278],\"24\":[null,null,3],\"25\":[null,null,2],\"26\":[5,8],\"27\":[1,123],\"28\":[1,50],\"29\":[null,null,3],\"30\":[null,null,2],\"31\":[6,70],\"32\":[null,null,3],\"33\":[null,null,2],\"34\":[6,136],\"35\":[null,null,3],\"36\":[null,null,2],\"37\":[4,122],\"38\":[null,null,3],\"39\":[null,null,2],\"40\":[3,9],\"41\":[null,null,3],\"42\":[null,null,2],\"43\":[2,181],\"44\":[null,null,3],\"45\":[null,null,2],\"46\":[4,162],\"47\":[null,null,2],\"48\":[null,null,1],\"49\":[3,24],\"50\":[null,null,2],\"51\":[null,null,1],\"52\":[2,167],\"53\":[null,null,2],\"54\":[null,null,1],\"55\":[2,168],\"56\":[null,null,2],\"57\":[null,null,1],\"58\":[4,154],\"59\":[null,null,2],\"60\":[null,null,1],\"61\":[3,63],\"62\":[null,null,2],\"63\":[null,null,2],\"64\":[2,21],\"65\":[null,null,2],\"66\":[null,null,2],\"67\":[3,27],\"68\":[null,null,2],\"69\":[null,null,2],\"70\":[5,6],\"71\":[null,null,2],\"72\":[null,null,2],\"73\":[3,35],\"74\":[null,null,2],\"75\":[null,null,2],\"76\":[3,17],\"77\":[null,null,2],\"78\":[null,null,2],\"79\":[5,47],\"80\":[null,null,2],\"81\":[null,null,2],\"82\":[3,42],\"83\":[null,null,2],\"84\":[null,null,2],\"85\":[3,80],\"86\":[1,101],\"87\":[1,43],\"88\":[null,null,1],\"89\":[null,null,3],\"90\":[2],\"91\":[3,108],\"92\":[2,27],\"93\":[2,30],\"94\":[2,55],\"95\":[2,5],\"96\":[null,null,1],\"97\":[null,null,3],\"98\":[2],\"99\":[1,41],\"100\":[1,33],\"101\":[1,41],\"102\":[1,26],\"103\":[1,26],\"104\":[1],\"105\":[1,43],\"106\":[3,28],\"107\":[2,9],\"108\":[2,76],\"109\":[1,21],\"110\":[1,9],\"111\":[1],\"112\":[1,9],\"113\":[1,9],\"114\":[2,28],\"115\":[1],\"116\":[1,50],\"117\":[1],\"118\":[1,23],\"119\":[1,17],\"120\":[1,54],\"121\":[1,63],\"122\":[1,17],\"123\":[1,16],\"124\":[1],\"125\":[1,45],\"126\":[1,28],\"127\":[1,14],\"128\":[2,9],\"129\":[null,null,1],\"130\":[null,null,3],\"131\":[3],\"132\":[1],\"133\":[2,97],\"134\":[1,64],\"135\":[1,31],\"136\":[2,45],\"137\":[1,65],\"138\":[1,35],\"139\":[2,44],\"140\":[1,42],\"141\":[1,35],\"142\":[2,13],\"143\":[null,null,1],\"144\":[null,null,3],\"145\":[3],\"146\":[1,28],\"147\":[1,37],\"148\":[1,120],\"149\":[1,163],\"150\":[1,54],\"151\":[2,10],\"152\":[null,null,1],\"153\":[null,null,3],\"154\":[2],\"155\":[1,15],\"156\":[2,15],\"157\":[2,18],\"158\":[2,128],\"159\":[1,52],\"160\":[2,4],\"161\":[null,null,1],\"162\":[null,null,3],\"163\":[2],\"164\":[1,59],\"165\":[2,88],\"166\":[2,10],\"167\":[2,6],\"168\":[null,null,1],\"169\":[null,null,3],\"170\":[2],\"171\":[null,null,1],\"172\":[null,null,3],\"173\":[3,16],\"174\":[1,47],\"175\":[1,66],\"176\":[2,47],\"177\":[2,107],\"178\":[1,40],\"179\":[null,null,2],\"180\":[null,null,1],\"181\":[3,17],\"182\":[3,27],\"183\":[1,11],\"184\":[1,23],\"185\":[1,23],\"186\":[1,19],\"187\":[1,21],\"188\":[1,13],\"189\":[1,29],\"190\":[null,null,2],\"191\":[null,null,1],\"192\":[3,29],\"193\":[null,null,2],\"194\":[null,null,5],\"195\":[7,173],\"196\":[null,null,2],\"197\":[null,null,7],\"198\":[3,356],\"199\":[null,null,2],\"200\":[null,null,5],\"201\":[4,25],\"202\":[1,149],\"203\":[1,65],\"204\":[null,null,2],\"205\":[null,null,2],\"206\":[1,3],\"207\":[4],\"208\":[2],\"209\":[3],\"210\":[2],\"211\":[2]},\"averageFieldLength\":[2.4753010621491587,77.4839282592927,2.0533843111580294],\"storedFields\":{\"0\":{\"h\":\"主页\"},\"1\":{\"h\":\"文章\"},\"2\":{\"h\":\"南哪 2022-0-intro\",\"t\":[\"各位好啊！这里是某 CQ！\",\"我不是佬，只是一个想为大家着想的菜菜OIer\",\"所以我们在这里正式推出CPL dotOJ补完计划！\",\"很多同学反映，我们的OJ题目与上课内容脱节，上课内容听不懂。\",\"怎么办呢？某 CQ 来帮你！\",\"在某 CQ 仍然会当天课程的情况下，我们每周的C语言课后会尽快在洛谷挑选一些适合大家练习的题目，供大家为本周的OJ困难挑战做准备练习，同时也希望大家能获得对程序设计更深的理解。\",\"某 CQ 也会在题单的介绍中，为大家提供一些也许不是特别好的讲解。来帮助大家理解当周的课程。\",\"某 CQ 的其它课程成绩并不是很好，希望各位佬们能够帮助某 CQ！OTZ\",\"现在我们所在的是 0-intro 题单！\",\"在这周的课程中，我们学会了 C 语言的基本设计结构，也学到了基本的interger类型变量的定义、输入和输出。\",\"大体格式如下：\",\"#include <stdio.h> int main() { return 0; } \",\"这一部分是需要同学们记住的\",\"我们现在还无法理解 int main() 和 return 0 的具体意思，所以我们暂且先把这个放在一边，只需要知道一个程序不能少了上面代码的任何一个东西\",\"而 #include <stdio.h> 是指使编译器包含(include) stdio.h 这一 C 语言库的指令\",\"提示\",\"stdio.h 这个库来头可不小，他的std指的是标准(standard)，而io指的是输入输出(in, out)，连起来读就是标准输入输出库，.h 是它的文件名后缀，由此可知，我们在程序中输入输出都离不开它。\",\"在课程中，我们也学到了基本的输入输出指令\",\"输入：\",\"scanf(\\\"%d\\\", &a) \",\"其中 %d 表示我们想要读入一个整型(int)变量，之后跟上&号和我们想要存入这个数据的变量名。\",\"提示\",\"& 号表示这个变量的地址，这个很好理解啊，如果你直接写变量名，那 scanf 了解到的是这个变量的值，而要想写入数据，scanf 必须要知道这个变量的地址在哪里，它才好将读入的值存过去，所以，非常重要的一点是读入一定不能少了 &\",\"输出：\",\"printf(\\\"%d\\\\n\\\", a); \",\"提示\",\"printf 指令的内部需要给出一个用 \\\"\\\" 括起来的字符串和若干变量，当我们在 \\\"\\\" 里面填入东西，printf 就会输出对应的东西，而当我们写入 %d 的时候，就相当于告诉 printf，这里需要输出一个变量，而之后的给出的变量必须与按照前面字符串中出现的 %d 一一对应的给出，顺序也不能错。\",\"第零章我们只学了整型变量 int\",\"而且我们并不需要知道这是什么意思\",\"我们只需要知道，我们只要写出一行：\",\"int a; \",\"我们就能定义一个名为 a 的整型变量，而且我们能用上面的输入输出来对这个变量进行操作\",\"在学完 int 之后，我们又学了赋值语句和基本的四则运算\",\"赋值语句我们用的是 = 这个传奇的符号，它的能力是将它右侧的值赋给左侧的变量，于是我们便学会了对变量进行基本的处理：\\\\\",\"int a = 1, b = 2; int sum = a + b; \",\"这一章的内容貌似确实就该这么多，知道了这一点点东西，没想到我们已经能编写出一个能干点事情的程序了。那么，快来试试吧！\",\"某 CQ 祝大家在之后的题单中能够快乐地提升自己。\",\"题单链接：\",\"南哪2022-0-intro - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"3\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"4\":{\"c\":[\"CPL\",\"DotOJ\"]},\"5\":{\"h\":\"南哪 2022-1-types-io\",\"t\":[\"各位好呀，这里是某 CQ！\",\"今天给大家带来 1-types-io 的练习题单~\",\"根据 types-io 的题目，我们可以看出，这章主要是考察各位同学对变量类型的把控并使用变量类型及四则运算以及 math.h 库中的一些函数来解决较为实际的问题，所以这次我们主要的关注点是变量类型以及一些要注意的点。\",\"首先先来列一下常见的变量类型：\",\"int Num_int; long long Num_long_long; float Num_float; double Num_double; char ch; bool flag; // 注意，这里是随便命名，并不是某种标准的命名法，请不要参考！ \",\"int 类型：\",\"int 类型被称为 32 位带符号整数，它是用 32 个二进制位来表示的整数，同时，它的最高位用来表示符号，如果该位是 1 则这个数是负数。所以 int 类型真正用来表示数据大小的只有 31 位，这也就直接决定了 int 类型能表示的范围是 -2147483648 ~ 2147483647，也就是2的31次方减去1\",\"提示\",\"之所以负数能到 -2147483648，是因为在计算机中，负数是以补码的形式存储的，也就是把正数的二进制取反再加 1，所以 -2147483648 的补码就是 0，所以它实际上就是 0\",\"如果你确定不会出现负数，而且你想追求更大一些的表示范围的话，你可以使用 unsigned int 来充分利用这 32 位，即使它不再能表示负数。\",\"int 类型在 scanf 和 printf 里面的表示是%d\",\"unsigned int 类型在 scanf 和 printf 里面的表示是%u\",\"long long 类型：\",\"和 int 实际上一样，只不过人家是 64 位的，比 int 大得多。\",\"也有 unsigned long long，很好用\",\"long long 类型在 scanf 和 printf 里面的表示是 %lld\",\"unsigned long long 在 scanf 和 printf 里面的表示是 %llu\",\"关于整型变量的补充：\",\"其实在大部分情况下，大家需要用到的还是整型变量，所以在此某 CQ 希望给出更多的一些小技巧。\",\"关于存储空间：\",\"大家可能知道，也可能不知道，二进制的 8 个位成一个字节，也就是 1 Byte，或者 1 B，而 1024 B = 1 KB，而 1024 KB = 1 MB\",\"当我们在做题的时候，会看到题目给定的时空限制。\",\"当我们思考一道题如何去做的时候，也不要忘了去算一算自己到底用掉了多少空间，或者花去了多少的时间(最简单的方式是以1亿次循环为标准，超出即危险)，以避免空间超限和时间超限的问题。\",\"当然，当你拿不到完全分的时候，使用超时的算法拿部分分未尝不可。\",\"关于溢出：\",\"整型变量的溢出实际上比较好控制，当你超过一个整形变量能够表示的范围时，它会从它能表示范围的另一端重新开始，比如一个 int 变量存了 2147483647，加上 1 就变成了 -2147483648\",\"注意\",\"实际上，溢出是未定义行为，它的具体表现取决于编译器，所以你最好还是不要去尝试溢出，除非你非常清楚你自己在做什么。\",\"float 类型：\",\"float 类型被称为单精度浮点数，能被用来表示小数，但是表示的精度有限。\",\"float 类型在 scanf 和 printf 里面的表示是 %f\",\"double 类型：\",\"double 类型被称为双精度浮点数，是我们常用的小数变量类型，能表示更多的小数位。\",\"double 类型在scanf和printf里面的表示是%lf\",\"一些注意点：\",\"math.h 库中的函数实际上大多数的实现都是基于 double 的，使用 float 可能会出现一些精度上的问题\",\"printf 输出的一些奇技淫巧在此并不赘述。\",\"char 类型：\",\"char 类型表示一个字符，ascii 码里面实际上并没有多少东西，所以实际上一个 char 变量只有 8 位，也就是 1 个字节，最多只能表示到 255，在答疑中发现有人尝试用字符存大于 255 的数字，这个是值得注意的。\",\"char 类型在 scanf 和 printf 里面的表示是 %c\",\"一些注意点：\",\"可能不少同学去记'0'、'a'、'A'的ascii值，实际上是没有必要的，比如你可以使用'0'来直接表示字符0代表的值，C语言是认识这些东西的。\",\"注意\",\"当你 scanf 一个字符的时候，它是紧接着向后读一个字符，没错，这意味着换行符和空格也包括在内，使用时需要特别注意。\",\"bool 类型：\",\"bool 类型只有两种状态：0 或者 1，需要用到 stdbool.h 的库\",\"因为存储空间占用至少是 1 B，所以 bool 类型硬生生占了1B的内存，虽然它实际上只有1bit。\",\"提示\",\"至少占用 1 Byte 的内存空间是因为 C 语言的变量存储是对齐的，也就是内存地址是 8 的整数倍，所以 bool 类型实际上也会占用 1 Byte 的内存空间。\",\"bool 类型因为较 int 占用内存更加少而常被用在一些判断中。以及地图障碍的记录。\",\"关于 getchar() 和 putchar()：\",\"这俩货其实根本没必要知道，和 scanf%c 还有 printf%c 实际上是一样的\",\"提示\",\"但是它们更快。😉\",\"关于 enum：\",\"枚举类型实际上也是 int，但可以为这个变量的特定值附上特定的名字，可以用来很方便地表示一些固定的值，比如一周的星期几，一年中的月份，等等。\",\"比如：\",\"enum week { Monday = 0, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }; \",\"这样，我们就可以使用 Monday 来表示星期一，使用 Tuesday 来表示星期二……\",\"提示\",\"枚举类型默认从 0 开始，你也可以为某个特定的枚举指定值，如不指定，则它的值为前一个枚举的取值 +1\",\"关于 typedef：\",\"typedef 可以用来给一个类型起一个新的名字，比如：\",\"typedef int integer; \",\"这样，我们就可以使用 integer 来表示 int 类型了。\",\"关于 math.h\",\"常见的数学函数，比如开根 sqrt，立方根 cbrt，乘方 pow，对数 log，绝对值 abs，这些，如果想用，除了自己写，就只能借助这个库了，当然，每个函数都有属于它自己的坑（比如 pow 难以接受负数），在使用之前，最好先查清楚怎么用。\",\"写出更好看的代码格式（非常重要）：\",\"一种好的代码格式，能让你的程序看上去更加清晰，检查起来好检查，也许也可以让你更有耐心地去Debug，而且别人看了至少也会觉着蛮清爽的。\",\"下面来举一个某 CQ 喜欢的代码格式：\",\"#include <stdio.h> long long solve(long long year, long long month, long long day) { long long a = (14ll - month) / 12ll; long long y = year + 4800ll - a; long long m = month + 12ll * a - 3ll; return day + ((153ll * m + 2ll) / 5ll) + 365ll * y + y / 4ll - y / 100ll + y / 400ll - 32045; } int main(int argc, char *argv[]) { long long year, month, day; scanf(\\\"%lld%lld%lld\\\", year, month, day); printf(\\\"%lld\\\\n\\\", solve(year, month, day)); return 0; } \",\"写出这样的代码具体改变了什么呢？\",\"控制好语句块的缩进\",\"对于附属于某一语句（比如 int main()、以及之后要学到的 for、if 等）的内容，我们需要相对于原来的语句额外缩进一个 Tab，而不是和原来那句并排写，那样只会导致更大的混乱。\",\"灵活运用 Tab 制表符来让你的程序变得更美观，比如：\",\"int numA, numA; char ch; long long ans; \",\"语句块之间可以适当空行\",\"虽然 C 语言中空行并不会影响程序，但是适当的空行可以让你的程序看起来区分步骤更加明显\",\"多加空格\",\"大家可能会问：加空格干什么用呢？\",\"空格能让你的不少算式看上去更加分散，易于分辨哪个是哪个，同时也可以使算式看上去更加易于理解。\",\"比如说上面那个长式子，给大家拿出来对比一下：\",\"long long ans = day + ((153ll * m + 2ll) / 5ll) + 365ll * y + y / 4ll - y / 100ll + y / 400ll - 32045; long long ans=day+((153ll*m+2ll)/5ll)+365ll*y+y/4ll-y/100ll+y/400ll-32045; \",\"区别非常明显，某 CQ 表示第二行代码根本不想看。\",\"另外某 CQ 想要提醒下各位同学，每道题有条件可把之前的代码清空了重写，这样可以更快地提高打字速度。\",\"某 CQ 知道各位同学已经学过了if和for还有while，但某 CQ 还是建议同学们使用当周的知识点解决问题。\",\"1-types-io就这些，其它内容个人根据需求自己看。\",\"题单链接：\",\"南哪2022-1-types-io - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"6\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"7\":{\"c\":[\"CPL\",\"DotOJ\"]},\"8\":{\"h\":\"南哪 2022-2-if-for-array\",\"t\":[\"if-for-array。在这一章中我们学会了 C 语言编程中最基础也是最重要的两种结构：分支结构以及循环结构\",\"以及一种最重要的写法：数组，这使得我们开始有能力处理大量的数据。\",\"if 语句，先来看一下用法：\",\"if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) { printf(\\\"是闰年。\\\\n\\\"); } else if (year % 10 == 0) { printf(\\\"是个整十数的年份。\\\"); } else { printf(\\\"貌似是个年份\\\"); } \",\"当 if 语句中条件成立的时候，便会执行 if 语句之后大括号里面的内容，如果条件不成立，且这个 if 后面有紧接着对应的 else 的时候，便会执行 else 之后大括号里面的内容\",\"if 语句可以进行嵌套，类似上面的写法，来对某个值进行分类\",\"同时，在使用 if-else 语句的时候，某 CQ 希望大家无论语句多少都加上大括号，以避免一些逻辑上的问题，因为有时，if 里面仍然有 if-else ，而如果没有加大括号，编译器便会选择最近的 if 来作为判断条件，这可能会导致一些意料之外的结果\",\"如果你想使用多种判断，你可以使用逻辑与(&&)还有逻辑或(||)来连接多个判断。\",\"其它的逻辑判断符号除了相等(==)特别一些（为了和赋值语句区分开），其它的也不太容易错\",\"提示\",\"if 判断条件中非 0 即真，比如：\",\"if (1) if (-1) if (a = 100) \",\"这些if条件之后的语句可以执行\",\"而：\",\"int n = 0; if (n) //... \",\"这个 if 之后的语句并不能执行。\",\"for 循环，先来看一下写法：\",\"for (int i = 1; i <= n; ++i) { printf(\\\"*\\\"); } \",\"可以看到，for 循环当中我们用两个分号将其分成了三个部分。\",\"第一个部分是初始化部分，在其中可以直接定义一个变量，也可以直接给某个变量附上初值，也可以不填。\",\"第二个部分是判断部分，只有判断条件成立，for 循环才会继续。\",\"第三个部分是处理部分，在每次循环结束的时候，这里面的操作都会进行一次。\",\"在每次循环结束并完成 for 循环中的处理部分后，for 循环会进行一次判断部分，如果判断不成立，for 循环就会结束。\",\"提示\",\"你可以使用 continue 语句来直接进入下一次循环\",\"你可以使用 break 语句来直接跳出循环\",\"我们还学习了数组。数组这东西好理解啊，我们把它想象成一个有限长的数列，数列中的每一个位置上都存储了一个对应类型的变量，我们需要提前指定这个数组的大小，我们也需要通过指定位置来调用某一个元素。\",\"int a[100005]; for (int i = 1; i <= 100000; ++i) { a[i] = i; } \",\"a 是我们建的数组的名字，我们在后面加上方括号，填上数字来告诉编译器我们想定义一个数组，长度为多少，之后我们就可以通过在方括号里填数组下标的形式来访问某一个特定的元素。\",\"结合 for 循环和数组，我们便能对大量的数据进行处理，统一读入、统一输出。\",\"一些提示：\",\"当同学们使用 for 循环的时候，可以灵活运用内部的三大部分，不一定每一个部分都要死板的填上东西，只要你的思路没有错误，你可以采取更花式的写法，你也可以把 for 循环变成下一次要提到的 while 循环，因为定义和处理部分完全可以不填。\",\"这便是 2-if-for-array 的大致内容，某 CQ 希望同学们在题单的习题中能够练习掌握这些基本结构。\",\"我们在结尾附上位运算的运算法则：\",\"与运算（&）：\",\"0 & 0 = 0, 1 & 1 = 1, 0 & 1 = 0, 1 & 0 = 0 \",\"或运算（|）：\",\"0 | 0 = 0, 1 | 1 = 1, 0 | 1 = 1, 1 | 0 = 1 \",\"异或运算（^）\",\"0 ^ 0 = 0, 1 ^ 1 = 0, 1 ^ 0 = 1, 0 ^ 1 = 1 \",\"位移运算（<<、>>）\",\"a << x 将 a 左移 x 位，相当于乘上 2 的 x 次方，右移同理\",\"提示\",\"超出存储范围的位数将被抹除，不足的将填上0\",\"注意\",\"位运算的速度比正常运算要快，灵活使用可以提高代码的效率，但是使用时，需要注意运算符的运算顺序，必要的情况下，尽量加上括号\",\"比如，判断一个数是否为偶数，如果使用 % 运算符的话，除法的速度非常的慢，而如果使用 n & 1 来获取 n 二进制下第一位的取值来判断的话，速度会快很多\",\"题单链接：\",\"南哪2022-2-if-for-array - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"9\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"10\":{\"c\":[\"CPL\",\"DotOJ\"]},\"11\":{\"h\":\"南哪 2022-3-for-a-while\",\"t\":[\"这一章实际上和上一章并没有区别\",\"因为 while 循环实际上完全可以由 for 循环替代，除了 do-while 循环\",\"来简单提一下这两种循环：\",\"while (a < b) { a = a + 1; } \",\"do { a = a * 2; } while (a < b); \",\"while 循环很简单，只要括号里的条件成立，它就会一直执行。\",\"do-while 唯一不同的地方在于，无论条件成立与否它都会先执行一次，再进行判断。\",\"continue 和 break 语句在 while 循环中依旧适用。\",\"当输入不确定数量的数据时，我们可以通过 while 循环来实现：\",\"while (scanf(\\\"%d\\\", &n) != EOF) { /* ---- */ } \",\"还有一个重要的知识点，虽然某 CQ 并不会严格的证明，但是他告诉同学们，取模运算十分神奇，在运算过程中随时取模，最终得出的结果与只对结果取模是一样的！\",\"以后的题目中可能会出现对某一数字取模的情况，这很有可能是运算过程中产生的结果可能过大，需要同学们及时对各个数据进行取模。\",\"到这里就不得不提一嘴：很多同学遇到了自己检查不出来却实际上超出了变量可存储范围的运算，所以某 CQ 请各位同学们在进行变量相加或者相乘的时候，注意观察题目的数据范围思考在最坏的情况下自己的算式会不会有某个地方超出了变量的存储范围，如果是，则需要对自己的算式进行一定的修改，比如将除法提前。\",\"题单链接：\",\"南哪2022-3-for-a-while - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"12\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"13\":{\"c\":[\"CPL\",\"DotOJ\"]},\"14\":{\"h\":\"南哪 2022-4-loop\",\"t\":[\"这一章仍然在与上两章内容重复，只多了一个 goto 语句\",\"goto 语句并不建议使用，因为会造成代码逻辑的混乱，但当处在多重循环之中，想要一下子跳出所有的循环，一层一层 break 比较麻烦，这时候 goto 语句才有了用武之地。\",\"简单介绍一下使用方式：\",\"int ans = 0, n; scanf(\\\"%d\\\", &n); if (n == 0) { // n = 0 情况下，答案显然可以直接得出，那么可以跳过求解步骤直接输出答案 goto End; } // 假装这里有一大堆用于求解 ans 的语句 End: printf(\\\"%d\\\\n\\\", ans); \",\"提示\",\"goto 实际上是历史遗留问题，它来自于汇编语言，在高级语言中不建议使用，因为它的使用会导致代码逻辑混乱，难以调试。\",\"这次题单里面更多的会出现二维数组的题目，可以将它想象成一个棋盘，每一个格子都存上一个变量。\",\"题单链接：\",\"南哪2022-4-loops - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"15\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"16\":{\"c\":[\"CPL\",\"DotOJ\"]},\"17\":{\"h\":\"南哪 2022-5-function\",\"t\":[\"大家好啊，这里是某 CQ ！\",\"这次是第一次准时推出的C-PL dotOJ补完计划！\",\"其实这章题目还是挺水的，老师貌似是有选择性的听取了上次开会的提议，让OJ的前几题较为简单，便于练习。\",\"这章主要是要求我们通过函数将代码分块，各个函数解决小范围内的一些问题，然后将它们组合起来解决整个问题。\",\"如果你并没有学习函数并能灵活使用，那么这次的OJ作业对你来说仍然十分煎熬磨人。\",\"那么，函数究竟是干嘛用的呢？\",\"来看下面一个例子：\",\"int n; int cycle(int x) { if (x > n) { x -= n; } if (x < 1) { x += n; } return x; } int main() { while (1) { x = cycle(x + 1); } return 0; } \",\"（这代码当然是个死循环，不要想着去运行）\",\"（某 CQ 将这个函数用在了约瑟夫问题当中，他发现这玩意真的很好用。）\",\"通过写这样一个 cycle 函数，我们将 x 的值成功的限制在了 1 到 n 的范围内，使得 x 可以在某一范围内循环地往右运动。\",\"你实际上可以发现函数只不过是把一些东西放到另一个地方去写罢了。这有什么用呢？\",\"非也！当你在很多地方都要做同一种操作，你就堆在主函数里面？那自然写出来的代码是十分臃肿的。\",\"想想不久前你可能仍然挣扎在数百行代码之中，但你会发现你实际上大部分的代码都是在复制粘贴。\",\"如果有一种代码能够统一的表示这些操作，那该多好啊？\",\"这就是函数的用途所在，把一些繁复的语句打包，在你想用的时候，说一声就完事了。\",\"我们来分析一下函数的定义方法：\",\"首先，函数是不能定义在某一个函数里面的，我们一直在写的 int main() 就是一个特殊的函数。\",\"提示\",\"main 作为 C 语言规定的程序的入口，所有的程序都从这里开始执行，因此，每一个 C 语言程序都必须包含 main 函数\",\"我们以上面的 cycle 函数为例，来解释一下函数的结构：\",\"首先是这个函数的返回值类型：我们在 cycle 函数中需要获得 x 限制在 1 到 n 范围内的值，所以它的返回值肯定是我们想要得到的那个值，也就是一个 int 值。\",\"然后是这个函数的名字，这个不必说，函数后面一定有括号，括号中可以填一些传入该函数的参数，说人话，就是告诉函数它需要知道这些值，它才能给你算出答案来。在 cycle 函数中我们传入了经过处理的 x 值，希望通过函数将它限制在 1 到 n 的范围内。\",\"另外，如果你想要传入多个参数，你必须用逗号隔开并分别指定每一个变量的类型，即使变量类型是一样的也不行。\",\"最后是这个函数的主体部分，具体怎么实现自然不必说，大家应该都会。\",\"特别的，函数有一种特别的类型，叫做 void 函数，void 函数没有返回值，而仅仅是作为一个操作存在，在主函数中可以直接调用这个函数来实现这个操作。\",\"这也是某 CQ 一直想让你们把关键的变量放在主函数外面的原因。当你将函数定义在这些变量后面的时候，因为这些变量已经声明，在函数中没有变量与之重名的情况下（注意！这个非常的重要！），你可以调用和修改这些变量！\",\"举一个 void 函数的例子：\",\"int a[10005]; void reverse(int l, int r) { while (l < r) { int t = a[l]; a[l] = a[r]; a[r] = t; ++l, --r; } } \",\"通过这样一个函数，我们便实现了一个简单的操作：将数组从 l 到 r 这个区间反转。\",\"（这也正是某 CQ 在这周的 E 题 下一个排列中用到的函数）\",\"在函数的使用过程中，我们需要特别注意这一点：\",\"当一个函数有了返回值，这个函数就会直接结束。\",\"比如说大家可能已经尝试通过在主函数里直接 return 0; 来提前结束主函数，这也是一个优化的小技巧，当你的函数已经得出结论，没必要继续下去的时候，你能直接通过返回值来立即离开这个已经没有用的函数。\",\"可能你想问，void 函数也能返回值吗？\",\"当然可以啊，void 只要返回空的不就行了嘛，也就是说，在 void 函数中，你也可以使用 return; 来直接退出。\",\"这样就大致讲解了函数的使用方法。\",\"还不明白？来告诉你们一个使用实例：\",\"本周作业 D 题，也就是确定进制那道题，你可以编写一个判断是否确认符合进制规则的函数，再编写一个将 n 进制的数转化为 10 进制的数的函数，然后判断p,q,r是否在某一个进制下符合条件？只需要在这三个数都符合条件的情况下，转化为十进制的 p 和 q 的乘积等于十进制下的 r 就行了哦\",\"是不是感觉比不用函数的思路简单许多？\",\"（某 CQ 表示函数真的很好用，大家一定要多加练习）\",\"这次的题单也许会出现之前题单中出现的题目，某 CQ 这次希望大家使用函数的方法来解决这些题目。\",\"感谢各位的收看！\",\"题单链接：\",\"南哪2022-5-function - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"18\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"19\":{\"c\":[\"CPL\",\"DotOJ\"]},\"20\":{\"h\":\"南哪 2022-6-recursion EX 搜索\",\"t\":[\"特别注意：P2383 是最难的题，需要考虑大量的剪枝优化，建议放到最后做\",\"搜索的题目一开始做会有一点点难理解，练多了才会好，所以这次题目难度变化不会很大，但是数量增加（不过貌似也不是特别多的亚子）\",\"P1433 不要听题解瞎说，正常做数据范围应该是能过的\",\"这里到处都是重点，请各位同学一定要看到最后。\",\"各位好啊！又是我，某 CQ！\",\"发现大家递归好像做的还行了，但是好像基于递归来暴力求解一些问题还不太熟练。\",\"这次我们将从全排列问题开始讲起，将基于递归的搜索的通用做法来给大家过一遍。\",\"将 1 到 n 这 n 的数字按某种顺序排好，一共有多少种排法？并且我们要求你把所有的排法情况按照字典序输出。\",\"int a[N]; bool vis[N]; void permutations(int now) { // 所有的位置都放好数字了，直接输出 if (now > n) { // 这个输出自己写 output(); return; } for (int i = 1; i <= n; ++i) { // 如果这个数字没有被用过 if (!vis[i]){ // 标记为用过 vis[i] = true; // 搜索下一位 permutations(now + 1); // 这个数字不用了，取消标记 vis[i] = false; } } } \",\"实际上，上面的程序里面已经标注的很清楚了。\",\"在每个递归的子问题当中，我们只要处理当前这一位我们要填什么，这一位具体能填哪些数字由前面已经填过的位置决定。\",\"当填好这一位，我们去填下一位。\",\"当所有的位置都填好了，我们就直接输出，然后返回去找别的填数的可能。\",\"当返回前一位的时候，这一位上原本填的数字不要了，所以一定要记得把标记去除。\",\"在这里我们注意到几个问题，它们也正是搜索要注意的内容：\",\"首先，因为这样的穷举方式是基于递归的，所以终止条件依然少不了，不然就等着死循环吧。\",\"其次，能用这种穷举来解决的问题，某个子问题的求解不会被之后求解的另一个子问题所影响，而是只会被在其前面的子问题影响（或者子问题之间根本没有关系）。\",\"然后就是每一个子问题的具体求解，在求解下一个子问题之前一定要把当前子问题对之后子问题求解造成的影响记下来，当返回的时候，一定要把标记取消，否则会有意想不到的（或者意想得到的）问题。\",\"另外需要提醒的一点就是，递归中的错误很可能让人摸不着头脑，最适合的解决方法除了调试，也就只有把整段代码的逻辑重新过一遍才有可能解决了。\",\"听说有些老师在课上已经讲过了八皇后问题。\",\"实际上，在全排列这一代码的基础上稍加修改，我们就能得出求解八皇后问题的方法。\",\"我们按照 8 x 8 棋盘的行来分，显然每一行只可能有一个皇后，每个皇后的列号肯定也不一样，那么我们只要枚举每一行的皇后的列坐标就行。\",\"所以八皇后问题就是一个 n = 8 的全排列问题，不过，条件的判断略有不同。\",\"通过全排列我们已经解决了皇后们出现在同一行/列的问题，现在我们需要解决斜角上冲突的问题。\",\"如果说我们把前面已经找过的皇后全部过一遍一个一个判断，固然是可以的，但是这样做，如果我们将问题扩展到n皇后问题，就显得不那么优秀了，容易超时，那怎么办呢。\",\"注意看某一条从右上到左下的斜线上每一个点的坐标，你会发现，同一条斜线上的点，它们的行号和列号相加是相等的。\",\"从左上到右下的斜线同理，自己算一下这些点的行号和列号之间大概有什么关系。\",\"八皇后问题在洛谷上能找到这道题，在这里就不重复放这道题的具体解法了，这道题会被选在题单里面，如果仍然不是很理解，可以去看看题解。\",\"接下来进入十分重要的一环，在二维图上的路径搜索：\",\"拿一道简单的题目来举例：\",\"一个 n x m 的地图，从（1，1）走到（n，m），只能朝上下左右四个方向走，图中有一些障碍物，求最少要走多少步才能到终点。\",\"注意这里障碍物不止一个，可能有很多个，采取之前蚂蚁寻路的那种通过讨论绕开障碍物的做法是不可取的。\",\"我们先用递归的思路来考虑这个问题：\",\"终止条件：\",\"当我们到达终点或者没有路走了，我们就不需要进一步考虑下一个子问题了。\",\"之后的问题是否对前面的问题有影响：\",\"你走到某一个点，并不会影响前面你走过某个点。所有后面的问题对前面是没有影响的。\",\"具体子问题做法：\",\"当你在点（x，y）时，除了来路，你有三个方向可以走：\",\"如果某个方向上是障碍物或者地图边界，不能走，直接跳过这一个方向。\",\"如果某个方向上是能走的路，而且当前路径之前并没有走过，那么就走过去。\",\"所有的情况都探索完了，退到上一步，继续去找其它的情况，此时记得要把当前的标记去除（因为你需要标记某一个点你有没有走过）。\",\"这里有一个小技巧就是如果是障碍物，你可以直接把它标记为已经走过，这样就不会走上去了。\",\"来看一下展示具体做法的代码：\",\"// 定义方向，减少搜索过程中复制粘贴的工程量（以及其中高得离谱的错误率），这里为了方便，用0占掉了第一格 const int dx[5] = {0, 1, -1, 0, 0}; const int dy[5] = {0, 0, 0, 1, -1}; // 我们要找到最短路径，那么答案初始值应该是最大的，这样才能保证答案最短 int ans = 2147483647, n, m; // 存图实际上有 vis 数组（邻接矩阵）就够了 bool vis[N][N]; // dfs指的是深度优先搜索(Depth first search)从整个搜索过程思考一下为什么它叫这个名字 void dfs(int step, int x, int y) { // 如果这个位置并不能走，直接返回 if (vis[x][y]) { return; } // 走过了，打上标记 vis[x][y] = true; //如果这个位置在地图范围之外，也不能走，直接返回 if (x < 1 || x > n || y < 1 || y > m) { return; } if (x == n && y == m) { if (step < ans) { // 更新答案，同时不要忘了返回，不要继续往下找了 ans = step; } vis[x][y] = false; return; } // 枚举方向 for (int i = 1; i <= 4; ++i) { int nx = x + dx[i], ny = y + dy[i]; // 无所谓，边界条件会出手，直接走 dfs(step + 1, nx, ny); } //返回了，别忘了取消标记 vis[x][y] = false; } \",\"这便是最基本也是最常见的两种搜索，其它的搜索也许在形式上略有不同，但是也逃不过这种思路，记好某 CQ 总结的几点注意，绝对能把搜索写对。\",\"下面讲一点搜索的优化小技巧：\",\"如果你将整个搜索过程画图表示出来，它很像一个从根开始不断分叉的树，我们想要优化搜索，就需要将其中我们不需要的一些分支尽可能的去掉，所以我们很形象地把这种搜索优化方法称作剪枝，实际上就是通过添加一些边界条件来跳过一些不必要的搜索。\",\"其实上面那道图上寻路就可以进行剪枝优化，我们稍微修改一下上面的代码，就能得到：\",\"const int dx[5] = {0, 1, -1, 0, 0}; const int dy[5] = {0, 0, 0, 1, -1}; //定义方向，减少搜索过程中复制粘贴的工程量（以及其中高得离谱的错误率），这里为了方便，用0占掉了第一格 int ans = 2147483647, n, m; bool vis[N][N]; void dfs(int step, int x, int y) { if (vis[x][y]) { return; } vis[x][y] = true; if (x < 1 || x > n || y < 1 || y > m) { return; } // 如果已经走的步数都超过了现有的答案，那他之后怎么走都不会比答案更好了，走它干嘛 if (step > ans) { return; } // 答案已经最小，就没必要求下去了 if (ans == n + m - 2) { return; } if (x == n && y == m) { if (step < ans) { ans = step; return; } } for (int i = 1; i <= 4; ++i) { int nx = x + dx[i], ny = y + dy[i]; dfs(step + 1, nx, ny); // 原理同上 if (ans == n + m - 2) { return; } } vis[x][y] = false; } \",\"通过添加一些边界条件，我们去掉了一些没必要的搜索，优化了搜索的效率，这在一些题目里面，可能会成为至关重要的一环，说不定加了剪枝，你的程序虽然还是暴力，依旧很烂，但是就是能过，因为你实际上比一般的搜索优化了不少。\",\"接下来，题单中有一些搜索的题目，解决它们的任务就交给同学们辣！\",\"注：dfs 也可以用来填充图上的连通块（这其实十分重要！）\",\"UPD(2023.9.11): 在与同学观看的时候发现了代码中的错误，已经修正，代码缩进问题无法解决（频道似乎会吞空格）。\",\"题单链接：\",\"南哪2022-6-recursion EX 搜索 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"21\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"22\":{\"c\":[\"CPL\",\"DotOJ\"]},\"23\":{\"h\":\"南哪 2022-6-recursion\",\"t\":[\"特别提醒：第一题数据范围太大不但需要高精度而且递归会超时，会做即可 如果想要了解如何不超时 请耐心将题单简介看完\",\"各位好啊，这里是某 CQ ！\",\"这次的题单提前，因为根据了解，大部分C语言老师实际上已经讲过递归了。\",\"某 CQ 也去听了课，根据上课的速度，某 CQ 感觉各位同学对递归可能是一知半解，还没有明白递归到底是干嘛用的。\",\"某 CQ 决定提前拿出题单，选择上课提到的三个比较经典的问题，帮大家把上课内容再过一遍。\",\"说到递归，我们肯定得从斐波那契数列讲起，这个可太经典了。\",\"先把代码写在这里，具体解释在下面：\",\"int f(int n) { if (n == 1 || n == 2) { return 1; } return f(n - 1) + f(n - 2); } \",\"在其中我们可以看到，函数自己调用了自己，虽然里面的参数好像不太一样。\",\"这到底是什么意思呢？\",\"我们可以更加形象地解释一下：\",\"要推出斐波那契数列，我们肯定少不了前两项，于是：\",\"f(1)、f(2)：我们知道自己是1\",\"而当n ≥ 3时：\",\"f(n)：我是多少？我不到啊？问问f(n - 1)和f(n - 2)\",\"f(n - 1)、f(n - 2)：问问前两项\",\"……\",\"从最高层一层一层询问下去，直到达到边界，知道确定的答案之后，再一层一层回来，这便是递归的原理。\",\"而我们如何去写递归，需要搞清楚两个关键点：\",\"1、边界条件是什么：\",\"就像斐波那契数列的第一和第二项一样，我们得有最小的问题的答案，才能一层一层递归，找出结果。如果没有边界，那我们面临的将是无穷无尽的鄙视链。\",\"2、对于当前的问题，我们该怎么处理：\",\"像斐波那契数列的第n项，我们不知道它是多少，但是我们能知道它由 n - 1 和 n - 2 两个子问题构成，所以我们想知道 f(n) ，只需要知道 f(n - 1) 和 f(n - 2) 就行了，至于它们两个是怎么求出来的，这实际上并不在我们的关心范围内。\",\"注：这样做在时间上并不合理，比如说要想知道 f(6)，大家可以去算一算到底调用了多少次 f(3)。但是这对我们理解递归有很有效的帮助。\",\"UPD：加入此类递归的一种优化方法。\",\"（这次题目选炸了，忘记重新过一遍数据范围了OTZ，请各位饶了我吧）\",\"有些同学可能做了这个题单发现有些题目递归来做特别容易超时，正是因为上述原因导致我们重复去求解了明明只需要求解一次的问题。\",\"那么我们能怎么解决重复求解的问题呢？\",\"诶，我每次求解出其中一个子问题就把它存到一个数组里边，下次需要就直接拿出来用，不就行了吗？\",\"我们还是用斐波那契数列来举例子：\",\"long long f[10005]; long long fib(int n) { if (f[n] != 0) { return f[n]; } return f[n] = fib(n - 1) + fib(n - 2); } int main() { f[1] = f[2] = 1; int n; scanf(\\\"%d\\\", &n); printf(\\\"%lld\\\\n\\\", fib(n)); } \",\"这样我们便通过将已经求解过的答案存到一个数组里来避免同一个子问题的重复求解，从而能在相当于n次循环的时间内解决了这个问题。\",\"某 CQ 将这种方法不太准确地称作递归的记忆化，这是一种还算很常用的用来避免重复求解子问题的优化方法。\",\"希望同学们能够掌握这种用空间换时间的优化方法，毕竟，空间比时间更好掌握。（空间可以算，非常直观，而时间有的时候很难看出来有没有超）\",\"下面来解决一个稍微难理解一点的：汉诺塔问题\",\"我们先来找边界条件：\",\"当起始柱子上只有一个盘子的时候，直接把它挪到终点柱子就好了。竟然这么简单，某 CQ 表示这非常的难以置信。\",\"然后我们来找盘子为 n 层时的处理方法：\",\"实际上我们可以把 n 层抽象成两层：最底下的一层和上面 n - 1 层，以方便我们将 n 的问题拆分成更小的同时又是方便解决的问题。\",\"然后考虑两层：我们得先把上面那个盘子移到中间柱子上面，再把下面一个盘子移到终点柱子上，最后把中间柱子上的那个盘子移到终点柱子上，完成汉诺塔的位移。\",\"所以我们怎么具体构造这个递归呢？先给代码后解释：\",\"void hanoi(int n, char a, char b, char c) { if (n == 1) { printf(\\\"%d:%c->%c\\\", n, a, c); } else { hanoi(n - 1, a, c, b); printf(\\\"%d:%c->%c\\\", n, a, c); hanoi(n - 1, b, a, c); } } \",\"先解释一下这个函数中各个参数的含义， n 自然不用说，表示 n 层，但是如果你将 a，b，c 认作是一柱二柱三柱那格局就小了，它们应该被称作起始柱子，中间柱子和终点柱子。在递归的过程中，这三个变量的表示的柱子实际上会不断变化，因为你在一些步骤中终点柱并不是最开始的那个终点柱：比如说两层的时候，你第一步是要移到中间柱上，而不是终点柱上，中间柱才是你这一步的终点柱。\",\"首先用if特判解决掉最小的问题，我们直接输出移动方式就行了。\",\"然后关键的在下面，对于 n 层，我们先将 n - 1 层从起始柱子通过终点柱子的帮助移到中间柱子去，这之后我们将最底下的那一层移到终点柱子上，这一步可以直接输出，最后我们将这 n - 1 层从中间柱子通过起点柱子的帮助，移到终点柱子上，这就是抽象为两层的汉诺塔问题的处理方法。\",\"通过这样的处理，我们将n层的问题，转化成了一次移动和两次 n - 1 层的问题，这样层层缩小，最终变成一层的可以直接解决的问题。\",\"实际上递归就是一种量变引起质变的方式，通过不断地解决小问题，总有一天你会发现，欸，大问题好像也就这么简简单单的解决了。\",\"递归真的很好用。\",\"最后我们来简单介绍一下归并排序，这个实际上比汉诺塔问题更加好理解。不过归并的过程略微有些烧脑，某 CQ 希望各位同学自己去写一写，找到自己的方法，某 CQ 会在题单中放一道经典的需要用归并排序的问题，并且某 CQ 会在接下来的讲解中一并讲掉这题是怎么做的（当然这只是解决那道题其中的一种方法）\",\"归并排序，这个就不给代码了，同学们需要自己写一写，找到自己习惯的写法。\",\"归并排序到底是什么意思？它又到底快在哪里呢？\",\"我们先解释一下归并排序的具体原理：\",\"归并排序的目的是通过二分将整个序列的排序分成两个小序列的排序，然后通过一种特定的合并的方法将两个有序的序列合成一个有序的序列。\",\"再来具体解释一下，比如我们想要排序下标从1到n的一个数组，那么我们实际上需要排序下标 1 到 (n + 1) / 2 的数组和 (n + 1) / 2 + 1 到 n 的数组，然后将这两个数组合并成一个有序的数组。\",\"通过这样以二分的方法将数组拆分，直到将数组拆成长度为1，那这个时候它本身就是有序的，非常好，不需要排序。\",\"然后具体的合并方式实际上很好想，实现起来略有一些麻烦，某 CQ 留给大家自己去实现。\",\"至于它为什么快呢？因为每一层递归，我们实际上等价于对整个数组循环一边，将它们两两合并，也就是循环了 n 次，而将这个数组二分我们只需要分 log2(n) 次就能将它分到最小，所以我们实际上只需要 n * log2(n) 次循环就能解决这个问题，比起冒泡排序和选择排序的 n * n 次循环就快上不少。\",\"这样，同学们是不是对递归有了更深的理解？\",\"开始做题吧！不过记得，递归的题目确实有点抽象，同学们需要通过一定量的练习才能掌握的差不多，这次题目的难度可能浮动有点大，因为确实有那么一点点难挑，同学们也许需要克服一点困难。\",\"下面是归并排序的一个应用的讲解：\",\"归并排序可以用来解决逆序对问题：\",\"在一个数列中，存在 i < j, 同时 a[i] > b[j] 这时我们称 (i, j) 这个二元组为这个数列的一个逆序对。\",\"显然冒泡排序可以解决这个问题，当我们需要交换两个相邻的数时，显然这两个数构成了一个逆序对，而将一个数组变为有序数组，我们一定要解决所有的逆序对才行。\",\"但是冒泡排序太慢了，我们不想用它，怎么办？\",\"归并排序来帮你！\",\"当我们想要合并两个序列的时候，逆序对可以计算吗？\",\"这个就给个提示，不具体讲了，留给有条件的同学们自己去思考，题单里有一道这个题，可以自己去写写看。\",\"祝大家本周末以及下周的期中考试愉快！\",\"提单链接：\",\"南哪2022-6-recursion - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"24\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"25\":{\"c\":[\"CPL\",\"DotOJ\"]},\"26\":{\"h\":\"南哪 2022-7-data-types\",\"t\":[\"data-types 中提到了一些更进阶的数据类型定义方式，在这里某 CQ 将一些内容重述，以便于更好地理解。\"]},\"27\":{\"h\":\"struct\",\"t\":[\"C 语言不是一种面向对象语言，因此，它没有对象的概念，但是结构体如果用的好的话，也能够媲美对象。\",\"struct 结构体是一种复合类型，它将多个不同类型的变量组合在一起，形成一个整体。\",\"struct 类型的变量在定义时，会分配一段连续的内存空间，其中包含内部所有字段的空间。\",\"在具体使用的时候，你需要先定义结构体类型及其成员，向编译器告知，你创建了这样一个类型，然后才可以使用这个类型来定义变量：\",\"// 定义结构体类型 struct Data { int data1; char data2; double data3; }; // 定义结构体变量 struct Data data; // 使用结构体变量 data.data1 = 1; data.data2 = 'a'; data.data3 = 3.14; \",\"使用 struct 可以很方便的将多个数据打包，使得程序更加的通俗易懂。\",\"提示\",\"你也可以不给结构体名字，它将作为匿名结构体，你没法再在别处使用它，你只能在创建的时候立刻使用它：\",\"struct { int data1; char data2; double data3; } data; data.data1 = 1; // ... \",\"提示\",\"使用之前提到过的 typedef，你可以将 struct 类型重命名，这样在定义变量时，就不需要写 struct 关键字了：\",\"你可以在 typedef 定义的别名中加上 _t 后缀，表示这是 typedef 定义的类型\",\"typedef struct Data data_t; struct Data { // ... } data_t data; // ... \",\"接下来，关键的来了，我们知道 C++ 中的结构体中是可以定义方法的，那么 C 语言中有没有办法实现类似的功能呢？\",\"有的，兄弟，有的，我们可以使用函数指针来申明一些结构体成员，在创建结构体变量实例时，我们可以将函数赋值给这些成员，这样就可以实现类似的方法功能了：\",\"比如，我们创建一个 utils_t 类型，来存放一些工具函数：\",\"typedef utils utils_t // 因为只是定义，所以函数参数部分，你可以不写变量名，实现的时候还是要写的 struct utils { void (*swap) (int *, int *); int (*max) (int, int); int (*min) (int, int); } // 实现这些函数 // 为避免重名，你最好加上前缀 void utils_swap(int *a, int *b) { int tmp = *a; *a = *b; *b = tmp; } int utils_max(int a, int b) { return a > b ? a : b; } int utils_min(int a, int b) { return a < b ? a : b; } // 在使用时，动态创建 `utils_t` 实例，在使用过后也指定销毁方法 // 这样看上去麻烦，但反而更有利于代码的管理 // 比如说你需要在创建时初始化一些字段值，在销毁时做一些清理工作，这样写就会很好改动。 utils_t *create_utils() { utils_t *this = malloc(sizeof(utils_t)); this->swap = utils_swap; this->max = utils_max; this->min = utils_min; return this; } void destroy_utils(utils_t *this) { free(this); } \",\"提示\",\"上面定义的方法都相当于是静态方法，这些方法不会与实例进行交互，如果一些方法涉及到与结构体实例发生交互，你只能通过传入实例来实现，像这样：\",\"typedef struct Dog dog_t struct Dog { int age; void (*grow) (dog_t *); } // 使用 `this`，让含义更贴近面向对象表达 void dog_grow(dog_t* this) { this->age += 1; } // ... // 使用 dog.grow(&dog); \"]},\"28\":{\"h\":\"union\",\"t\":[\"union 联合体，与 struct 结构体类似，但是它只能存放一种数据类型，而且所有字段共享同一块内存空间，因此，联合体的大小等于其中最大的字段的大小。\",\"联合体通常用于存储一些互斥的数据，比如，一个变量，它可能是整数，也可能是浮点数，也可能是字符，那么就可以使用联合体来存储，这样在存储时，只需要分配一块内存空间即可。\",\"union Data { int data1; char data2; double data3; }; union Data data; data.data1 = 1; // 此时，data2 和 data3 的值将不可预测 data.data2 = 'a'; // 此时，data1 和 data3 的值将不可预测 data.data3 = 3.14; // 此时，data1 和 data2 的值将不可预测 \",\"union 只是一种辅助手段，如果滥用，他只会严重破坏代码的可读性。你只应当在清楚自己到底在做什么的时候使用它。\",\"题单链接：\",\"南哪2022-7-data-types - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\",\"这次只有三道题\"]},\"29\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"30\":{\"c\":[\"CPL\",\"DotOJ\"]},\"31\":{\"h\":\"南哪 2022-8-pointer EX 手搓链表\",\"t\":[\"链表在需要节省内存空间，同时不需要进行随机寻址操作时（也就是使用数组下标那种方式快速访问其中的任意一个元素），是非常优秀的数据结构。\",\"要想看懂它，实际上一段代码就足够：\",\"#include <stdio.h> #include <stdlib.h> // 链表的特点在于它占用的内存不像数组那样是连续的， // 这也正导致了链表需要更多的内存用来记录与某一个节点相连的其他节点，且不能直接调用链表当中某个元素的值 // 但是链表的好处在于它的内存是动态的，而且从头到尾顺序访问并不受影响 // 单独链表的应用范围，抛开没有不谈，还是有一点的 // 比如说某些非逼你需要动态维护数组大小的（我不说是哪道题，自己心里清楚 // 单个链表节点，这里演示的是两个方向都能查找的链表 typedef struct list_node list_node_t; struct list_node { int data; list_node_t *prev, *next; }; // 在pos指向的元素之后添加一个新的元素 void add(list_node_t *pos, int data) { list_node_t *node = malloc(sizeof(list_node_t)); node->prev = pos; node->next = pos->next; if (pos->next != NULL) pos->next->prev = node; pos->next = node; node->data = data; } // 删除pos指向的元素 void del(list_node_t *pos) { if (pos->prev != NULL) pos->prev->next = pos->next; if (pos->next != NULL) pos->next->prev = pos->prev; free(pos); } int main() { // 新建一个节点指向链表的开头以方便链表的遍历和添加删除。 list_node_t *list = malloc(sizeof(list_node_t)); list->prev = NULL; list->next = NULL; list->data = 114514; return 0; } // 代码未经检查，如果有误自己去改，意思到了（ \",\"题单链接：\",\"南哪2022-8-pointer EX 手搓链表 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\",\"然而这也没有题……\"]},\"32\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"33\":{\"c\":[\"CPL\",\"DotOJ\"]},\"34\":{\"h\":\"南哪 2022-8-pointer EX 动态数组\",\"t\":[\"这次我们介绍一个很方便但是在 C 语言当中依然用起来有些难度的东西——动态数组。\",\"行向量 vector，在 C++STL 当中有它，但我们更习惯称它位动态数组，它的特点就是能够动态分配数组的内存，方便我们应对未知数据量的问题。\",\"这么好用？不，它虽然优化了空间，但它也用掉了一部分的时间用来维护这个动态数组。不过总体上来说，这个动态数组还是很推荐学一学，用一用的。\",\"（有些人特别钟爱用 vector 存图，时间常数大的起飞，我不说是谁（︶^︶））\",\"接下来就大概的看一看实现的代码，相信加上注释和清晰的变量命名，你们应该能看懂。\",\"这次依旧没有经过检查，所以直接抄代码请你谨慎。\",\"#include <stdio.h> #include <stdlib.h> #include <string.h> // 建立一个行向量结构体，里面存三个指针 struct Vector { // 指向数组开头 int* begin; // 指向数组结尾 int* end; // 指向内存结尾 int* endOfStorage; }vec; // 初始化动态数组 void initialize() { vec.begin = vec.end = vec.endOfStorage = NULL; } // 删除这个动态数组，释放内存 void destroy() { free(vec.begin); } // 返回指向数组开头的指针 int* begin() { return vec.begin; } // 返回指向数组结尾的指针 int* end() { return vec.end; } // 返回当前数组大小 int size() { return vec.end - vec.begin; } // 返回当前数组容量 int capacity() { return vec.endOfStorage - vec.begin; } // 特别提醒，为了节约时间成本 // 每次扩容时会把容量多扩一些 // 因为每次扩容都需要重新申请一段内存，然后把原来的移过来 // 所以这里的容量和数组大小并不相同 // 将容量扩充至 n，如果当前容量不够需要重新申请内存 void reserve(int n) { if (n > capacity()) { int* tmp = malloc(n * sizeof(int)); int sz = size(); if (vec.begin) { for (int i = 0; i < sz; ++i) tmp[i] = vec.begin[i]; free(vec.begin); } vec.begin = tmp; vec.end = vec.begin + sz; vec.endOfStorage = vec.begin + n; } } // 改变数组长度至 n，其中未定义的数组元素会被赋值成 val void resize(int n, int val) { if (n > capacity()) reserve(n); for (int i = size(); i < n; ++i) vec.begin[i] = val; vec.end = vec.begin + n; } // 在数组尾部添加一个元素，值为 val void push_back(int val) { if (size() == capacity()) { int newcapacity = size() == 0 ? sizeof(int) : capacity() * 2; reserve(newcapacity); } *vec.end = val; ++vec.end; } void pop_back()// 在数组尾部删除一个元素 { if (size() > 0) --vec.end; } // 在数组的第 pos 位插入一个元素，值为val void insert(int pos, int val) { if (vec.end == vec.endOfStorage) reserve(size() + 1); for (int i = size(); i > pos; --i) *(vec.begin + i) = *(vec.begin + i - 1); *(vec.begin + pos) = val; ++vec.end; } // 删除数组的第 pos 位元素 void erase(int pos) { for (int i = size(); i > pos; --i) *(vec.begin + i - 1) = *(vec.begin + i); --vec.end; } // 获取数组的第 pos 位元素 int get(int pos) { return *(vec.begin + pos); } int main(int argc, char *argv[]) { initialize(); int x; scanf(\\\"%d\\\", &x); push_back(x); push_back(x); pop_back(); insert(0, 1); erase(0); destroy(); return 0; } \",\"注意\",\"在之后的 C++ 高级程序设计 课程作业中会出现这个数据结构！\",\"我警告过你了！\",\"题单链接：\",\"南哪2022-8-pointer EX 动态数组 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\",\"这次还是没有题目做……\"]},\"35\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"36\":{\"c\":[\"CPL\",\"DotOJ\"]},\"37\":{\"h\":\"南哪 2022-8-pointer\",\"t\":[\"这一章的内容实际上在题单《逃不掉的语法小技巧 指针》当中已经讲的差不多了，不过我们在这里还需要补充一些东西。\",\"在上一次介绍中我们在文末说到了这样一段话：\",\"顺带一提，我们知道数组的名字就是指向它第一个元素的指针，那么数组到底是什么意思呢？\",\"原来，数组后面方括号里面的数字实际上指的是相对于这个数组指针在内存上的偏移值，偏移 0 那就是第一个元素，偏移 1 那就是第二个元素，以此类推。\",\"由这句话我们知道了数组名字是个指针，而且它实际上指向了数组的第一个元素。\",\"我们都清楚这次的 OJ 十分的阴间，不允许使用 [] 来调用数组的某一位，甚至不让用 [] 开数组。\",\"这怎么能忍！这就告诉你们 dotOJ 究竟在搞什么花样！\",\"在第二题当中，我们需要开一个长度为 100000 的字符数组，我们就拿它来举例。\",\"首先，我们使用malloc来申请内存，具体如下：\",\"//别忘了包含stdlib.h char *s = (char *)malloc(100000 * sizeof(char)); \",\"申请完以后我们就可以使用s[i]来调用s数组的第i位了，但是显然题目不允许我们这样做，怎么办呢？\",\"我们注意到上面的malloc申请的实际上是一段连续的内存（不然没法调用数组的任意一个位置），所以我们可以尝试修改指针指向的地址来访问这个数组的任意一个位置。\",\"比如说我们想要输出这个字符数组：\",\"int len = strlen(s); for (int i = 0; i < len; ++i) putchar(*(s + i));//相当于s[i] putchar('\\\\n'); \",\"虽然这很好理解，但抛开好理解不谈，我们还是得好好理解为什么可以这样写（\",\"当然还有第一题我们需要提到的指针问题：\",\"既然存储数据都是 32 位，那么我们为什么不用不同的指针指向同一个 32 位呢？\",\"而且题目也解释的很清楚，一开始只是平平无奇的一个 int，你只需要一位一位读入二进制然后把它弄到一个 int 里面\",\"当然，实际上建议弄到 unsigned int 里面先搞，因为如果你没有学过之前学到的位运算，单纯用加法的话，int 的符号位可能会让你很头疼。\",\"当我们搞好这个 unsigned int 变量的值，我们用不同数据类型的指针指向这个变量（当然都需要是 32 位存储的变量）\",\"也就是分别用一个 int、一个 unsigned int、一个 float 指针指向这个 unsigned int 变量的存储位置，然后分别按要求输出就行了。\",\"这样做的原理是什么呢？\",\"因为内存总归是一位一位的，它很实在不会骗你，但是不同的变量类型理解内存上每一位的方式不一样，导致最终的结果就不一样。所以说，当我们用不同变量类型的指针指向同一个 32 位内存，它们理解内存的方式不同，导致你输出它们指向的变量的结果也就不同，这就是第一题想考察的地方。\",\"指针真的就没有了，如果想寻求些挑战，你可以去看看之后出来的指针EX。\",\"题单链接：\",\"南哪2022-8-pointer - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\",\"然而并没有题可以写（\"]},\"38\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"39\":{\"c\":[\"CPL\",\"DotOJ\"]},\"40\":{\"h\":\"某 CQ の奇妙冒险\",\"t\":[\"某CQの奇妙冒险 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"41\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"42\":{\"c\":[\"CPL\",\"DotOJ\"]},\"43\":{\"h\":\"逃不掉的语法小技巧 指针\",\"t\":[\"指针是 C 语言的核心技巧，通过指针，我们可以实现很多高级功能，比如动态内存分配、函数指针、回调函数等等。但是指针也是 C 语言中最容易出错的地方，因为指针的操作非常复杂，一不小心就会出错。本文将介绍一些指针的语法小技巧，帮助大家更好地理解和掌握指针。\",\"取地址：\",\"当我们想要获取某个变量的地址，首先找到这个变量的变量名，我们假设它是 a，如果你在这个变量名前面加上&（&a），那么恭喜你，你成功的取出了 a 这个变量的地址。\",\"特别地，如果是一个数组，那么它的数组名就是指向它第一个元素的地址，这也是为什么 scanf 数组的时候不要加 &\",\"存地址：\",\"现在你成功的取出了某个变量的地址（假设是一个int变量），你现在想把它存下来，以方便在其它函数里面找到这个变量，怎么办呢？\",\"你可以用 int *p；来新建一个指向 int 的指针变量。\",\"这里的 * 号指的是你告诉编译器你新建的变量是一个指针类型，这点要注意，因为一会这个符号还有另一个含义。\",\"提示\",\"我们建立的是指针变量，它本质上是一个存储地址的变量。\",\"用地址：\",\"我们现在得到了变量 a 的地址，并把它存在了 p1 这个指针变量里面。我们怎么来使用 p1 呢？\",\"这里我们又要用到 * 号\",\"当我们在定义过 p1 指针后再次使用 *p1，它的含义就发生了改变。\",\"这里的 *p1 指的是 p1 这个指针指向的变量，也就是说——\",\"*p1 实际上指的就是 a ，无论你在什么地方修改了它的值，a 的值也会随之发生改变。\",\"那么借助指针的这个性质，我们可以写一些更方便的函数来让我们的代码更加简洁。\",\"比如交换两个数，这个操作在某些问题中很常用，我相信大家都不想到处花上好几行的代码来实现它，那么我们可以这样写：\",\"void swap(int *a, int *b) { int t = *a; *a = *b; *b = t; } // 在main函数中↓ int a = 1, int b = 2; swap(&a, &b); // 结果：a = 2, b = 1 \",\"通过使用指针，我们可以利用这个swap函数来将某个和这个函数没有半毛钱关系的变量交换值。\",\"开一个指定大小的连续空间（以 Byte 为单位）：\",\"翻找 C Reference 我们可以找到 malloc 这个函数和 free 这个函数，这两种函数是我们经常可能要用到的。\",\"为什么要用 malloc 和 free 呢？\",\"我们知道，当你想根据输入的值来确定你的数组大小时，你必须得在确定了输入之后再新建数组，然而，这也意味着你的数组在新建时就受限于当前作用域，当这个函数结束，新建的数组就失效了。此时，如果你还在别处需要这个数组，你便没有办法再获得它了。\",\"所以，我们用 malloc 来向编译器申请一段内存空间，大小可以由你自己指定，它会将一段空间分配给你，并返回这段空间的首地址。这段空间来自堆空间，它不会受限于当前作用域，除非你在别处用 free 释放了它，否则它会一直存在。\",\"注意\",\"申请指针必须有始有终，否则会导致内存泄露（产生了大量的无效内存占用）！如果你发现你的程序越跑越慢，还关不掉，指不定就是内存泄露了！\",\"比如说，你想要申请一个 int 变量和一个大小为 n 的 int 数组，你可以这样写：\",\"int *p1 = (int *)malloc(sizeof(int)); int *p2 = (int *)malloc(sizeof(int) * n); \",\"注意，malloc 返回的是一个 void * 类型的指针，所以我们需要把它强制类型转换为 int * 类型的指针，否则编译器会报错。\",\"提示\",\"此时 p1 和 p2 的变量类型是一样的，但 p2 指向的是一段内存空间的首地址，你可以把它当作数组使用，但 p1，虽然你也可以把它当作只有一个元素的数组使用，但实际上和单个 int 变量的指针没有区别。\",\"当你使用完了之后，记得用 free 释放它：\",\"free(p1); free(p2); \",\"提示\",\"free 释放的是指针指向的内存空间，而不是指针本身！为了避免出现野指针，你一定要记得把指针空置！这是好习惯！\",\"p1 = NULL; p2 = NULL; \",\"顺带一提，我们知道数组的名字就是指向它第一个元素的指针，那么数组到底是什么意思呢？\",\"原来，数组后面方括号里面的数字实际上指的是相对于这个数组指针在内存上的偏移值，偏移0那就是第一个元素，偏移1那就是第二个元素，以此类推。\",\"也就是说，下面 if 中等号两侧这两种表达是等价的：\",\"int *p = malloc(sizeof(int) * n); if (*(p + 2) == p[2]) { // do something } \",\"题单链接（但是没有题）：逃不掉的语法小技巧 指针 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)\"]},\"44\":{\"c\":[\"CPL DotOJ 补完计划\"]},\"45\":{\"c\":[\"CPL\",\"DotOJ\"]},\"46\":{\"h\":\"关于 CRLF 和 LF\",\"t\":[\"大家可能在做 CQ's Challenge 的时候发现利用 getchar() 读掉换行符的方式（这在平时 OJ 上都是非常有效的）出现了意想不到的问题，样例在本地跑的是对的，但是交上去就不大对劲，这到底是什么情况？\",\"是这样的，某 CQ 在 Windows 下出题，一开始并没有考虑到这个问题，所以使用了自己用 C++ 编写的随机数程序，并直接在 Windows 平台的环境下自动生成数据。\",\"那在 Windows 平台下生成数据会有什么区别呢？\",\"是这样的，Windows 下的换行符和 Linux 下的换行符实际上并不一样，Linux 下的换行符是 LF，也就是大家平时碰到的，行末有一个换行符 \\\\n 来表示换行，但是 Windows 下就不一样了，它实际上是 CRLF，也即用 \\\\r\\\\n 来表示换行，所以当你发现你的 getchar 不好用了，实际上也许就是 CRLF 在捣鬼。\",\"虽然说 OJ 数据按照标准应当是统一使用 LF 换行的，大大地提高了各位的做题体验，但是大部分情况下，我们并无法确定出题人用的是 CRLF 还是 LF，所以还是需要一种更稳妥的读入数据的方式，来帮助我们绕过这个 CRLF 和 LF 的问题。\",\"解决这个问题的方法一般有两种：\",\"1.老老实实使用 scanf 进行读入数据\",\"我们都非常清楚（应该？），scanf 读入数据的时候，除了读入单个字符（%c），其它情况下，scanf 都会自动跳过空白符和一些无关的特殊字符，甚至你还可以利用 scanf 来指定输入的格式（如果你会用正则表达式的话），也就是说，当输入数据一切正常的时候，直接使用 scanf，而不去在意输入格式的具体情况，是一种非常好的做法。\",\"2.继续使用 getchar()，但用另一种方式\",\"scanf 比 getchar 要智能的多，但是这种智能，是用时间来换的，也就是说，读入同样多的数据量，scanf 读入的速度，比 getchar 要慢不少，这么强大的工具，怎么会随手把它丢掉。\",\"那用 getchar 如何绕过这些问题呢？ 答案是：用 while，直到读入到自己需要的数据。\",\"这里举个例子可能会更清楚一点。\",\"scanf读入整数好慢好慢（当然printf也有点点慢，不过还好），如果你做过 CQ's Challenge C题的早期版本，你就会发现用 scanf 是无法通过的，只能拿到 80 分，那我们可以利用 getchar 来优化整数的读入过程：\",\"#define isdigit(ch) (ch >= '0' && ch <= '9') // isdigit()实际上在ctype.h当中有定义，这里假定你没有引用 void readInt(int* n) { *n = 0; // 用来表示这个数字是正数还是负数 int sign = 1; char ch = getchar(); // 直到读到我们需要的数字 while(!isdigit(ch)) { ch = getchar(); // 有负号，是负数，在数据都是非负整数的情况下甚至可以舍去这条判断。 if (ch == '-') { sign = -1; } } // 是数字，连续读入（因为是一个完整的数字），直到读到非数字（标志结束） while (isdigit(ch)) { // 因为上面已经读到一个了，所以我们先把它处理了 *n = ((*n) << 3) + ((*n) << 1) + ch - '0'; // 这里的((*n) << 3) + ((*n) << 1)实际上就是 (*n) * 10 的意思，只不过位运算和加法都比乘法快 // 想一想为什么是这个式子 ch = getchar(); } *n = (*n) * sign; // 处理符号问题 } // 具体使用： int n; readInt(&n); \",\"利用这种写法我们就获得了一种读入整数的更快的方式，你看到我们是怎样绕过 LF 和 CRLF 的问题的了吗？\",\"实际上这种绕过方式的精髓在于，我们不是碰到无关的就跳过，而是不断读入直到读入到我们需要的东西再进行处理，这样在读入的过程中就自然而然地略过了无关的字符，达成了目标。\",\"用 CRLF 出题，我真的错了！特以此篇，以表歉意 OTZ\"]},\"47\":{\"c\":[\"C 语言学习分享\"]},\"48\":{\"c\":[\"CPL\"]},\"49\":{\"h\":\"小游戏项目不知道怎么写？我来助你！\",\"t\":[\"还在为不知道怎么写CPL课程的小游戏项目而烦恼吗？\",\"那可真是太巧了！我这恰好一不小心花了点时间写了一个小项目：\",\"你猜怎么着！恰好完成了其中一道期末项目的要求！\",\"我将代码都留了下来，并且编写了一段较为详尽的教程来告诉你我是怎么写出这个项目的。\",\"我把项目放在 GitHub 这里了！要是真的不知道大项目该怎么写，那你也来看看吧！\",\"别忘了给我点颗星~o((>ω< ))o\",\"（特别提醒：可以参考我的代码，学习我的一些做法，但是不能直接抄袭，这是对课程、老师和其它同学的不尊重！，如若抄袭并不幸被查重，后果自负）\"]},\"50\":{\"c\":[\"C 语言学习分享\"]},\"51\":{\"c\":[\"CPL\"]},\"52\":{\"h\":\"随机数据生成 & 正确性验证\",\"t\":[\"某 CQ 今天发现有不少同学会在群里面求某道题的测试数据来验证自己程序的正确性。\",\"每个人程序的做法是不同的，错误也很可能出在五花八门的地方，也就是说，同样的数据，别人是对的你不一定对，别人是错的你也不一定就是错的。\",\"经常在群里求数据解决问题是不可取的，首先没有那么多的测试数据来给，其次也并不知道你错在哪里，不能给出更有针对性的数据。\",\"那么我们怎么能更高效的获得可能使你程序出错的数据呢？某 CQ 就在这里给大家介绍介绍：\",\"首先我们需要自己写个程序来生成随机的测试数据：\",\"C 语言怎么写随机数呢？直接上代码你就懂了！\",\"#include<stdio.h> #include<stdlib.h> int random(int l, int r) { return rand() % (r - l + 1) + l; } int main() { srand(time(0)); int a = random(1, 10000), b = random(1, 10000); printf(\\\"%d %d\\\\n\\\", a, b); return 0; } \",\"这样就写好了一个生成 A+B Problem 的数据的随机数程序。\",\"我们来具体解析几个陌生的东西。这些东西都在 stdlib.h 里：\",\"time(0) 指获取当前系统时间，它会动态返回一个不同的 int 值。\",\"srand() 指的是设置随机数种子，当你将系统时间设置为随机数种子的时候，这样种子就会在不断的变化，在这里提一嘴，同样的种子出来的随机数是不会变的，内部的计算原理某 CQ 并不清楚。\",\"而 rand() 就是取一个范围是 1 到 65535 的随机整数值，在这里我们假定数据范围是 1 到 10000 ，所以我们自己写了一个 random 函数用来生成 l 到 r 范围内的随机数，其中用取模来限制 rand() 的值的范围。\",\"这里要特别注意，如果需要更大的数据，你可以将多个 rand() 相乘，但是请注意范围可能会超过 int，必要时记得开 long long。\",\"学会了生成随机数，我们就可以根据不同题目的输入要求来构造大量的随机数据啦！（因为每次跑代码所得到的结果都不一样）\",\"数据有了，那我用我自己的程序跑出结果我也不知道对不对啊？而且这样手动生成数据，也太麻烦了吧，效率太低，而且找到我想要的数据就算运气好也要花不少时间，这可怎么办呢？\",\"接下来就轮到我们的对拍上场辣！\",\"首先我们需要一个保证正确的代码生成的可执行文件用来作为标准输出正确答案，当某 CQ 发出这个帖子之后，他会在频道当中新开一个分区用来放近期题库正确可执行文件的下载链接，各位可以自行去下载。\",\"接下来我们假设： 接下来所有的文件都在同一个文件夹里 你的程序生成的可执行文件叫 code.exe 你的随机数程序生成的可执行文件叫 rand.exe 完全正确的程序生成的可执行文件叫 std.exe\",\"新建一个文件 check.bat（注意后缀名），填入以下代码：\",\"@echo off :loop rand.exe > data.in std.exe < data.in > std.out code.exe < data.in > code.out fc std.out code.out if not errorlevel 1 goto loop pause goto loop \",\"接下来我们来具体解释这些批处理命令：\",\"@echooff：关闭输入显示（否则刷屏警告）:loop：goto 嘛，洒洒水啦~>：将输出内容附到指定文件上<：将内容输入到程序中运行 两者可以按照逻辑顺序连用fc：(file compare)是 windows 的指令，它会比较两个文件之间有什么区别，并且输出结果if not errorlevel 1 goto loop：if 大家都很熟，这个 errorlevel 指的就是 fc 的程序返回值，如果是 1，那么这两个文件之间并没有差异，我们就直接 goto loop 生成之后的数据，如果不是 1，那么说明有问题，就停下来让你去 data.in 里面看是什么数据，然后当你按下任意按钮以后它会继续生成新数据。\",\"这里要注意的是，fc对文件的判断要求可能比oj要求更高，行末的空格最好别有（\",\"这样就造出了一个全自动的判别机，你可以开着这个程序来自动找到使你程序出错的针对性数据（虽然运气不好的话可能还是要跑很久）\",\"提示\",\"如果你正在使用你是 Linux，说明你是操作系统大神，这里就不介绍 Linux 下怎么写对拍了，和 Windows 下实际上是一样的，只是命令不同而已。\"]},\"53\":{\"c\":[\"C 语言学习分享\"]},\"54\":{\"c\":[\"CPL\"]},\"55\":{\"h\":\"控制时空复杂度：和超时爆空间说拜拜\",\"t\":[\"随着题目难度的增大，某 CQ 发现开始有越来越多的同学对空间超限以及时间超限发出了疑问。\",\"某 CQ 十分的奇怪：明明题目的时空限制放的都很宽啊，怎么会出现超时超空间的问题呢？\",\"一问发现有些同学的算法不是很好，导致在一些数据范围比较大的题目当中甚至出现了三重循环，这你不超时谁超时？如果看上去并不会超但是却时间超限了，那往往是死循环导致的。\",\"那么我们到底该怎么样控制我们程序的时空复杂度呢？\",\"其实十分的简单！下面就来大致的讲一讲罢！\",\"时间复杂度：\",\"这个时候你可以盯着题目给定的数据范围看，看看 n 的最大可以到多少，还有一些其它的数据范围，当你想好你将会怎么来做这道题之后，你就可以通过这些东西来计算自己应该用哪种数据类型（int -> long long）\",\"然后，最重要的来了！\",\"你盯着数据范围看，看够了再盯着自己循环次数最多的那个地方看（一次递归也算作一次循环），按照最大的数据范围计算出在最坏的情况下，你这里的循环要进行多少次，去掉一些没必要的常数，然后以 1亿 为准，在 1亿 左右或者小于 1亿 的循环次数，那你完全不用担心超时（正常机子 1亿 次循环次数大概刚好不过1s的时间限制，不过oj的机子貌似比较好，稍微超一点点也不大要紧，但不要太多）\",\"另外一种可能导致时间超限的原因可能是无限递归或者死循环，这个时候你需要检查你所有的while循环有没有出现恒为真的情况、递归的终止条件有没有写完整（以及剪枝是否到位，有时剪枝是优化时间的很关键的一步）、还有for循环有没有写成别的奇怪的东西（例如：for (int j = 1; i <= n; ++j)），解决这些问题估计死循环也很难存在了\",\"举个例子：n的数据范围是1到100000，你要对这个数据进行归并排序。\",\"那么你会发现，首先你会需要循环n次来读入，但实际上这个不是最要紧的，最要紧的是排序的过程，你会发现，当你每次将某一个序列分割的时候，实际上你合并的时候需要将这两半序列都过一遍，也就是说你每次将序列分成两半，你都需要进行 n 次循环次数，而将一个长度为n的序列分割至最小需要 log2​n 次所以这个程序实际上需要约 nlog2​n 次的循环次数，这就是归并排序在时间上的复杂度，算算超过了 1亿 吗？并没有，所以这个数据范围，归并排序是可以过的。但是冒泡排序和插入排序它们就不太好过了，你会发现它们在时间上的复杂度都是n²，远远超过了1亿（1e10），这就过不去时间限制了。\",\"空间复杂度：\",\"这东西不要太简单，如果你空间超限，那么恭喜你犯了除编译错误以外第二傻的问题（说的严重点），因为这东西真的太好算辣！\",\"sizeof(x) 可以算出 x 这个变量/数组/指针等任意东西所占用的内存大小，是按照字节来计算的，比如说 int 占 4 个字节，char 占 1 个字节。\",\"仔细观察每道题的标题，你会发现一个叫做空间限制的东西。\",\"你再仔细看你会发现它大概是 256 MB，那我们就以 256 MB 为标准来提一提，比如说你开了一些数组，假设现在有 a、b、c 三个数组，你想知道它们占了多少空间，那你可以尝试输出 (sizeof(a) + sizeof(b) + sizeof(c)) / 1024 / 1024，如果它大于等于 256，那你肯定就寄了。\",\"当然，你也可以借助空间限制来完成一些本来不可能的操作：\",\"比如，内存分配器这道题，题目要求明显是要你用链表来动态分配内存，因为它并没有明确告诉你到底要用多大的数组才够用，如果你想使用静态数组，你就一定得知道该用多大，而借助空间限制我们可以了解到：题目要求你用这么多内存来解决问题，那它肯定不会让你的空间超过这个限制，也就是说，你只要尽可能顶着空间限制开，那肯定没问题。\",\"观察题目我们知道需要开两个 int 数组，当然还要算上其它的一些变量函数啥的也会占内存，我们可以分出大概 200 多 MB 给这两个数组，那也就是每个数组有 100 MB 可以开，我们知道一个 int 占 4 个字节，1024 个字节是 1 KB，1024 KB 是 1 MB，所以我们的数组长度可以开到 100∗1024∗1024/4=26214400 个，经过测试的确是可以过的，所以，当我们的做法受到限制的时候，我们甚至可以利用空间限制来另辟蹊径，找到一种更容易写出的解决方案。\",\"看完这个，再去看两道题实战演练一下，相信你们再也不会在群里问超时怎么办，超空间怎么办这一类的问题了吧？\"]},\"56\":{\"c\":[\"C 语言学习分享\"]},\"57\":{\"c\":[\"CPL\"]},\"58\":{\"h\":\"XMake，你的 SDL2 项目打包好帮手\",\"t\":[\"XMake 是由国人开发的基于 Lua 的 C/C++ 构建系统，支持多重编译器和平台，利用 Lua 轻量、简洁、灵活、跨平台等特性，带来不一样的构建体验。\",\"请注意：不建议使用除 vscode 以外的编辑器使用 XMake 编写项目，这些编辑器有 XMake 插件但并不好用，没有办法提供合适的 include 解析，导致编写代码十分的困难，好在我们现在仅仅是借助 XMake 来帮助我们打包项目，在这里我们以 SDL2 为例，但 XMake 不仅限于此，它有十分充足的仓库，你几乎能在里面找到所有你想要使用的 C/C++ 库。\",\"安装\",\"安装指示在官方页面上写的非常清楚，就不在这里多写了\",\"镜像加速\",\"XMake 的 C/C++ 包都在 GitHub 上，访问速度很慢，甚至在一定程度上使用了魔法的情况下还会出现下载失败的情况，十分影响使用体验，因此十分有必要借助 github 镜像加速这个过程，在命令行中运行以下命令来使用 xmake 内部提供的镜像：\",\"xmake g --proxy_pac=github_mirror.lua \",\"工具链\",\"XMake支持几乎所有常见的工具链，XMake 也会在你的环境中探测使用它认为最合适的工具链，特别地，Windows 下建议使用 MSVC 构建工具链，它最稳定。\",\"XMake，启动！\",\"所有的前置步骤已经完成，下面就可以来开始打包项目了！我们以 SDLTest 项目名为例，来创建并编译一个新的SDL2项目吧！ 首先在指定的文件夹路径下使用 xmake 命令创建一个名为 SDLTest 的新项目：\",\"xmake create SDLTest \",\"它会在当前路径下创建一个名为 SDLTest 的文件夹，并在该文件夹中生成以下目录结构：\",\"其中 src/ 文件夹是存放项目代码的位置，.gitignore 文件与 git 有关，在此不多说，而 xmake.lua 文件便是这个 xmake 项目的配置文件，它的默认内容如下：\",\"你会发现，事实上我们还并没有将 SDL2 添加到我们的配置文件中作为编译内容的一部分，这一步其实很容易，我们只需要在仓库中找到对应的库名，并像这样添加到配置当中即可：\",\"保存！在 SDLTest/ 文件夹路径的命令行中输入：\",\"xmake\",\"即可启动编译！此时，xmake 会自动检查平台、工具链和需要安装的内容，并询问是否需要安装：\",\"输入 y 并回车，xmake 便会使用指定的工具链编译对应的库并安装到全局（xmake的安装位置）。\",\"此时，我们已经准备好编译运行我们的 SDL2 程序了！ 我在 Gitee 上随便找了一个 SDL2 编写的 tetris项目，并将代码拷贝到了 src 文件夹，并且这些文件正好适合 xmake.lua 的 add_files 命令\",\"那么，编译，启动！\",\"xmake xmake run \",\"使用 xmake 编译的项目也不需要考虑动态链接库的问题， xmake 考虑到了这一点，它将链接库也一起带了进去，让可执行文件点开即玩，非常顺畅！\",\"vscode includePath 配置（可选）\",\"虽然 xmake 官网上提供了详尽的解决方案，但是实际用起来效果并不尽如人意，相信使用 vscode 的大部分同学都使用了 C/C++ 插件吧？ Ctrl + Shift + P运行C/C++ 编辑配置：UI命令，并编辑includePath，添加 xmake 的安装路径/packages/////include ，然后再去看你的代码，就会发现 include 解析成功啦\"]},\"59\":{\"c\":[\"C 语言学习分享\"]},\"60\":{\"c\":[\"CPL\"]},\"61\":{\"h\":\"1. SFML 简介和环境配置\",\"t\":[\"又到了和 SDL 一样痛苦的配环境环节！\",\"SFML (Simple and Fast Multimedia Library) 是一款非常好用的图形界面库，你用得到的功能（包括网络），它基本上都考虑到了。而且它具有非常良好的跨平台能力，它在各大平台上都能顺利地运行，且能够完美地适配不同的屏幕分辨率和尺寸，能让你获得最舒适的游戏体验。\",\"（所以为什么不用 Godot Engine 或者 Cocos2D 之类的呢？）\",\"我可不管，我就想用这个。\",\"另外学这个得先会点 C++。\",\"环境配置：\",\"MacOS：\",\"没用过，我不知道，我不会。\",\"Linux（Ubuntu为例）：\",\"这还用配环境？打开你的命令行\",\"sudo apt install libsfml-dev \",\"完成了，用 vscode 或者 clion 都行，只需要配置好编译命令或者 CmakeLists.txt 就行了\",\"提示\",\"也可以使用 xmake，用起来爽到高超！\",\"Windows： 把 sfml 包下下来，照着 SDL 类似的方法配置吧\",\"SFML 官网：https://sfml-dev.org\"]},\"62\":{\"c\":[\"C++ SFML\"]},\"63\":{\"c\":[\"C++\",\"SFML\"]},\"64\":{\"h\":\"2. 基础又经典的游戏结构理解\",\"t\":[\"搭配上SFML的内容，我们先写出类似学习SDL时的游戏结构：\",\"这件事做起来很轻松，不是吗？\",\"但是，这并不是很好看。我们为什么不把它重新包装一下，让它更好理解呢？这样如何？\",\"我们尽量把这些过程都拆开，分而治之，不然到时候很有可能搞不清自己到底在做什么。\",\"具体的函数实现就不放在这了，你自己心里面应该有数。\",\"这只是第一步，但是已经能足够我们写一些简单的东西了。\",\"在这之后我们将造出一系列轮子，最后再将他们拼接到一起，构建出我们想要的，更方便的游戏结构。\"]},\"65\":{\"c\":[\"C++ SFML\"]},\"66\":{\"c\":[\"C++\",\"SFML\"]},\"67\":{\"h\":\"3. 更轻松地存取文件，并尽可能阻止内存泄露\",\"t\":[\"把文件一个一个声明并且读入固然十分有效，但是太麻烦了，根本不好用。\",\"所以为什么我们不自己写一个类，让他来控制所有文件的存取呢？我们可以给每一个加载的内容都带上一个特殊的id，想要的时候再通过id把它取出来，这样既能保证文件只被加载一次，同时也能让存取的步骤更加的简单：\",\"load函数的实现：\",\"get函数的实现：\",\"为什么要准备两种load：\",\"用于视觉特效的sf::Shader的加载方式为：\",\"可以看到它在加载的过程中需要不止一个参数，所以再准备一个load以备不时之需。\",\"不支持的类型？： 由于sf::Music打开方式的特殊性（这里暂且不提），它的加载函数为openFromFile(path)而不是loadFromFile(path)。所以无法在这里加载，不过我们也并不会在ResourceHolder里面加载这种文件，我们显然需要一个单独的东西来处理游戏音乐和音效的。\"]},\"68\":{\"c\":[\"C++ SFML\"]},\"69\":{\"c\":[\"C++\",\"SFML\"]},\"70\":{\"h\":\"(4.5). 再看一眼 4 里面遗漏的东西\",\"t\":[\"有的时候我们还是需要获取某个东西的绝对位置，以方便我们进行碰撞检测等操作，所以，我们需要根据4中的树形编排方式再实现一点点东西：\",\"这样我们就也可以很轻松地借助相对位置得到绝对位置了。\"]},\"71\":{\"c\":[\"C++ SFML\"]},\"72\":{\"c\":[\"C++\",\"SFML\"]},\"73\":{\"h\":\"4. 更好的画面编排方式！\",\"t\":[\"在游戏中我们时常能见到某个实体围绕另一个实体做运动，它实际上是以这个被围绕的实体为参照的相对位置，如果直接使用绝对位置来计算固然可以，但是十分麻烦。比如某游戏中主角有一个闪电球始终环绕着旋转，这时我们既要考虑主角的运动情况，还要考虑到球绕着主角的旋转情况，计算起来非常地繁琐。\",\"又没有更好的方法可以解决这个问题呢？\",\"我们可以用“树”的结构来解决这个问题，依照上文的例子，我们把闪电球作为子节点连接到主角上，这时，我们便只需要考虑球的旋转就行，其他的位置已经由主角决定好，就相当于，坐标的变换从父节点到子节点一路叠Buff，用这种结构，我们甚至能为这个闪电球再添加围绕它的别的什么球。\",\"每个节点的性质需要能被绘制、能做坐标系上的变换，不能被随便拷贝（防止内存泄漏），所以最后得出的结构是这样的：\",\"实现：\",\"顺便，我们借着SceneNode顺便实现一下实体类（Entity），它只需要负责所有实体都会做的事情：运动。\",\"具体实现非常弱智，就不放了。\"]},\"74\":{\"c\":[\"C++ SFML\"]},\"75\":{\"c\":[\"C++\",\"SFML\"]},\"76\":{\"h\":\"5. 指令系统，不算高效但是更方便的游戏更新策略\",\"t\":[\"在游戏每帧的更新过程中对所有不同类型的实体，还有背景、GUI等进行更新是在是太麻烦了，而且，除了之前写好的SceneNode之外，你还需要东西来分类存储他们。 那太麻烦了，不好用，又没有更简单的？\",\"我们引入指令系统，将指令传入整棵树，让它自行选取符合条件的实体进行更新。每帧我们根据用户的输入情况以及游戏的整体情况决定需要进行哪些更新，然后往里面扔就完事了！\",\"这几样东西一摆，不说也应该知道干啥了吧？\"]},\"77\":{\"c\":[\"C++ SFML\"]},\"78\":{\"c\":[\"C++\",\"SFML\"]},\"79\":{\"h\":\"6. StateStack，游戏场景随便 push！\",\"t\":[\"我们都知道，我们游戏的场景之间的切换，都是依靠一个栈来实现。一个很简单的例子，当你启动游戏的时候，将标题画面的内容压入一个栈，当你选择开始游玩，将游戏的内容继续压入，当你结束游戏，游戏内容从栈中弹出，这时你又会重新看到原来的那个标题画面，我们想要达成这个简单的压入弹出。\",\"那想法就很简单了，写一个栈！然后把各种界面都整成同一种通用类型的子类往里面压入不就完事了？行，开写。\",\"StateStack 类：\",\"还有 State 类：\",\"照着写就完事了。\",\"不过有需要注意的一点：\",\"当游戏画面渲染的时候，我们有时想要让下层的界面也要显示出来，比如游戏暂停的时候，我们只是想不允许下一层内容更新，但是在画面上我们仍想要看到下一层内容，因为我们想要的暂停效果只不过是给画面蒙上一层灰色透明的长方形，然后在正当中贴上一个 PAUSE 而已。\",\"这时候 State 里面 update 和 handleEvent 以及 isLowerStateVisible 返回的 bool 内容就能派上用场了：\",\"draw 确实比较麻烦，因为它需要从下往上画，我们得先清楚我们要从哪里开始画：\"]},\"80\":{\"c\":[\"C++ SFML\"]},\"81\":{\"c\":[\"C++\",\"SFML\"]},\"82\":{\"h\":\"7. 音乐播放器，轻松拿捏游戏音乐和音效\",\"t\":[\"为了让我们能够很轻松地用简单的几句话控制音乐的播放、音量还有暂停，以及游戏音效的随意施放，我们有必要写两个类来分别处理音乐和音效：\",\"先给自己准备好的每一个音乐都准备好独特的id，在这里我们实际上还没有准备任何的音乐，所以我们这里只放上一个MusicCount用来占位。\",\"然后就是MusicPlayer类：\",\"在这里需要注意的是，音乐和其它文件是不一样的，音乐文件一般比较大，因为音乐很长，所以SFML的打开方式并不是像其他类型的文件一样，而是根据音乐播放的进度选取文件当中的某一段读入，在之后销毁掉换成另一段，也就是说这个音乐播放时需要保证文件一直能够访问到。\",\"此外是SoundPlayer：\",\"同理先记id\",\"在这里特别需要注意的是，游戏音效往往是有位置的，不仅仅是 3D 游戏会有声音随着位置改变，2D 游戏也是一样。一种理解是根据主角位置的不同将其他物体发出的声音按照方向环绕在玩家耳边，另一种理解是玩家坐在电脑面前，相当于在一张二维平面图上方一定距离处，在这个平面上不同位置发出的声音，玩家听到的感觉肯定也不一样。\",\"所以在写 SoundPlayer 的时候要特别注意这点。\",\"SFML Game Development 这本书为我们提供了非常合适的常量，我们直接用上：\",\"然后在播放的时候指定播放的位置。\",\"别忘了每次更新的时候要把已经播放完的音效清除。 这样就完成了对音乐和音效的播放的类的编写。\"]},\"83\":{\"c\":[\"C++ SFML\"]},\"84\":{\"c\":[\"C++\",\"SFML\"]},\"85\":{\"h\":\"CPL 引言 / 环境配置\",\"t\":[\"提示\",\"这是 CPL DotOJ 补完计划的重制版，目的是更系统、更精确地从零开始介绍 C 语言\",\"如果你更喜欢老版本的青涩风格，也可以前往阅读 老版本\",\"引言其实没啥好说的，你不会以为我要讲一讲 C 语言的历史吧？\",\"好吧，那就大概说一下（摘自 菜鸟教程）：\",\"C 语言是一种通用的、面向过程式的计算机程序设计语言。1972 年，为了移植与开发 UNIX 操作系统，丹尼斯·里奇在贝尔电话实验室设计开发了 C 语言。\",\"C 语言是一种广泛使用的计算机语言，它与 Java 编程语言一样普及，二者在现代软件程序员之间都得到广泛使用。\",\"那我们要在引言当中干的事其实是先把编程环境配一下\",\"注意\",\"最好保证你的用户名是纯英文不带空格的，否则可能会因为路径不能被命令行正确识别导致一些奇怪的问题！我警告过你了！\",\"首先是大名鼎鼎的代码编辑器 vscode，功能很强，插件生态也很完整，非常推荐！\",\"只需要去 vscode 官网 下载对应机器的安装包，自行安装即可\",\"提示\",\"为了保证代码编写的体验，建议安装以下插件：\",\"C/C++ 语法高亮 \",\"C/C++\",\"C/C++ Extension Pack\",\"C/C++ Themes\",\"代码运行 \",\"Code Runner\",\"代码格式化 \",\"Prettier - Code formatter\",\"界面主题 \",\"Catppuccin for VSCode（这个主题颜色很好看，而且支持生态非常好，真的推荐）\",\"Material Icon Theme（更好看的文件图标）\",\"如果你会使用 Linux，那你大概也不太需要学习如何配置 C 语言的环境，所以我们主要来讲一下 Windows 和 MacOS 的配置\"]},\"86\":{\"h\":\"Windows\",\"t\":[\"提示\",\"在这里我们只说最简单的方法，只需要使用 winget 命令安装即可，这意味着你的 Windows 版本需要 >= 10\",\"如果你没有 winget，那你只能用老办法，从 Winlibs下载对应最新版本的 MinGW，然后将 bin 目录添加到环境变量 PATH 中\",\"具体步骤可以在网络中搜到，这里就不赘述了\",\"注意\",\"如果你的 winget 卡的一批，那你大概需要更换镜像源，可以前往 高校联合镜像站 - WinGet 软件仓库索引镜像使用帮助 查看具体的配置方法\",\"如何打开管理员权限的命令行？\",\"在搜索栏中搜索 Windows Powershell，然后右键点击，选择 以管理员身份运行 即可\",\"怎么找到我可能想安装的包？\",\"在 Powershell 中使用 winget 搜索即可，例如 winget search gcc，它会将包含该内容的匹配全部列出来\",\"怎么安装？\",\"如果你已经搜索过，你会发现列出的匹配中有 ID 那一列，那就是对应的包名，使用\",\"winget install <ID> \",\"即可安装\",\"装在哪了？\",\"winget 会默认将软件安装在 C 盘的某个角落，如果你分盘了，那么你的 C 盘的空间可能显得有点小了\",\"那你可以在安装时指定安装路径，例如\",\"winget install <ID> --location \\\"D:\\\\software\\\" \",\"还有一个小技巧，打开文件资源管理器，在左侧选择 文档 - 属性 - 位置 可以将文档的存储路径换到别处哦，对于其它同类文件夹也是一样，这样 C 盘空间就省出来了！\",\"对于 Windows，我们直接使用 winget 安装，在 Windows Powershell 中输入以下命令：\",\"winget install MartinStorsjo.LLVM-MinGW.UCRT \",\"回车运行后，等待安装完成即可\",\"如何确认安装？\",\"（安装后需重启命令行）在命令行中输入 gcc 并回车\",\"如果安装正确，你应当会看到下面的内容：\",\"gcc.exe: fatal error: no input files compilation terminated. \"]},\"87\":{\"h\":\"MacOS\",\"t\":[\"对于 MacOS，我们需要使用 Homebrew 来安装\",\"提示\",\"如何安装 Homebrew？\",\"我们也能参照 高校联合镜像站 - NJU Homebrew 镜像使用帮助 来从镜像源安装和替换 Homebrew 的软件仓库\",\"或者，你都用 Mac 了，你也许有熟练的手段能快速访问国际上的网络？\",\"高校联合镜像站的文档非常详细，我们在这里就不说如何安装 Homebrew 了\",\"那么安装起来也非常简单，在 Terminal 中输入以下命令：\",\"brew install gcc \",\"回车运行后，等待安装完成即可\",\"如何确认安装？\",\"（安装后需重启命令行）在命令行中输入 gcc 并回车\",\"如果安装正确，你应当会看到下面的内容：\",\"gcc: fatal error: no input files compilation terminated. \"]},\"88\":{\"c\":[\"CPL\"]},\"89\":{\"c\":[\"C Programming Language\"]},\"90\":{\"h\":\"1. 最初的起点\"},\"91\":{\"h\":\"C Programming Language\",\"t\":[\"C 语言是自然语言，这意味着编写的时候，我们能像说话一样很清晰地表达自己的意思，例如：\",\"#include <stdio.h> int main() { printf(\\\"Hello, world!\\\"); return 0; } \",\"我们先不管这段代码的语法结构等，我们能够很轻松地看懂，它是在屏幕上输出 \\\"Hello, world!\\\" 这句话，然后程序结束。\",\"那我们现在来分别介绍一下每句话做了什么：\",\"#include <stdio.h> \",\"C 语言是一款非常自然的语言，对吧？我们在说话的时候，也会用到 “像我之前提到的” 这种表达方式，那么在 C 语言中，#include 就是用来做类似的事情的\",\"当我们使用 #include 并在后面的尖括号里附带一个文件名的时候，C 语言会自动去寻找这个文件，并将这个文件的内容插入到当前文件中，就像我们之前提到的 “像我之前提到的” 一样\",\"那么 #include <stdio.h> 就是在说：“我要引入一个叫做 stdio.h 的文件，这个文件里有一些我需要用到的函数和变量，你帮我插入到当前文件中吧”\",\"提示\",\"#include 后面可以跟两种文件，一种是尖括号里的，一种是双引号里的，这两种文件的区别在于，尖括号里的文件，C 语言编译器会在 C 语言标准库中寻找，而双引号文件，C 语言编译器会从当前文件所在的目录中开始寻找\",\"int main() { } \",\"在高中，我们学过 函数 的概念，对吧？函数 在我们的印象里，是不是一个计算结果的式子？\",\"例如：y = kx + b？\",\"这里的 函数 同样是这个概念，不过它的含义更加拓展了，我们可以指定这个函数的结果格式，也可以指定这个函数需要有多少个输入参数，参数指的是函数中的自变量，例如 f(x) 中的 x\",\"在 C 语言的函数中，我们在大括号中指定一系列函数的操作步骤，在函数被调用的时候，这些操作步骤会被依次执行，最后返回由这些操作计算得出的指定格式的结果\",\"而 main 在这里又是一种特殊的函数，C 语言认识这个函数，并且会将它作为整个程序的入口，也就是说，当我们运行一个 C 语言程序的时候，C 语言会首先执行 main 函数中的操作步骤\",\"printf(\\\"Hello, world!\\\"); \",\"printf 是 C 语言标准库中的一个函数，它的作用是将后面的字符串输出到屏幕上，例如 printf(\\\"Hello, world!\\\"); 就会在屏幕上输出 Hello, world! 这句话\",\"当然，它还有不少进阶用法，这个我们在之后会用到\",\"return 0; \",\"return 是 C 语言中的一个关键字，它的作用是使函数返回，后面的返回值是可以自行指定的，在这里，main 函数返回了 0 这个整数，而数字 0 代表这个程序顺利退出\",\"函数的返回，代表着这个函数已经得到了结果，那么在返回之后剩余的所有步骤都不会再被执行，也就是说，return 0; 后面的所有代码都不会被执行\",\"提示\"]},\"92\":{\"h\":\"在你的代码中使用注释！\",\"t\":[\"注释是 C 语言中的一种特殊语法，它的作用是让代码更加易读，例如：\",\"#include <stdio.h> int main() { printf(\\\"Hello, world!\\\"); // 这句话会在屏幕上输出 \\\"Hello, world!\\\" return 0; } \",\"在 C 语言中，注释有两种形式，一种是单行注释，一种是多行注释，单行注释以 // 开头，多行注释以 /* 开头，以 */ 结尾\",\"提示\"]},\"93\":{\"h\":\"在你的代码中使用缩进！\",\"t\":[\"缩进是 C 语言编写的村规之一，它的作用是让代码更加易读，例如：\",\"#include <stdio.h> int main() { printf(\\\"Hello, world!\\\"); return 0; } \",\"其中，你会发现 main 函数中的代码都被缩进了一层，这是因为 main 函数中的代码是 main 函数的操作步骤，而 main 函数的操作步骤是 main 函数的子步骤，所以我们需要将它们缩进一层，以表示它们是 main 函数的子步骤\",\"而如果是 main 函数中的代码还有子步骤，那么我们就需要将它们再缩进一层，以此类推\"]},\"94\":{\"h\":\"C Compiler\",\"t\":[\"那么，代码已经写好了，可执行文件去哪里领？\",\"这就要说到我们的 编译器 了，编译器的作用就是将我们写好的代码，转换成计算机能够理解的机器语言，也就是一个可执行文件\",\"如何使用编译器呢？\",\"还记得，我们在环境配置中配置了 vscode 和 gcc，并安装了 vscode 的相关插件吗？\",\"一个最快捷的方式是，在 vscode 中使用 Code Runner，即编写好你的代码并保存后，在右上角点击 ▶ 按钮，就可以运行了！同时会自动生成一个同名的可执行文件在你的代码旁边\",\"当然，如果你更喜欢手动操作，也可以使用 gcc 命令来编译你的代码，在你代码所在的文件夹打开终端（在 vscode 中，这意味着右键你的文件并选择在集成终端中打开）：\",\"gcc yourfile.c -o yourfile \",\"其中，yourfile.c 是你的代码文件名，-o 是一个选项，表示输出文件名，yourfile 是你希望输出的文件名，这样，编译器就会将你的代码编译成一个叫做 yourfile 的可执行文件（Windows 上往往是叫 yourfile.exe）\",\"然后，你就可以在终端中运行这个可执行文件了：\",\"./yourfile \",\"其中，./ 表示当前文件夹，yourfile 是你的可执行文件名，这样，你的程序就会在终端中运行了！\"]},\"95\":{\"h\":\"试一试！\",\"t\":[\"编写一个简单的 C 语言程序，随便在命令行上打印一点东西！\"]},\"96\":{\"c\":[\"CPL\"]},\"97\":{\"c\":[\"C Programming Language\"]},\"98\":{\"h\":\"2. 变量和数据类型\"},\"99\":{\"h\":\"变量\",\"t\":[\"什么是变量？顾名思义，变量是一个可以被改变的量。在计算机中，变量是用来存储数据的容器。变量可以存储各种类型的数据，如整数、浮点数、字符串等。\",\"在 C 语言中，变量可以被声明，你需要在声明时指定变量的类型和名称。\",\"此外，你可以使用 赋值符号（=） 来给变量赋值。\",\"int age = 10; float number = 3.14159; char letter = 'A'; \",\"提示\",\"赋值符号（=）是 C 语言中的赋值运算符，用于将右侧的值赋给左侧的变量。\",\"赋值符号的左侧只能是指定的变量，右侧可以是任何结果满足被赋值变量类型的表达式。\",\"如果许多个变量具有相同的类型，你可以使用逗号分隔符来声明多个变量：\",\"int a, b, c; \"]},\"100\":{\"h\":\"变量的作用域\",\"t\":[\"变量的作用域表示该变量在程序中可以被正确访问的范围。\",\"对于于全局变量，它们在整个程序中都可以被访问。全局变量通常在函数外部声明：\",\"// 这里不可以访问 PI int PI = 3.14159; // 全局变量 // 这里可以访问 PI int main() { // 这里可以访问 PI } \",\"提示\",\"为保证全局变量的安全性，一般将全局变量声明为常量或静态变量。\",\"常量和静态变量的含义会在稍后提到\",\"而对于大括号 {} 内部声明的变量，它们只能在当前大括号内被访问。这种变量被称为局部变量：\",\"局部变量一旦离开其声明的大括号，就会立刻被销毁，此后再也无法访问。\",\"此外，变量需要先声明才能够被使用\",\"int main() { // 这里也访问不到 a int a = 10; // 局部变量 // 这里可以访问到 a } // 这里访问不到 a \"]},\"101\":{\"h\":\"常量和静态变量\",\"t\":[\"常量（const）和静态变量（static）是 C 语言中的两种特殊变量。\",\"常量是一种不能被修改的变量。在声明常量时，需要使用 const 关键字。常量通常用于表示不会改变的值，如圆周率、自然对数的底数等。\",\"const float PI = 3.14159; \",\"静态变量是一种在整个程序运行期间都存在的变量。在声明静态变量时，需要使用 static 关键字。静态变量通常用于表示需要在函数调用之间保持状态的变量，如计数器、累加器等。\",\"static int counter = 0; \",\"静态变量的特点在于，即使离开变量所在的作用域，静态变量不会被销毁，并仍然保持其值不变：\",\"int counter() { static int count = 0; count = count + 1; return count; } \",\"例如，每次调用上面的 counter() 函数，count 的值都会增加 1，而不是每次都返回 1。\"]},\"102\":{\"h\":\"变量的命名规则\",\"t\":[\"在 C 语言中，变量命名我们一般遵循以下规则\",\"对于一般的局部变量和函数，变量名一般使用小写字母，单词之间使用下划线 _ 分隔，即 snake_case 命名法\",\"也可以使用匈牙利命名法，即变量名以类型前缀开头，之后名称每个单词首字母大写，如 int iAge，float fpNumber，但个人觉得这种命名方式非常丑而且没有必要。\",\"对于常量，变量名一般使用大写字母，单词之间使用下划线 _ 分隔，即 UPPER_CASE 命名法\",\"其它的命名规则会在说到对应的语法时提到\"]},\"103\":{\"h\":\"数据类型\",\"t\":[\"在 C 语言中，数据类型用于表示变量可以存储的数据类型。C 语言中的数据类型包括以下几种：\",\"整型（short、int、long long）（对应类型分 signed 和 unsigned）\",\"浮点型（float、double、long double）\",\"字符型（char）\",\"布尔型（bool）（C 语言需要包含头文件 stdbool.h）\",\"其它类型（进度未解锁）\"]},\"104\":{\"h\":\"整型\"},\"105\":{\"h\":\"short\",\"t\":[\"short 是一种较小的整数类型，占用 2 个字节（16 位）的内存空间。\",\"既然它占用了二进制上 16 位的空间，那么它最大能是多少呢？\",\"首先，当我们定义整型类型时，它默认是 signed 整型类型，即代表它有符号，因此，还需要牺牲一位二进制位表示符号的正负\",\"因此，short 实际上只拥有 15 位来表示数值，而 15 位二进制数能够表示的最大值是 32767，最小值是 -32768\",\"而如果你不需要符号，你可以在定义 short 类型时，使用 unsigned 关键字来表示无符号整型，这样，short 就拥有 16 位来表示数值，因此，它的最大值是 65535，最小值是 0：\",\"unsigned short a = 65535; \",\"之后的整型类型只在存储空间上有区别，之后的就不详细讲解了\",\"提示\"]},\"106\":{\"h\":\"为啥最小值可以比最大值多 1？\",\"t\":[\"因为 short 的二进制表示中，最高位是符号位，当符号位为 1 时，表示负数，当符号位为 0 时，表示正数。\",\"因此，当符号位为 1 时，表示负数，而负数的表示方式是补码表示法，即最高位为 1（表示为负数），其余位取反，然后加 1。\",\"那 -0 这个数怎么办呢？在这个时候，符号位就会被直接解释为负数，因此，-0 就被解释为 -32768。\",\"这也是为什么，当你取 32767 + 1 时，得到的却是 -32768 了\"]},\"107\":{\"h\":\"为什么负数要使用补码表示法？\",\"t\":[\"减法需要退位，但计算机的设计是每位分开计算的，只能用 1 位的临时寄存器来记录进位，退位操作根本无法实现\",\"因此，出现了补码表示法，它是来想办法将减法转换为加法的\"]},\"108\":{\"h\":\"补码怎么想出来的？\",\"t\":[\"如果说一个数减去 x 和一个数加上 y 相等，那么是不是可以得到，y = -x？\",\"那不对啊，在二进制上，没有办法表示 -x 啊？\",\"有的，兄弟，有的，回想起我们小学学过的整数除法，是不是有 商余 的概念？\",\"举个例子让你回想起来：\",\"4 ÷ 3 = 1 …… 1 7 ÷ 3 = 2 …… 1 \",\"那这样的话，4 和 7 在同时整除三之后，是不是相等的？\",\"同理，对于 short 类型，能用来表示数字的只有 16 位，当我们得到的结果超过 16 位时，多出来的那一位就会被丢弃，因此，两个数字相加，实际上得到的结果是除以 216 的余数\",\"那么我们回到除 3 的情景，如果我现在要得到 4 - 2 在整除 3 之后得到的结果，那显然它是 2\",\"那有没有另外一个数字，能让 4 加上它再整除 3 之后得到的结果还是 2 呢？\",\"答案自然是有的，我们找到最小的一个正整数，也就是 1\",\"那么在同时除以三的基础上，加上 1 就相当于将原来的数字减去 2，因此，1 在这里就可以看作是 -2 的补码\",\"再仔细一瞧，您猜怎么着？1 + 2 正好就是 3，也就是原本要被整除的那个数\",\"那同理推断，一个负整数 short 的变量，加上它的补码，得到的结果就是原本要被整除的那个数\",\"所以补码的值就很好计算了，只需要将原本的数字取反，然后加 1 就可以得到补码了\"]},\"109\":{\"h\":\"int\",\"t\":[\"int 是一种标准的整数类型，占用 4 个字节（32 位）的内存空间。\",\"通常情况下，int 的最大值是 2147483647（231−1），最小值是 -2147483648。\",\"提示\",\"int 的大小范围建议牢记，一些题目可能会在数据范围上作文章，大多围绕 int 的范围来出题，因此要特别小心超出 int 范围的情况\"]},\"110\":{\"h\":\"long long\",\"t\":[\"long long 是一种非常大的整数类型，占用 8 个字节（64 位）的内存空间。\"]},\"111\":{\"h\":\"浮点型\"},\"112\":{\"h\":\"float\",\"t\":[\"float 是一种单精度浮点数类型，占用 4 个字节（32 位）的内存空间。\"]},\"113\":{\"h\":\"double\",\"t\":[\"double 是一种双精度浮点数类型，占用 8 个字节（64 位）的内存空间。\"]},\"114\":{\"h\":\"long double\",\"t\":[\"long double 是一种扩展精度浮点数类型，占用 10/16 个字节（80 / 128 位）的内存空间。具体占用大小因平台而异\",\"如果直接写小数运算，那么 C 语言默认使用的是 double 类型，一般来说，double 的大小也够用，一般不会用到 long double 类型\",\"浮点型变量的存储格式采取 IEEE 754 格式，因为展开讲起来有些麻烦，所以就不展开了，一般来说考前看一眼就够用，一般也用不上这么精细\"]},\"115\":{\"h\":\"字符型\"},\"116\":{\"h\":\"char\",\"t\":[\"char 是一种字符类型，占用 1 个字节（8 位）的内存空间。\",\"char 类型的变量可以存储一个字符，如字母、数字、符号等。\",\"字符需要用单引号 ' 括起来，如 'A'、'1'、'!' 等。\",\"char letter = 'A'; \",\"char 类型的变量实际上存储的是字符的 ASCII 码值，因此，char 类型的变量也可以存储整数，并参与整数运算：\",\"int distance = 'a' - 'A'; \",\"在 C 语言中，char 默认是 signed 格式，这会导致它浪费了 128 个值，而 128 ~ 255 实际上是存在对应字符的，因此，在使用 char 输出 ASCII 码大于 127 的字符时，务必注意 char 此时是 unsigned 还是 signed 格式\"]},\"117\":{\"h\":\"布尔型\"},\"118\":{\"h\":\"bool\",\"t\":[\"bool 是一种二元类型，理论上应该只需要占用 1 个二进制位，但很遗憾，因为地址空间的申请必须按照字节大小对齐，因此，bool 类型实际上占用 1 个字节（8 位）的内存空间。\",\"bool 类型的变量只能存储 true 或 false 两个值。\",\"因此，实际上 true = 1，false = 0\",\"bool flag = true; \"]},\"119\":{\"h\":\"输入输出\",\"t\":[\"在 C 语言中，输入输出是使用 scanf 和 printf 函数来实现的，当然，也有 putchar，getchar 这种更加原始的方法。\",\"要使用它们，需要先包含头文件 stdio.h\"]},\"120\":{\"h\":\"scanf\",\"t\":[\"scanf 函数用于从标准输入读取数据，并将其存储到指定的变量中。\",\"scanf 函数的语法如下：\",\"int scanf(const char *format, ...); \",\"提示\",\"format 的类型目前尚未解锁，稍安勿躁哦~\",\"其中，format 是一个字符串，用于指定输入数据的格式，... 表示可以接受任意数量的参数，这些参数是用于存储输入数据的变量。\",\"例如，以下代码从标准输入读取一个整数和一个浮点数，并将其存储到 a 和 b 变量中：\",\"int a; float b; scanf(\\\"%d%f\\\", &a, &b); \",\"其中，%d 表示读取一个整数，%f 表示读取一个浮点数，&a 和 &b 表示将读取的数据存储到 a 和 b 变量中。\",\"这里的 & 表示取地址，含义是，将变量所存储的位置告诉 scanf 函数，这样 scanf 函数才能将读取的数据存储到这个位置。\",\"提示\",\"虽然 scanf 可以指定输入的格式，但实际上当你不指定格式，只是一味的写 %?时，scanf 还是会自动忽略两个输入之间的空白符，因此，反而不必担心输入的格式问题\",\"提示\",\"% 号表示法\",\"% 号表示法用于指定输入输出的格式。例如，%d 表示输入输出一个整数，%f 表示输入输出一个浮点数，%c 表示输入输出一个字符，%s 表示输入输出一个字符串。\",\"其它的一些用法会在之后提到，或可自行查阅\"]},\"121\":{\"h\":\"printf\",\"t\":[\"printf 函数用于将数据输出到标准输出。\",\"printf 函数的语法如下：\",\"printf(const char *format, ...); \",\"其中，format 是一个字符串，用于指定输出数据的格式，... 表示可以接受任意数量的参数，这些参数是要输出的数据。\",\"例如，以下代码将整数 a 和浮点数 b 输出到标准输出：\",\"int a = 10; float b = 3.14; printf(\\\"%d %f\\\\n\\\", a, b); \",\"\\\\n 表示换行符，它们俩合在一起表示一个字符\",\"提示\",\"\\\\ 转义符号\",\"\\\\ 是转义符号，用于表示特殊的字符。例如，\\\\n 表示换行符，\\\\t 表示制表符，\\\\\\\" 表示双引号，\\\\'表示单引号。\",\"在字符串中，如果需要输出反斜杠，需要使用两个反斜杠 \\\\\\\\ 来表示一个反斜杠\",\"提示\",\"printf 的输出格式还能有更多花样，这里挑几个比较好用的：\",\"\\\"%?d\\\"：输出一个整数，其中 ? 表示输出的位数，如果输出的位数不足，则会在前面补空格，如果超出位数，则照常输出不会有变化\",\"\\\"%?f\\\"：和上一个同理，但是是浮点数\",\"\\\"%x\\\"：输出一个整数，以十六进制的形式输出，也可以用来输入\",\"\\\"%X\\\"：和上一个同理，但是是十六进制的大写形式\",\"\\\"%.?d\\\"：输出一个整数，其中 ? 表示输出的位数，如果输出的位数不足，则会在前面补零，如果超出位数，则不会起作用\",\"\\\"%.?f\\\"：输出一个浮点数，其中 ? 表示保留小数的位数，如果输出的位数不足，则会在后面补零，如果超出位数，则会将超出的部分截掉\",\"\\\"%?.?d\\\"：相当于之前提到的两种方法的结合\",\"\\\"%?.?f\\\"：同理\"]},\"122\":{\"h\":\"getchar\",\"t\":[\"getchar 函数用于从标准输入严格读取下一个字符，这意味着读取的字符也包含换行符、空格等。\",\"getchar 函数的语法如下：\",\"int getchar(); \",\"getchar 函数返回读取的字符的 ASCII 码值\",\"例如，以下代码从标准输入读取一个字符，并将其存储到 c 变量中：\",\"char c; c = getchar(); \"]},\"123\":{\"h\":\"putchar\",\"t\":[\"putchar 函数用于将一个字符输出到标准输出。\",\"putchar 函数的语法如下：\",\"int putchar(int c); \",\"putchar 函数接受一个整数参数 c，表示要输出的字符的 ASCII 码值。\",\"例如，以下代码将字符 c 输出到标准输出：\",\"char c = 'A'; putchar(c); \"]},\"124\":{\"h\":\"运算符\"},\"125\":{\"h\":\"算术运算符\",\"t\":[\"算术运算符用于执行基本的算术运算，包括加法、减法、乘法、除法和取模运算。\",\"+：加法运算符，用于将两个操作数相加。\",\"-：减法运算符，用于将一个操作数减去另一个操作数。\",\"*：乘法运算符，用于将两个操作数相乘。\",\"/：除法运算符，用于将一个操作数除以另一个操作数。对于整数除法，结果会舍去小数部分。\",\"%：取模运算符，用于计算两个操作数的余数。\",\"++：自增运算符，用于将操作数加 1。\",\"--：自减运算符，用于将操作数减 1。\",\"提示\",\"++ 和 -- 这两个运算符有说法，它们可以放在操作数的前面，也可以放在操作数的后面，放在前面表示先加 1 或减 1，再进行运算，放在后面表示先进行运算，再加 1 或减 1 例如：\",\"int a = 1; int b = ++a; // a = 2, b = 2 int c = a++; // c = 2, a = 3 \"]},\"126\":{\"h\":\"位运算符\",\"t\":[\"位运算符用于对整数进行位操作。\",\"&：按位与运算符，用于将两个操作数的对应位进行与运算。\",\"|：按位或运算符，用于将两个操作数的对应位进行或运算。\",\"^：按位异或运算符，用于将两个操作数的对应位进行异或运算。\",\"~：按位取反运算符，用于将操作数的所有位进行取反运算。\",\"<<：左移运算符，用于将操作数的所有位向左移动指定的位数。\",\">>：右移运算符，用于将操作数的所有位向右移动指定的位数。\",\"注意\",\"位运算符的优先级较低，因此在使用时需要注意运算符的优先级，建议多使用括号来明确运算顺序。\",\"提示\",\"位运算的速度比算术运算快很多，因此，在一些可以用位运算符替代算术运算的地方，可以试试使用位运算符！\"]},\"127\":{\"h\":\"特殊的加减方式\",\"t\":[\"对于变量，除了 x = x + 1 这种赋值方法，你也可以使用类似 x += 1 这种赋值方法，即将运算符提前，这样的写法对于大部分的二目运算符都可以使用。这样写的好处是代码更加简洁，但请确定好运算符之间的运算顺序，否则可能会出现意想不到的结果\"]},\"128\":{\"h\":\"试一试！\",\"t\":[\"DotOJ 补完计划 - 南哪 2022-0-introDotOJ 补完计划 - 南哪 2022-1-types-io\"]},\"129\":{\"c\":[\"CPL\"]},\"130\":{\"c\":[\"C Programming Language\"]},\"131\":{\"h\":\"3. 分支、循环和数组\"},\"132\":{\"h\":\"分支\"},\"133\":{\"h\":\"if - else\",\"t\":[\"写一个代码判断输入的数是正数、负数还是零，当你到手这个需求的时候，你会发现，按照目前为止学过的知识搞不出来，必须要有表达类似 如果…，那么就…，否则就… 这样的语句才行\",\"换成英文来说就是 if…then…else…，而 C 语言就有差不多这样的表达。在执行顺序看上去，就像是代码在此处进入了岔路口，必须要根据不同的条件选择一条分支来执行，因此，判断语句又被称为分支语句\",\"例如，对于这个需求，我们可以这样写：\",\"#include <stdio.h> int main() { int n; scanf(\\\"%d\\\", &n); if (n > 0) { printf(\\\"正数\\\\n\\\"); } else if (n < 0) { printf(\\\"负数\\\\n\\\"); } else { printf(\\\"零\\\\n\\\"); } return 0; } \",\"提示\",\"因为 if 语句和一般的函数调用不太相同，所以我更喜欢在之后加一个空格，这样看上去更美观一些，之后的 for 等语句同理\",\"注意\",\"if 语句的子代码块不是必须用 {} 包裹的，但是为了代码的可读性考虑，建议还是加上 {}，这样代码的可读性会大大提高，也是一种非常良好的代码编写规范，即使这会让代码看上去更长。\",\"接下来我们来详细剖析一下 if 语句的用法\",\"最基础的 if 语句非常简单，就长这样：\",\"if (condition) { // do something } \",\"其中，condition 是一个条件表达式，它的最终结果可以是任意整数，当这个整数不为零，则条件成立，执行内部的操作，否则，跳过内部的操作，继续执行后面的代码\",\"提示\",\"再提醒一次，C 语言中的 if 的判断条件非零即真！\",\"如果条件不成立，你也需要执行一些操作，那么你可以使用 else 语句，它表示“否则”的意思，例如：\",\"if (condition) { // do something } else { // do something else } \",\"如果需要判断多个条件，可以连续使用 if else 语句，组成 combo，例如：\",\"if (condition1) { // do something } else if (condition2) { // do something else } else { // do something else } \",\"注意\",\"注意，当一个 else 被编写出来后，它会找到离自己最近的 if 进行匹配，在编写逻辑判断语句的时候，最好写完之后重看一遍，确定自己的逻辑是正确的！\"]},\"134\":{\"h\":\"逻辑运算符\",\"t\":[\"判断必然也得搭配逻辑运算符食用，C 语言中有以下几种逻辑运算符：\",\"&&：逻辑与，表示“且”的意思，只有当两个条件都成立时，整个表达式才成立\",\"||：逻辑或，表示“或”的意思，只要有一个条件成立，整个表达式就成立\",\"!：逻辑非，表示“非”的意思，将一个条件取反\",\"==：等于，表示“等于”的意思，用于比较两个值是否相等\",\"!=：不等于，表示“不等于”的意思，用于比较两个值是否不相等\",\">：大于，表示“大于”的意思，用于比较两个值的大小关系\",\"<：小于，表示“小于”的意思，用于比较两个值的大小关系\",\">=：大于等于，表示“大于等于”的意思，用于比较两个值的大小关系\",\"<=：小于等于，表示“小于等于”的意思，用于比较两个值的大小关系\",\"注意\",\"赋值符号 = 和等于符号 == 是不同的，前者表示赋值，后者表示等于，不要搞混了！\",\"比如说，判断闰年就是经典的例子，闰年满足以下条件：\",\"能被 4 整除但不能被 100 整除\",\"或者能被 400 整除\",\"那么我们可以这样写：\",\"int main() { int year; scanf(\\\"%d\\\", &year); if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) { printf(\\\"是闰年\\\\n\\\"); } else { printf(\\\"不是闰年\\\\n\\\"); } return 0; } \"]},\"135\":{\"h\":\"三目运算符\",\"t\":[\"三目运算符是 C 语言中的一种特殊运算符，它的形式如下：\",\"condition ? value1 : value2 \",\"它的作用是，如果 condition 为真，则返回 value1，否则返回 value2\",\"例如，我们可以用三目运算符来写一个求绝对值的操作：\",\"int main() { int n = -1; int abs_n = n > 0 ? n : -n; } \",\"同理，三目运算符也能用来选择执行简单的操作，例如：\",\"int main() { int n = 1; n > 0 ? printf(\\\"正数\\\\n\\\") : printf(\\\"负数\\\\n\\\"); } \",\"提示\",\"三目运算符可以嵌套使用，但是嵌套过多会导致代码可读性下降，因此不建议嵌套使用三目运算符\"]},\"136\":{\"h\":\"switch - case\",\"t\":[\"switch 语句是一种特殊的分支语句，它的形式如下：\",\"switch (expression) { case value1: // do something break; case value2: // do something else break; default: // do something else } \",\"它的作用是，根据 expression 的值，选择执行对应的 case 语句，如果 expression 的值与任何一个 case 的值都不匹配，则执行 default 语句 例如，我们可以用 switch 语句来写一个判断输入的数是正数、负数还是零的操作：\",\"int main() { int n; scanf(\\\"%d\\\", &n); switch (n > 0) { case 1: printf(\\\"正数\\\\n\\\"); break; case 0: printf(\\\"零\\\\n\\\"); break; default: printf(\\\"负数\\\\n\\\"); } return 0; } \",\"提示\",\"switch 语句的 case 语句可以不写 break，这样会继续执行下一个 case 语句，直到遇到 break 或者 switch 语句结束\"]},\"137\":{\"h\":\"循环\",\"t\":[\"—— 如何输出 1 到 100？ —— 我一个一个输出啊\",\"循环语句是 C 语言中的一种特殊语句，它的作用是重复执行一段代码，直到满足某个条件为止\",\"而 for 循环是最常见的一种，实际上，在 C 语言中它改变形式后可以替代所有形式的循环，包括之后说到的 while 和 do while 循环\",\"for 循环的形式如下：\",\"for (initialization; condition; update) { // do something } \",\"提示\",\"你可以使用 continue 来直接进入下一次循环过程\",\"你也可以使用 break 来直接跳出循环\",\"它的作用是，先执行 initialization，然后判断 condition 是否成立，如果成立，则执行 do something，然后执行 update，再判断 condition 是否成立，如果成立，则继续执行 do something，直到 condition 不成立为止\",\"例如，我们可以用 for 循环来输出 1 到 100：\",\"int main() { for (int i = 1; i <= 100; i++) { printf(\\\"%d\\\\n\\\", i); } return 0; } \",\"提示\",\"for 循环的 initialization、condition 和 update 可以省略，但是不能省略 condition，否则会导致死循环\",\"死循环指的是无法终止的循环，会导致程序卡死\"]},\"138\":{\"h\":\"while\",\"t\":[\"while 循环的形式如下：\",\"while (condition) { // do something } \",\"它的作用是，先判断 condition 是否成立，如果成立，则一直执行 do something，直到 condition 不成立为止\",\"例如，我们可以用 while 循环来输出 1 到 100：\",\"int main() { int i = 1; while (i <= 100) { printf(\\\"%d\\\\n\\\", i); i++; } return 0; } \",\"提示\",\"for 循环可以用来替代 while 循环，例如上面的代码可以写成：\",\"int main() { int i = 1; for (; i <= 100; ) { printf(\\\"%d\\\\n\\\", i); i++; } return 0; } \"]},\"139\":{\"h\":\"do while\",\"t\":[\"do while 循环的形式如下：\",\"do { // do something } while (condition); \",\"它和 while 循环的区别是，do while 循环会先执行一次 do something，然后再判断 condition 是否成立，如果成立，则继续执行 do something，直到 condition 不成立为止\",\"例如，我们可以用 do while 循环来输出 1 到 100：\",\"int main() { int i = 1; do { printf(\\\"%d\\\\n\\\", i); i++; } while (i <= 100); return 0; } \",\"提示\",\"do while 循环也可以用 for 循环来替代，例如上面的代码可以写成：\",\"int main() { int i = 1; for (; ; ) { printf(\\\"%d\\\\n\\\", i); i++; if (i > 100) { break; } } return 0; } \",\"但是因为 do while 循环的特性，所以它更适合用在循环次数不确定的情况下，这种情况使用 for 循环来替代会显著降低代码可读性\"]},\"140\":{\"h\":\"数组\",\"t\":[\"数组是一种特殊的变量，它可以存储多个相同类型的值，例如：\",\"int a[10]; \",\"这创建了一个大小为 10 的整数数组，它就像一个抽屉，每个抽屉里可以放一个整数，你可以通过下标来访问数组中的元素，例如：\",\"a[0] = 1; a[1] = 2; a[2] = 3; \",\"这把数组中的第一个元素赋值为 1，第二个元素赋值为 2，第三个元素赋值为 3\",\"提示\",\"数组的下标从 0 开始，所以数组中的第一个元素的下标是 0，第二个元素的下标是 1，以此类推\",\"注意\",\"由于下标从 0 开始，所以上面的数组的最大下标实际上是 9！而不是 10！\",\"你可以通过循环来遍历数组中的所有元素，例如：\",\"for (int i = 0; i < 10; i++) { printf(\\\"%d\\\\n\\\", a[i]); } \",\"提示\",\"数组的大小是固定的，不能动态改变，如果你需要存储更多的元素，你需要创建一个更大的数组\"]},\"141\":{\"h\":\"goto\",\"t\":[\"goto 是 C 语言中的一种特殊语句，它的形式如下：\",\"goto label; \",\"它的作用是，直接跳转到 label 标签的位置，然后继续执行后面的代码\",\"例如，我们可以用 goto 来写一个简单的循环：\",\"int main() { int i = 0; loop: printf(\\\"%d\\\\n\\\", i); i++; if (i < 10) { goto loop; } return 0; } \",\"注意\",\"goto 语句可以用来实现循环，但是因为它的跳转特性，所以它可能会导致代码的混乱、可读性下降，因此极度不建议使用 goto 语句\",\"最好仅在需要快速连续跳出多层循环时使用 goto 语句\"]},\"142\":{\"h\":\"试一试！\",\"t\":[\"DotOJ 补完计划 - 南哪 2022-2-if-for-arrayDotOJ 补完计划 - 南哪 2022-3-for-a-whileDotOJ 补完计划 - 南哪 2022-4-loop\"]},\"143\":{\"c\":[\"CPL\"]},\"144\":{\"c\":[\"C Programming Language\"]},\"145\":{\"h\":\"4. 函数、递归和递推\"},\"146\":{\"h\":\"函数\",\"t\":[\"我们之前已经提过 main 函数了，对吧？那你应该已经理解了函数的基本结构了，我们这里再回顾一下。\",\"函数是 C 语言中非常重要的一个概念，它允许我们将代码模块化，从而提高代码的可读性和可维护性。\",\"函数的定义格式如下：\",\"返回类型 函数名(参数列表) { // 函数体 } \",\"其中，返回类型是函数返回值的类型，函数名是函数的名称，参数列表是函数的参数，函数体是函数的具体实现。\",\"提示\",\"和变量命名一样，函数名也建议使用 snake_case 命名法。\"]},\"147\":{\"h\":\"函数的调用\",\"t\":[\"函数的调用格式如下：\",\"函数名(参数列表); \",\"其中，参数列表是函数的参数，可以是一个或多个。\",\"例如，我们定义了一个函数 add，它接受两个整数作为参数，并返回它们的和：\",\"int add(int a, int b) { return a + b; } \",\"注意\",\"即使多个传入参数的类型是相同的，你也不能把它们写在一起！你必须挨个为它们指定名称\",\"因为参数的位置顺序决定了调用时的顺序，所以参数的顺序非常重要。\",\"我们可以通过以下方式调用这个函数：\",\"int result = add(1, 2); \",\"提示\",\"函数也可以先声明，再在之后给出定义，而函数在声明后就可以被使用：\",\"int add(int a, int b); // 函数声明 int main() { int result = add(1, 2); // 函数调用 return 0; } int add(int a, int b) { // 函数定义 return a + b; } \"]},\"148\":{\"h\":\"递归\",\"t\":[\"既然函数在声明后就可以被调用，而在函数定义之前（{} 之前），函数的声明就已经完成了，那我们能在函数中调用它自己吗？\",\"答案自然是可以的，而这种在自己的函数体求解过程中使用自己得出的结果的方法，就是递归。\",\"听起来可能有一些绕，但我们可以通过一个简单的例子来理解它。\",\"例如，我们需要计算斐波那契数列的第 n 项，假设我们定义了它的结果由函数 f(n) 得出\",\"我们也知道，斐波那契数列的前两项是 1，后面的每一项都是前两项的和\",\"因此，f(n) 应当等于 f(n-1) + f(n-2)，而 f(1) 和 f(2) 都等于 1\",\"所以，我们可以写出以下代码：\",\"int f(int n) { if (n == 1 || n == 2) { return 1; } return f(n-1) + f(n-2); } \",\"注意\",\"对于递归的编写，需要注意两个关键点：\",\"递归的终止条件\",\"我们需要在递归的过程中设置一个终止条件，以防止递归无限进行下去。在上面的例子中，我们设置了 n == 1 || n == 2 作为终止条件。\",\"对于当前问题，如何拆分子问题\",\"我们需要找到一个方法，将当前问题拆分为更小的子问题，并在子问题的解中找到当前问题的解。在上面的例子中，我们将 f(n) 拆分为 f(n-1) 和 f(n-2)。\",\"提示\",\"这里还有一个更难的例子：汉诺塔问题\",\"我们先来找边界条件：\",\"当起始柱子上只有一个盘子的时候，直接把它挪到终点柱子就好了。\",\"然后我们来找盘子为 n 层时的处理方法：\",\"实际上我们可以把 n 层抽象成两层：最底下的一层和上面 n - 1 层，以方便我们将 n 的问题拆分成更小的同时又能方便解决的问题。\",\"然后考虑两层：我们得先把上面那个盘子移到中间柱子上面，再把下面一个盘子移到终点柱子上，最后把中间柱子上的那个盘子移到终点柱子上，完成汉诺塔的位移。\",\"所以我们怎么具体构造这个递归呢？先给代码后解释：\",\"void hanoi(int n, char a, char b, char c) { if (n == 1) { printf(\\\"%d:%c->%c\\\", n, a, c); } else { hanoi(n - 1, a, c, b); printf(\\\"%d:%c->%c\\\", n, a, c); hanoi(n - 1, b, a, c); } } \",\"先解释一下这个函数中各个参数的含义， n 自然不用说，表示 n 层，但是如果你将 a，b，c 认作是一柱二柱三柱那格局就小了，它们应该被称作起始柱子，中间柱子和终点柱子。在递归的过程中，这三个变量的表示的柱子实际上会不断变化，因为你在一些步骤中终点柱并不是最开始的那个终点柱：比如说两层的时候，你第一步是要移到中间柱上，而不是终点柱上，中间柱才是你这一步的终点柱。\",\"首先用 if 特判解决掉最小的问题，我们直接输出移动方式就行了。\",\"然后关键的在下面，对于 n 层，我们先将 n - 1 层从起始柱子通过终点柱子的帮助移到中间柱子去，这之后我们将最底下的那一层移到终点柱子上，这一步可以直接输出，最后我们将这 n - 1 层从中间柱子通过起点柱子的帮助，移到终点柱子上，这就是抽象为两层的汉诺塔问题的处理方法。\",\"通过这样的处理，我们将 n 层的问题，转化成了一次移动和两次 n - 1 层的问题，这样层层缩小，最终变成一层的可以直接解决的问题。\",\"实际上递归就是一种量变引起质变的方式，通过不断地解决小问题，总有一天你会发现，欸，大问题好像也就这么简简单单的解决了。\"]},\"149\":{\"h\":\"搜搜你的\",\"t\":[\"听说过二维迷宫吗？就那种一个方格里到处都是 0 和 1 的那种？\",\"现在有一个二维迷宫，你需要从起点 (1, 1) 出发，找到一条路径，使得你能够到达终点 (n, m)，其中 n 和 m 是迷宫的大小。\",\"你只能向右或向下移动，不能向上或向左移动。\",\"请你编写一个程序，输出一条路径，使得你能够到达终点。\",\"如果没有路径，则输出 No Solution。\",\"输入格式：\",\"第一行包含两个整数 n 和 m，表示迷宫的大小。\",\"接下来 n 行，每行包含 m 个整数，表示迷宫的布局。\",\"输出格式：\",\"一行一个整数，表示需要走多少步到达终点\",\"如果没有路径，则输出 -1。\",\"输入样例：\",\"3 3 0 1 0 0 0 0 0 1 0 \",\"输出样例：\",\"4 \",\"这道题该怎么解决呢？完全没办法啊？\",\"实际上，它也可以用递归解决，要得到从起点到终点的路径，那我只需要知道终点可以从哪些地方到达就可以咯？\",\"那终点可以从哪里来呢？从终点左边一格或者从终点上边一格来，那这两格又从哪里来呢？显然是从它们左边一格或者上边一格来，以此类推，直到起点。\",\"我们也可以从起点反过来推，从起点开始，选择方向一路走到撞墙，如果某一步所有方向都走不通，就回到上一步，再选择一个方向走，直到走到终点。\",\"同时，由于走到终点可能不止有一条路径，因此我们需要找到其中步数最短的那条路径\",\"于是很轻松地就能写出以下代码：\",\"// 如果是常量数组，可以不指定大小，编译器会自动计算大小 const int dx[] = {0, 1, 0, -1, 0}; const int dy[] = {0, 0, 1, 0, -1}; int best_steps = 2147483647; // 最大的 int 值，因为此时还没有找到路径 void dfs(int x, int y, int steps) { // 边界条件：超出范围或者是已经走过 if (x < 0 || y < 0 || x > n || y > m || vis[x][y] == 1) { return; } // 如果到达终点，输出结果 if (x == n && y == m) { best_steps = steps > best_steps ? best_steps : steps; return; } // 向四个方向搜索 for (int i = 1; i <= 4; i++) { // 将当前点标记为走过 vis[x][y] = 1; dfs(x + dx[i], y + dy[i], steps + 1); // 还原现场，走不通，无事发生，继续尝试其他方向 vis[x][y] = 0; } } int main() { // 输入迷宫大小 scanf(\\\"%d%d\\\", &n, &m); // 输入迷宫 for (int i = 1; i <= n; i++) { for (int j = 1; j <= m; j++) { scanf(\\\"%d\\\", &maze[i][j]); } } // 从起点开始搜索 dfs(1, 1, 0); // 输出结果 if (best_steps == 2147483647) { printf(\\\"-1\\\"); } else { printf(\\\"%d\\\", best_steps); } return 0; } \",\"很简单吧？但是想想这样找要找多久……\",\"你会发现，这个代码的时间复杂度是指数级的，因为每一步都有四个方向可以选择，所以大概会有 4^n 种可能的情况。\",\"而计算机在 1 秒之内最多只能执行 10^8 次运算，所以这个代码最多只能处理 n 小于等于 8 的情况。而 n 在这道题的数据范围可以达到 100，这显然是不合适的\",\"因此，我们需要找到削减搜索空间的方法，来降低时间复杂度。\",\"我们先给出答案，再来理解：\",\"void dfs(int x, int y, int steps) { // 边界条件：超出范围或者是已经走过 if (x < 0 || y < 0 || x > n || y > m || vis[x][y] == 1) { return; } // ① if (steps > best_steps) { return; } // ② if (ans == n + m - 2) { return; } // 如果到达终点，输出结果 if (x == n && y == m) { best_steps = steps > best_steps ? best_steps : steps; return; } // 向四个方向搜索 for (int i = 1; i <= 4; i++) { // 将当前点标记为走过 vis[x][y] = 1; dfs(x + dx[i], y + dy[i], steps + 1); // 还原现场，走不通，无事发生，继续尝试其他方向 vis[x][y] = 0; } } \",\"我们添加了两个判断条件，分别是 ① 和 ②。\",\"① 的作用是，如果当前已经走过的步数已经超过了之前找到的最短路径，那么就没有必要继续搜索了，因为无论如何，我们也不可能找到更短的路径。\",\"② 的作用是，如果当前已经走过的步数已经超过了从起点到终点的最短路径，那么就没有必要继续搜索了，因为无论如何，我们也不可能找到一条路径。\",\"这两个判断条件可以大大削减搜索空间，从而降低时间复杂度。\",\"提示\",\"另外，调转搜索方向的顺序也能削减搜索空间，因为理论上向右和向下走更多的路径更容易最短，所以可以优先搜索向右和向下走的情况，这样能更快地找到最短路径。\",\"注意\",\"递归是一种非常强大的算法思想，它可以用来解决很多复杂的问题，但是需要注意递归的边界条件和时间开销。\"]},\"150\":{\"h\":\"递推\",\"t\":[\"递归是将大问题拆分为小问题，而递推是将小问题合并为大问题，实际上就是递归的反向\",\"相对于递归的抽象，递推更加具体，反而更好理解，它是一种通过迭代的方式，逐步求解问题的方法，是一种正向的过程。\",\"例如，我们要求解斐波那契数列的第 1 ~ n 项，我们可以从 f(1) 和 f(2) 开始，逐步计算 f(3)、f(4)、f(5) 等等，直到 f(n)。\",\"int main() { int n; scanf(\\\"%d\\\", &n); int f[1005]; f[1] = f[2] = 1; for (int i = 3; i <= n; i++) { f[i] = f[i-1] + f[i-2]; } // ... } \",\"提示\",\"递推和递归是两种不同的算法思想，它们各有优缺点，具体使用哪种方法，需要根据问题的性质和需求来决定。\",\"一般来说，递归在处理一些具有递归性质的问题时，如树、图等，会显得更加简洁和直观，而递推在处理一些具有迭代性质的问题时，如数列、动态规划等，会显得更加高效和直接。\",\"树和图看不明白是什么意思的话，在学完语言开始将算法之后会详细讲解。\"]},\"151\":{\"h\":\"试一试！\",\"t\":[\"DotOJ 补完计划 - 南哪 2022-5-functionDotOJ 补完计划 - 南哪 2022-6-recursionDotOJ 补完计划 - 南哪 2022-6-recursion EX\"]},\"152\":{\"c\":[\"CPL\"]},\"153\":{\"c\":[\"C Programming Language\"]},\"154\":{\"h\":\"5. 指针\"},\"155\":{\"h\":\"指针\",\"t\":[\"指针是 C 语言的核心技巧，通过指针，我们可以实现很多高级功能，比如动态内存分配、函数指针、回调函数等等。但是指针也是 C 语言中最容易出错的地方，因为指针的操作非常复杂，一不小心就会出错。本文将介绍一些指针的语法小技巧，帮助大家更好地理解和掌握指针。\"]},\"156\":{\"h\":\"取地址：\",\"t\":[\"当我们想要获取某个变量的地址，首先找到这个变量的变量名，我们假设它是 a，如果你在这个变量名前面加上&（&a），那么恭喜你，你成功的取出了 a 这个变量的地址。\",\"特别地，如果是一个数组，那么它的数组名就是指向它第一个元素的地址，这也是为什么 scanf 数组的时候不要加 &\"]},\"157\":{\"h\":\"存地址：\",\"t\":[\"现在你成功的取出了某个变量的地址（假设是一个int变量），你现在想把它存下来，以方便在其它函数里面找到这个变量，怎么办呢？\",\"你可以用 int *p；来新建一个指向 int 的指针变量。\",\"这里的 * 号指的是你告诉编译器你新建的变量是一个指针类型，这点要注意，因为一会这个符号还有另一个含义。\",\"提示\",\"我们建立的是指针变量，它本质上是一个存储地址的变量。\"]},\"158\":{\"h\":\"用地址：\",\"t\":[\"我们现在得到了变量 a 的地址，并把它存在了 p1 这个指针变量里面。我们怎么来使用 p1 呢？\",\"这里我们又要用到 * 号\",\"当我们在定义过 p1 指针后再次使用 *p1，它的含义就发生了改变。\",\"这里的 *p1 指的是 p1 这个指针指向的变量，也就是说——\",\"*p1 实际上指的就是 a ，无论你在什么地方修改了它的值，a 的值也会随之发生改变。\",\"那么借助指针的这个性质，我们可以写一些更方便的函数来让我们的代码更加简洁。\",\"比如交换两个数，这个操作在某些问题中很常用，我相信大家都不想到处花上好几行的代码来实现它，那么我们可以这样写：\",\"void swap(int *a, int *b) { int t = *a; *a = *b; *b = t; } // 在main函数中↓ int a = 1, int b = 2; swap(&a, &b); // 结果：a = 2, b = 1 \",\"通过使用指针，我们可以利用这个swap函数来将某个和这个函数没有半毛钱关系的变量交换值。\",\"开一个指定大小的连续空间（以 Byte 为单位）：\",\"翻找 C Reference 我们可以找到 malloc 这个函数和 free 这个函数，这两种函数是我们经常可能要用到的。\",\"为什么要用 malloc 和 free 呢？\",\"我们知道，当你想根据输入的值来确定你的数组大小时，你必须得在确定了输入之后再新建数组，然而，这也意味着你的数组在新建时就受限于当前作用域，当这个函数结束，新建的数组就失效了。此时，如果你还在别处需要这个数组，你便没有办法再获得它了。\",\"所以，我们用 malloc 来向编译器申请一段内存空间，大小可以由你自己指定，它会将一段空间分配给你，并返回这段空间的首地址。这段空间来自堆空间，它不会受限于当前作用域，除非你在别处用 free 释放了它，否则它会一直存在。\",\"注意\",\"申请指针必须有始有终，否则会导致内存泄露（产生了大量的无效内存占用）！如果你发现你的程序越跑越慢，还关不掉，指不定就是内存泄露了！\",\"比如说，你想要申请一个 int 变量和一个大小为 n 的 int 数组，你可以这样写：\",\"int *p1 = (int *)malloc(sizeof(int)); int *p2 = (int *)malloc(sizeof(int) * n); \",\"注意，malloc 返回的是一个 void * 类型的指针，所以我们需要把它强制类型转换为 int * 类型的指针，否则编译器会报错。\",\"提示\",\"此时 p1 和 p2 的变量类型是一样的，但 p2 指向的是一段内存空间的首地址，你可以把它当作数组使用，但 p1，虽然你也可以把它当作只有一个元素的数组使用，但实际上和单个 int 变量的指针没有区别。\",\"当你使用完了之后，记得用 free 释放它：\",\"free(p1); free(p2); \",\"提示\",\"free 释放的是指针指向的内存空间，而不是指针本身！为了避免出现野指针，你一定要记得把指针空置！这是好习惯！\",\"p1 = NULL; p2 = NULL; \",\"顺带一提，我们知道数组的名字就是指向它第一个元素的指针，那么数组到底是什么意思呢？\",\"原来，数组后面方括号里面的数字实际上指的是相对于这个数组指针在内存上的偏移值，偏移0那就是第一个元素，偏移1那就是第二个元素，以此类推。\",\"也就是说，下面 if 中等号两侧这两种表达是等价的：\",\"int *p = malloc(sizeof(int) * n); if (*(p + 2) == p[2]) { // do something } \"]},\"159\":{\"h\":\"函数指针\",\"t\":[\"函数指针是一种特殊的指针，它指向的是一个函数的入口地址。通过函数指针，我们可以调用函数，也可以把函数作为参数传递给另一个函数。\",\"函数指针的定义方式如下：\",\"返回类型 (*指针变量名)(参数列表); \",\"其中，返回类型是函数的返回类型，指针变量名是函数指针的名称，参数列表是函数的参数列表。\",\"例如，下面是一个指向 int 类型的函数指针的定义：\",\"int (*p)(int, int); \",\"这个函数指针指向一个有两个 int 类型参数的函数，返回类型是 int。\",\"要使用函数指针，需要先定义一个函数，然后将函数的地址赋值给函数指针。例如：\",\"int add(int a, int b) { return a + b; } int main() { int (*p)(int, int) = add; int result = p(1, 2); printf(\\\"%d\\\\n\\\", result); return 0; } \",\"在上面的代码中，我们定义了一个 add 函数，它接受两个 int 类型的参数，返回它们的和。然后我们定义了一个函数指针 p，并将 add 函数的地址赋值给 p。最后，我们通过函数指针 p 调用了 add 函数，并将结果打印出来。\"]},\"160\":{\"h\":\"试一试！\",\"t\":[\"DotOJ 补完计划 - 逃不掉的语法小技巧 指针\"]},\"161\":{\"c\":[\"CPL\"]},\"162\":{\"c\":[\"C Programming Language\"]},\"163\":{\"h\":\"6. 结构体和共用体\"},\"164\":{\"h\":\"结构体\",\"t\":[\"结构体 struct 是 C 语言中的一种特殊变量类型，它能将不同类型的数据组合成一个整体：\",\"// 定义一个名为 Data 的结构体类型 struct info { int a; char b; float c; }; struct info data = {1, 'a', 3.14f}; // 定义并初始化一个 Data 类型的变量 data \",\"提示\",\"你也可以不给结构体名字，它将作为匿名结构体，你没法再在别处使用它，你只能在创建的时候立刻使用它：\",\"struct { int data1; char data2; double data3; } data; data.data1 = 1; // ... \",\"提示\",\"配合 typedef 语法，你可以通过创建类型别名省去结构体定义时所需要写的 struct：\",\"typedef struct { // ... } data_t; // 不需要写 struct data_t data; \",\"提示\",\"结构体变量类型的命名规则也是使用 snake_case 命名法，即小写字母和下划线组合，并且首字母小写。\",\"但如果你使用了 typedef 语法创建了别名，你应当在后面加上 _t 后缀，以使表达更加清楚。\",\"那么，结构体可以储存变量我明白了，那我如果想把函数也打包进来，作为这个数据类型所创建的变量能够使用的方法，有没有办法呢？\",\"有的，兄弟，有的，恰恰是这种方法，能够让 C 语言这个不是面向对象的语言变得面向对象起来！\",\"提示\"]},\"165\":{\"h\":\"什么是对象？\",\"t\":[\"对象是面向对象编程（OOP）中的一个基本概念，它是一个包含数据和行为的实体。对象可以看作是现实世界中的事物或概念的抽象，它具有状态和行为。在面向对象编程中，对象是程序的基本单元，它封装了数据和操作数据的方法，并且可以与其他对象进行交互。\",\"对象通常由两个部分组成：\",\"属性（属性）：对象的属性是对象所具有的特性和特征，它描述了对象的状态。例如，一个人的属性可能包括姓名、年龄、性别等。\",\"方法（方法）：对象的方法是对象所具有的行为和操作，它描述了对象的行为。例如，一个人的方法可能包括行走、说话、吃饭等。\",\"但因为 C 语言不能在初始化时自动指定变量的初始值，因此我们建议自行指定结构体的创建和删除方法，并全程使用创建出来的指针访问这个变量：\",\"提示\",\"如果是专门为某个结构体设计的函数，我们建议使用 this 作为第一个参数，以表示这个函数所操作的对象。\",\"另外，这个函数的名称应当加上这个结构体的名称作为前缀，以标注这个供给该结构体使用的函数。\",\"typedef struct _cat cat_t struct _cat { int age; const char *name; void (*set_age)(cat_t *, int); void (*speak)(cat_t *); }; void cat_set_age(cat_t *this, int age) { this->age = age; } void cat_speak(cat_t *this) { printf(\\\"%s: Meow~\\\\n\\\", this->name); } cat_t *create_cat(int age, char *name) { cat_t *cat = malloc(sizeof(cat_t)); cat->age = age; // 字符串需要一个 '\\\\0' 字符作为结尾标识，因此需要多分配一个字节的空间 cat->name = malloc(sizeof(char) * (strlen(name) + 1)); strcpy(cat->name, name); cat->set_age = cat_set_age; cat->speak = cat_speak; } // 注意，这里需要传入指针的指针，因为我们在释放后需要修改原指针的值，以防止悬空指针 void destroy_cat(cat_t **cat) { free((*cat)->name); // 将已经释放的指针置为 NULL，防止悬空指针，这看似无用，但是是一种好习惯 (*cat)->name = NULL; free(*cat); *cat = NULL; } int main() { // 完整使用小猫 cat_t *cat = create_cat(1, \\\"Tom\\\"); cat->set_age(cat, 2); cat->speak(cat); destroy_cat(cat); printf(\\\"%p\\\\n\\\", cat); // 输出 NULL return 0; } \",\"提示\"]},\"166\":{\"h\":\"什么是悬空指针？\",\"t\":[\"悬空指针（Dangling Pointer）是指向已释放内存的指针。当一个指针指向的内存被释放后，该指针仍然保留对已释放内存的引用，此时该指针就变成了悬空指针。悬空指针可能导致程序崩溃或产生不可预测的行为，因此在使用指针时需要特别注意避免悬空指针。\"]},\"167\":{\"h\":\"试一试！\",\"t\":[\"DotOJ 补完计划 - 2022-7-data-types\"]},\"168\":{\"c\":[\"CPL\"]},\"169\":{\"c\":[\"C Programming Language\"]},\"170\":{\"h\":\"7. C++\"},\"171\":{\"c\":[\"CPL\"]},\"172\":{\"c\":[\"C Programming Language\"]},\"173\":{\"h\":\"3. CSS 页面元素设计基础\",\"t\":[\"提示\",\"如果你需要更基础的教程，请前往 菜鸟教程\",\"CSS 是页面设计中最重要的部分，一个好的 CSS 设计可以使你的页面如虎添翼，让用户有更好的体验。本节将介绍 CSS 的基本概念和用法，包括选择器、盒模型、布局、动画等。\"]},\"174\":{\"h\":\"选择器\",\"t\":[\"选择器是 CSS 中最基本的概念，用于选择页面中的元素。常用的选择器有：\",\"元素选择器：选择页面中的所有指定元素，例如 div、p、a 等。\",\"类选择器：选择页面中所有具有指定类名的元素，以 . 开头，例如 .my-class。\",\"ID 选择器：选择页面中具有指定 ID 的元素，以 . 开头，例如 #my-id。\",\"属性选择器：选择页面中具有指定属性的元素，例如 [type=\\\"text\\\"]。\",\"伪类选择器：选择页面中具有指定状态的元素，例如 :hover（鼠标悬停）、:active （正处于激活状态）等。\",\"选择器可以组合使用，例如 div.my-class 选择所有具有 my-class 类名的 div 元素。\",\"当然如果你在 . 前面加上一个空格，变成 div .myclass，那么他会选择 div 标签包裹中的 myclass 类名，而忽略没有被 div 包裹的 myclass 类名。\"]},\"175\":{\"h\":\"布局设计\",\"t\":[\"这里，我们将选择最力大砖飞的设计方式 Flex 弹性盒子。\",\"Flex 是一种非常暴力的设计方式，他可以让你轻松的将元素排列成你想要的样子，并且可以轻松的调整元素的大小和位置。\",\"首先，对于一个 div 元素，我们使用 display: flex 来将其设置为弹性盒子包装：\",\"div { display: flex; } \",\"然后，我们可以使用 flex-direction 属性来设置元素的排列方向，例如 row（水平排列）、column（垂直排列）等：\",\"<div style=\\\"display: flex; flex-direction: row; gap: 20px\\\"> <div style=\\\"display: flex; flex-direction: row; height: 24px; width: 80px; background-color: #6f106e; gap: 4px\\\"> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> </div> <div style=\\\"display: flex; flex-direction: column; height: 80px; width: 24px; background-color: #6f106e; gap: 4px\\\"> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> </div> </div> \",\"啊呀？你会发现，这些元素好像都歪在一边。\",\"不要紧！只要加上 align-items: center 和 justify-content: center 就行了：\",\"<div style=\\\"display: flex; flex-direction: row; gap: 20px\\\"> <div style=\\\"display: flex; flex-direction: row; height: 24px; width: 80px; background-color: #6f106e; gap: 4px; align-items: center; justify-content: center;\\\"> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> </div> <div style=\\\"display: flex; flex-direction: column; height: 80px; width: 24px; background-color: #6f106e; gap: 4px; align-items: center; justify-content: center;\\\"> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> </div> </div> \",\"justify-content 指的是水平方向上的对齐方式，align-items 指的是垂直方向上的对齐方式。如果你的 flex-direction 是 column，那么 justify-content 就是指垂直方向上的对齐方式，align-items 就是指水平方向上的对齐方式。\",\"如果一行不够你放下所有的元素，你可以试试 flex-wrap: wrap;：\",\"<div style=\\\"display: flex; flex-direction: row; gap: 20px;\\\"> <div style=\\\"display: flex; flex-direction: row; height: 52px; width: 52px; background-color: #6f106e; gap: 4px; align-items: center; justify-content: center; flex-wrap: wrap;\\\"> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> </div> <div style=\\\"display: flex; flex-direction: column; height: 52px; width: 52px; background-color: #6f106e; gap: 4px; align-items: center; justify-content: center; flex-wrap: wrap;\\\"> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> <div style=\\\"background-color: #fff; width: 24px; height: 24px\\\"></div> </div> </div> \"]},\"176\":{\"h\":\"盒子设计 & 布局精通\",\"t\":[\"我现在有一个 200x200 的 div，它什么设计都没有！这太难看了！\",\"<div style=\\\"width: 200px; height: 200px;\\\"></div> \",\"我如果想实现一个面板一样的，看上去像是悬浮起来一样的板块，应该用哪些东西呢？\",\"先给它来点颜色，为它加上 background-color: #6C6E72;：\",\"它的边缘似乎有些太尖锐了，给它加上个圆角 border-radius: 4px;：\",\"边框和背景颜色似乎又不是很有对比度，那加上一个边框吧 border: 1px solid #DCDFE6\",\"现在看起来已经不错了！但它还不够有 悬浮 的感觉，给它加上阴影或许会好一点？box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.8);\",\"这样看上去就好多了，如果你有一个好看的背景，你也可以尝试为背景色加上一定的透明度来提升观感。\"]},\"177\":{\"h\":\"margin & padding\",\"t\":[\"margin 和 padding 是两个非常常用的属性，它们分别控制着元素的外边距和内边距。\",\"<div style=\\\"display: flex; flex-direction: row; gap: 20px;\\\"> <div style=\\\"background-color: #6C6E72; width: 200px; height: 200px; border-radius: 4px; border: 1px solid #DCDFE6; box-shadow: 2px 4px 8px rgba(255, 255, 255, 0.8); margin-bottom: 20px; margin: 20px;\\\"></div> <div style=\\\"background-color: #6C6E72; width: 200px; height: 200px; border-radius: 4px; border: 1px solid #DCDFE6; box-shadow: 2px 4px 8px rgba(255, 255, 255, 0.8); margin-bottom: 20px; padding: 20px;\\\"></div> </div> \",\"如果你将 margin 设置为 auto，它将根据情况自行决定外边距的大小。\",\"比如，我们在这里设计一个导航栏：\",\"南京大学登录\",\"html 代码：\",\"<div class=\\\"header\\\"> <a class=\\\"header-logo\\\" href=\\\"https://www.nju.edu.cn\\\"> <img stc=\\\"https://www.nju.edu.cn/images/app-icon72x72@2x.png\\\" /> </a> <p class=\\\"header-title\\\"> 南京大学 </p> <button class=\\\"header-btn\\\"> 登录 </button> </div> \",\"css 代码：\",\".header { display: flex; align-items: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px; } .header-logo { width: 40px; height: 40px; margin-right: 10px; } .header-title { color: #111; font-size: 28px; margin: auto 0; } .header-btn { background-color: #6f106e; height: 40px; width: 80px; right: 0; margin-left: auto; border: none; border-radius: 4px; box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.8); } \",\"其中的按钮就是使用 auto 外边距实现的，首先指定它的 right 为 0，也就是靠最右边，但是你会发现它并没有靠到最右边，那是因为它的外边距决定了它距离左边的距离，而不设置的情况下，它是 0，与我们想要的结果冲突，所以我们需要将它的外边距设置为 auto，这样它就会自动调整外边距，使得它靠在最右边。\",\"大致了解这些内容之后，你应当对如何编写 CSS 有了更深入的了解。\"]},\"178\":{\"h\":\"动画\",\"t\":[\"如果你追求更强力的表现，你也可以尝试应用一些简单的动画。比如，我们可以让之前设计的那个卡片在鼠标悬浮时改变一些状态，使它看上去有鼠标移过去之后就浮起来的效果：\",\"对它应用 CSS：\",\"div { background-color: #FFFFFF; } div:hover { cursor: pointer; background-color: #F2F3F5; box-shadow: #E6E8EB; border: 1px solid #A8ABB2; transition: background-color .3s ease-in-out, box-shadow .3s ease-in-out, border .3s ease-in-out; } \",\"通过指定 hover 状态的一些属性，并借助 transition 属性来指定它的动画过程，我们可以实现一个简单的动画效果。\",\"其它动画效果可以自行查阅如何编写，找一个大模型（如 deepseek），跟它描述你的需求，它会告诉你的，只需要自行再调试修改一下就好了。\"]},\"179\":{\"c\":[\"Vue3 网络前端开发\"]},\"180\":{\"c\":[\"CSS\"]},\"181\":{\"h\":\"2. HTML 元素设计基础\",\"t\":[\"提示\",\"这里不准备提供最基础的 HTML 知识，而是针对 Vue 项目中常用的语法进行介绍。如果你真的一点 HTML 都不会，你可以前往 菜鸟教程 先行学习。\",\"跳过了 HTML 的基础知识，这里其实没多少好说的，主要明确一些概念。\"]},\"182\":{\"h\":\"尽量使用 或其它替代容器来包裹内容。\",\"t\":[\"打开浏览器中的一个网页，摁下你的 F12 键打开开发者工具，你会发现网页是由一个一个小方块组成的，这些小方块就是 HTML 元素，它们被 div 或其它元素包裹起来，形成一个树状结构，这就是 HTML 的基本结构。\",\"div 及类似容器起到一个包裹的作用，本身没有任何的样式，但可以包裹其它元素，并调整自己内部元素的排版，使用 div 包裹元素可以提高代码的可读性、可拓展性，并且可以方便地调整元素的位置。\",\"当然，任何事情都是有度的，如果你使用了大量的 div，那你大概一定是在做错事罢。\"]},\"183\":{\"h\":\"标签属性\",\"t\":[\"HTML 标签的属性可以用来控制标签的样式、行为等，比如 class、id、style、src、href 等。\"]},\"184\":{\"h\":\"class\",\"t\":[\"class 属性可以用来给元素添加一个或多个类名，类名可以用来控制元素的样式，也可以用来控制元素的交互行为。\",\"<div class=\\\"container\\\"> <h1 class=\\\"title\\\">Hello, world!</h1> <p class=\\\"content\\\">This is a paragraph.</p> </div> \"]},\"185\":{\"h\":\"id\",\"t\":[\"id 属性可以用来给元素添加一个唯一的标识符，id 属性的值必须是唯一的，不能重复。\",\"<div id=\\\"container\\\"> <h1 id=\\\"title\\\">Hello, world!</h1> <p id=\\\"content\\\">This is a paragraph.</p> </div> \"]},\"186\":{\"h\":\"style\",\"t\":[\"style 属性可以用来给元素添加内联样式，内联样式可以直接在标签中定义，也可以在 CSS 文件中定义。\",\"<div style=\\\"color: red;\\\">This is a div with inline style.</div> \"]},\"187\":{\"h\":\"src\",\"t\":[\"src 属性可以用来指定图片、音频、视频等资源的路径。\",\"<img src=\\\"image.jpg\\\" alt=\\\"Image\\\"> <audio src=\\\"audio.mp3\\\" controls></audio> <video src=\\\"video.mp4\\\" controls></video> \"]},\"188\":{\"h\":\"href\",\"t\":[\"href 属性可以用来指定链接的目标地址。\",\"<a href=\\\"https://www.example.com\\\">Visit Example.com</a> \"]},\"189\":{\"h\":\"标签应当尽量语义化\",\"t\":[\"HTML 标签的语义化是指使用合适的标签来表示内容的含义，而不是仅仅为了布局和样式。\",\"<h1>Heading</h1> <p>Paragraph</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul> \",\"对于页面特殊位置的内容，你也应当使用 div 以外的语义容器：\",\"<header>Header</header> <nav>Navigation</nav> <main>Main content</main> <footer>Footer</footer> \"]},\"190\":{\"c\":[\"Vue3 网络前端开发\"]},\"191\":{\"c\":[\"HTML\"]},\"192\":{\"h\":\"Vue3 网络前端开发 - 引言\",\"t\":[\"软件工程与计算 II 这门课程，在经过 cx 老师毫无感情的纯理论教学之后，第二年我们又迎来了 67 老师的强而有力的纯实践开发教学。\",\"然而，67 老师对于实践的要求历来极高，如果是第一次接触开发的同学，那么毫无基础的突然让你实践，就会感到十分痛苦。因为在课上并不会给你讲解项目中任何的代码，只会给你一个需求和一个示例项目，让你自己完成，一些简单的快速上手是有的，但是助教讲解的也并不是非常的清楚，而且ddl非常的短，直接导致整个学习过程十分的麻烦而且并不容易。\",\"所以，为了让大家能够顺利的完成课程，我决定写一个系列的文章，来帮助大家完成课程的开发任务。\",\"本教程将会尽量简短，一些用不上的内容就会略过不说，主要说需要用到的内容。\"]},\"193\":{\"c\":[\"Vue3 网络前端开发\"]},\"194\":{\"c\":[\"Vue3\",\"HTML\",\"CSS\",\"JavaScript\",\"TypeScript\"]},\"195\":{\"h\":\"5. 「智软新航道 多维发展赋能系列活动 第三期 项目技能分享--Vue 」\",\"t\":[\"提示\",\"这是在一次学术分享活动中，我分享的 Vue3 网络前端开发的 PPT 内容，主要介绍了 HTML 基础、CSS 基础和 Vue3 的基本概念、组件、路由、状态管理等，以及如何使用 Vue3 开发一个简单的网络前端应用。\",\"因为配置问题，PPT 中的代码高亮似乎丢失了，敬请谅解\",\"看不清的话，点击一下幻灯片后按 F 开启幻灯片全屏模式\",\"提示\",\"接下来是 CSS 基础部分讲完后示例环节中使用的两个例子的代码\",\"第一个是一个简单的上侧导航栏\",\"第二个是一个简单的登陆界面\",\"可以自行复制到别处查看效果\",\"<style> .header { display: flex; align-items: center; padding: 10px; background-color: #f0f0f0; border-radius: 4px; } .header-logo { width: 40px; height: 40px; margin-right: 10px; } .header-title { color: #111; font-size: 28px; margin: auto 0; } .header-btn { color: #eee; background-color: #6f106e; height: 40px; width: 80px; margin-left: auto; border: none; border-radius: 4px; box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.8); transition: all .3s ease-in-out; } .header-btn:hover { cursor: pointer; background-color: #5d0b5d; box-shadow: 2px 4px 8px rgb(0, 0, 0); transform: translateY(-1px); } .header-btn:active { background-color: #4b0a4b; box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.6); transform: translateY(1px); } </style> <nav class=\\\"header\\\"> <a class=\\\"header-logo\\\" href=\\\"https://www.nju.edu.cn\\\"> <img src=\\\"./assets/nju-icon.png\\\" /> </a> <p class=\\\"header-title\\\"> 南京大学 </p> <button class=\\\"header-btn\\\"> 登录 </button> </nav> \",\"<style> html { font-size: 2vw; } .bg-img { position: fixed; left: 0; width: 100vw; height: auto; } .main-container { position: fixed; left: 0; width: 100vw; height: calc(100vw / 16 * 9); display: flex; flex-direction: column; align-items: center; justify-content: center; } .login-panel { width: 80%; height: 75%; background-color: rgba(0, 0, 0, 0.6); display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 16px; border-radius: 0.5rem; box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.6); backdrop-filter: blur(8px); } .login-title { margin-bottom: 2rem; font-size: 2rem; color: white; text-shadow: 1px 2px 8px rgba(255, 255, 255, 0.5); } .input-item { display: flex; align-items: center; margin-bottom: 1rem; } .input-label { text-align: left; width: 5rem; font-size: 1rem; color: white; text-shadow: 1px 2px 8px rgba(255, 255, 255, 0.5); } .input { border: 2px solid rgba(255, 255, 255, 0.6); background-color: #131313; font-size: 0.8rem; height: min-content; padding: 5px 10px; border-radius: 4px; box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.8); transition: all .3s ease; width: 16rem; } .input:focus { border: 2px solid #409eff; box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.6); } .login-content { display: flex; flex-direction: column; align-items: center; } </style> <img class=\\\"bg-img\\\" src=\\\"./assets/background-image.jpg\\\" /> <main class=\\\"main-container\\\"> <div class=\\\"login-panel\\\"> <div class=\\\"login-content\\\"> <p class=\\\"login-title\\\">登录</p> <div class=\\\"input-item\\\"> <label class=\\\"input-label\\\">用户名</label> <input class=\\\"input\\\" type=\\\"text\\\" placeholder=\\\"请输入用户名\\\" /> </div> <div class=\\\"input-item\\\"> <label class=\\\"input-label\\\">密码</label> <input class=\\\"input\\\" type=\\\"password\\\" placeholder=\\\"请输入密码\\\" /> </div> </div> </div> </main> \"]},\"196\":{\"c\":[\"Vue3 网络前端开发\"]},\"197\":{\"c\":[\"Vue3\",\"HTML\",\"CSS\",\"JavaScript\",\"TypeScript\",\"Reveal.js\"]},\"198\":{\"h\":\"1. Vue3 简介\",\"t\":[\"提示\",\"你知道吗？Vue.js 的官方文档实际上也非常不错！你可以通过这个链接学习如何使用 node.js 包管理器创建 Vue 项目！\",\"Vue 是一款非常火爆的前端项目框架，它基于标准HTML、CSS和JavaScript构建，并提供了一套声明式的、组件化的编程模型，可以高效地开发用户界面。无论是简单还是复杂的界面，Vue都可以胜任。是目前生产环境中使用最广泛的JavaScript框架之一。\",\"提示\",\"在这里以 JavaScript 为例，TypeScript 的使用方式与 JavaScript 基本一致，只是它的静态语法属性更强，你需要为每个变量标注变量类型，但你可以通过使用 any 类型来跳过这个过程~~（所以这个语言也被称为 AnyScript）~~。\",\"它的项目结构大致如下：\",\". ├── index.html ├── jsconfig.json ├── package.json ├── package-lock.json ├── public/ │ └── favicon.ico ├── src/ │ ├── App.vue │ ├── assets/ │ │ ├── base.css │ │ └── main.css │ ├── components/ │ ├── main.js │ ├── router/ │ │ └── index.js │ └── views/ └── vite.config.js \",\"让我们来简单地过一下这个目录结构，只挑比较重要的部分说：\",\"vite.config.js: 这是 Vite 的配置文件，用于配置 Vite 的行为，比如端口、代理等，在这里我们不接触这个部分。\",\"package.json、package-lock.json: 这是 Node.js 的包管理器 npm 的配置文件，用于管理项目的依赖和项目的启动命令，通过观察这个文件就能看懂，这里不重复叙述了。\",\"index.html: 这就是你认为的那个 主页，仔细观察其中的代码就会发现：\",\"<!-- index.html --> <!DOCTYPE html> <html lang=\\\"en\\\" class=\\\"dark\\\"> <head> <meta charset=\\\"UTF-8\\\"> <link rel=\\\"icon\\\" href=\\\"/favicon.ico\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>NYPT</title> </head> <body> <div id=\\\"app\\\"></div> <script type=\\\"module\\\" src=\\\"/src/main.js\\\"></script> </body> </html> \",\"在 body 元素中，你会找到一个 id=\\\"app\\\" 的 div 标签，这个时候我们将它与 main.js 关联起来：\",\"// main.js // 这里默认你创建项目时选择了使用 vue-router import './assets/main.css' import { createApp } from 'vue' import App from './App.vue' import router from './router' const app = createApp(App) app.use(router) app.mount('#app') \",\"可以看到，它通过 createApp 创建了一个 Vue 实例，并且使用 app.use 方法注册了 router，最后通过 app.mount 方法将 Vue 实例挂载到 id=\\\"app\\\" 的 div 标签上，也就是我们之前提到的那个。\",\"至此，我们已经将 Vue 的 app 实例挂载到页面上了，但是，现在页面上还是空空如也，我们应当怎样编写页面呢？\",\"我们首先先需要了解 .vue 文件的结构，理论上，一个空的 .vue 文件不是完全空的，它应当长这样：\",\"<script setup> </script> <template> </template> <style scoped> </style> \",\"你会发现，其中分为 script、template、style 三个部分，它们分别对应了 Vue 中的三个核心概念：组件、模板、样式。\",\"script: 这是 Vue 组件的逻辑部分，你可以在这里编写组件的逻辑代码，比如数据、方法、生命周期钩子等。如果你在 script 之后加上了 setup，这证明你想要使用 组合式 API，否则，证明你想要使用 选项式 API，我们软工 II 的实例项目就是使用的组合式 API，它的逻辑性更好，更灵活，也更易读，一般也建议使用组合式 API。\",\"提示\",\"每个 *.vue 文件最多可以包含一个 <script setup>。(不包括一般的 <script>)\",\"template: 这是 Vue 组件的模板部分，你可以在这里编写组件的 HTML 代码，比如标签、属性、事件等。在 Vue 中，模板是声明式的，也就是说，你只需要关注你想要展示的内容，而无需关注如何展示，Vue 会自动为你处理。\",\"提示\",\"每个 *.vue 文件最多可以包含一个顶层<template> 块。\",\"style: 这是 Vue 组件的样式部分，你可以在这里编写组件的 CSS 代码，比如选择器、属性、伪类等。在 Vue 中，如果你在 style 之后使用了 scoped，这说明你定义的样式是作用域的，也就是说，你编写的样式只会作用到当前文件中的模板设计，而不会影响到其他组件，否则，style 块将会对全局生效。\",\"提示\",\"每个 *.vue 文件可以包含多个 <style> 标签。\",\"一般来说，组件内部建议都使用 <style scoped>，如果你需要设计全局生效的 CSS，你可以在 src/assets 中修改 base.css 或者 main.css。\",\"了解了 .vue 文件的结构之后，我们再来看项目的主体内容：\",\"App.vue: 这是项目的根组件，之前 main.js 中的 createApp 你会发现，其中塞的就是这个文件，它的模板部分将会被渲染到 index.html 中的 id=\\\"app\\\" 的 div 标签中：\",\"// App.vue <script setup> import { RouterView } from 'vue-router' </script> <template> <RouterView /> </template> \",\"一般来说，你只需要这样编写你的 App.vue 就好了，因为 vue-router 会自动帮你处理路由，在不同的路由下，<RouterView /> 元素将会自动为你渲染不同的内容。\",\"views/ 和 components/ 文件夹：这里就是编写你的页面和组件的地方，字面意思来看，views/ 文件夹下存放的是页面，components/ 文件夹下存放的是组件，你可以以你自己的理解来存放。不过一般来说，views/ 文件夹下存放的是某一个路由的整体设计，components/ 文件夹下存放的是一些可以在多个页面或者同一页面上多次复用的组件。\",\"src/router/index.js: 你需要在这里配置你的 vue-router 路由，它将自动根据你浏览器中输入的地址路由来选择展示的内容，例如我们模板项目中的 router 配置：\",\"import {createRouter, createWebHashHistory} from \\\"vue-router\\\" const router = createRouter({ history: createWebHashHistory(), routes: [{ path: '/', redirect: '/login', }, { path: '/login', component: () => import('../views/user/Login.vue'), meta: {title: '用户登录'} }, { path: '/register', component: () => import('../views/user/Register.vue'), meta: {title: '用户注册'} }, { path: '/home', redirect: '/dashboard', component: () => import('../views/Home.vue'), children: [ { path: '/dashboard', name: 'Dashboard', component: () => import('../views/user/Dashboard.vue'), meta: {title: '个人信息'} }, ] }, { path: '/404', name: '404', component: () => import('../views/NotFound.vue'), meta: {title: '404'} }, { path: '/:catchAll(.*)', redirect: '/404' }] }) router.beforeEach((to, _, next) => { const token: string | null = sessionStorage.getItem('token'); const role: string | null = sessionStorage.getItem('role') if (to.meta.title) { document.title = to.meta.title } if (token) { if (to.meta.permission) { if (to.meta.permission.includes(role!)) { next() } else { next('/404') } } else { next() } } else { if (to.path === '/login') { next(); } else if (to.path === '/register') { next() } else { next('/login') } } }) export {router} \",\"其中，你会发现，配置了每个路由所对应的 views 文件夹中的页面，并将剩余未定义的路由都重定向到 404 页面，并且，在路由跳转之前添加了拦截器，会检查当前用户是否已经登录，如果已经登录，则根据用户的权限来决定是否可以访问该页面，否则，重定向到登录页面。\",\"这里还有高手进阶用法，其中 /home 页面为它指定了 children\",\"如果打开 /home 对应页面的 .vue 文件，你就会发现原因：\",\"// src/views/Home.vue <script setup lang=\\\"ts\\\"> import Header from \\\"../components/Header.vue\\\" </script> <template> <Header/> <router-view /> </template> <style scoped> </style> \",\"在这里首先放上了 Header 子组件，并在之后添加 router-view，表明先渲染一个 Header，再渲染子路由的具体内容，这样编写，如果你访问 /dashboard，你会发现，原先的 dashboard 设计中并未包含 Header，但是，因为 Home.vue 中已经包含 Header，所以，Header 会被渲染到 dashboard 的页面中。\",\"提示\",\"meta 字段指定了页面的元数据，你可以在其中添加一些你需要的字段，例如 title，permission 等，在 router.beforeEach 中，你可以根据这些字段来处理跳转逻辑。\",\"这样，你应该对 Vue 项目结构和每个部分的作用有一定的具体了解了，接下来，你将学习一些有关页面元素设计的基础内容，以及网络请求的一些必需知识，以方便你之后的作业开发。\"]},\"199\":{\"c\":[\"Vue3 网络前端开发\"]},\"200\":{\"c\":[\"Vue3\",\"HTML\",\"CSS\",\"JavaScript\",\"TypeScript\"]},\"201\":{\"h\":\"4. Vue3 script & Axios\",\"t\":[\"提示\",\"对于 Vue3 的 script 常用语法，显然 Vue3 互动教程 是最好的学习方式，建议你去那里学习。\",\"对于 Element-Plus 的组件样式和用法查询，你应当前往 Element-Plus 官网 阅读。\",\"在这里我们仅对一些易错点介绍，比如需要掌握的 Axios 网络请求库的用法介绍，它与你认知当中的顺序执行不太一样，也就是 Promise 的问题。\"]},\"202\":{\"h\":\"Axios\",\"t\":[\"在浏览器中，所有的网络请求都是异步的。\",\"异步 这个概念在操作系统中也有学到，就是 协程 的概念，程序本身还是只有一个线程，但是可能会有多个协程同时运行，在一个协程中，你可能完成了一些事情，在需要等待响应或者等待其他协程的时候，程序会切换到另一个协程，等另一个协程完成之后，再切换回来。\",\"Axios 发起的网络请求也是这样，当你使用类似 Axios.get 的方法时，它会立即返回一个 Promise 对象，但是这个 Promise 对象并不会立即得到结果，而是会等待网络请求完成之后，才会得到结果。\",\"对于一个 Promise 对象，你可以这样使用它：\",\"Axios.get('/api/user').then((response) => { console.log(response.data); }).catch((error) => { console.error(error); }); \",\"在这个例子中，Axios.get 方法会立即返回一个 Promise 对象，然后我们使用 then 方法来处理这个 Promise 对象的结果，如果网络请求成功，那么 then 方法中的回调函数会被调用，并且 response 参数会包含服务器返回的数据（也就是 Promise<> 尖括号中的类型）；如果网络请求失败，那么 catch 方法中的回调函数会被调用，并且 error 参数会包含错误信息。\",\"意识到问题所在了吗？如果你写了这样一段代码：\",\"const fetch = () => { let result = null; Axios.get('/api/user').then((response) => { result = response.data; }).catch((error) => { console.error(error); }); // 假设这里你想要使用 result 的结果 console.log(result); } \",\"当你运行这段内容时，你会在开发者工具中开心地发现你请求成功了，并且返回的答案也正确，但是控制台中输出的 result 却是 null，因为 Axios.get 方法是异步的，它会立即返回一个 Promise 对象，但是并不会立即得到结果，所以 result 的值仍然是 null。\",\"那么，如何解决这个问题呢？我们可以使用 async/await 语法，它会等待 Promise 对象的结果，然后再继续执行后面的代码：\",\"const fetch = async () => { let result = null; await Axios.get('/api/user').then((response) => { result = response.data; }).catch((error) => { console.error(error); }) console.log(result); } \",\"或者，你可以直接脱去 then 和 catch，直接使用 await：\",\"const fetch = async () => { let result = null; try { result = await Axios.get('/api/user'); } catch (error) { console.error(error); } console.log(result); } \",\"这样，你就可以愉快地进行网络请求了。\",\"你也许会发现，Axios 发送的请求都是互相独立的，如果后端服务器尝试设置你的 cookie，或者你想让自己的每一条请求都附带登录信息，它总是会丢失，这应当怎么办呢？\",\"Axios 提供了 axios.create() 方法，供你创建一个 axios 实例，像这样：\",\"const instance = axios.create({ baseURL: 'https://some-domain.com/api/', // 设置请求的根路径 timeout: 1000, // 设置请求超时时间 withCredentials: true, // 允许跨域请求携带 cookie }); \",\"当然，还有其它的设置项，这里仅举例\",\"同时，作为一个合格的网络请求模块，你也可以为这个实例创建 请求拦截器 和 响应拦截器：\",\" //当前实例的拦截器，对所有要发送给后端的请求进行处理，在其中加入token instance.interceptors.request.use( config => { if(hasToken()) { config.headers['token'] = sessionStorage.getItem('token') } return config }, error => { console.log(error); return Promise.reject(); } ) //当前实例的拦截器，对所有从后端收到的请求进行处理，检验http的状态码 instance.interceptors.response.use( response => { if (response.status === 200) { return response; } else { return Promise.reject(); } }, error => { console.log(error); return Promise.reject(); } ) \",\"你可以创建一个文件，默认导出这个 axios 实例，在其它地方都不使用 axios 包本身而使用这个实例即可。\"]},\"203\":{\"h\":\"和\",\"t\":[\"在 JavaScript 中，function 和 箭头函数 是两种不同的函数定义方式，它们在语法和功能上都有一些区别。\",\"function 是标准的函数定义方式，它有函数名，可以接受参数，并且可以返回值。例如：\",\"function add(a, b) { return a + b; } \",\"箭头函数 是 ES6 引入的一种新的函数定义方式，它没有函数名，只能接受参数，并且可以返回值。例如：\",\"const add = (a, b) => { return a + b; }; \",\"箭头函数和普通函数的主要区别在于 this 的指向。在普通函数中，this 的指向取决于函数的调用方式，而在箭头函数中，this 的指向是固定的，始终指向函数定义时的上下文。例如：\",\"function Person() { this.age = 0; setInterval(function growUp() { this.age++; // 这里的 this 指向的是全局对象 }, 1000); } const person = new Person(); \",\"在上面的例子中，growUp 函数是一个普通函数，它的 this 指向的是全局对象，而不是 Person 实例。因此，this.age 的值始终是 undefined。\",\"如果我们将 growUp 函数改为箭头函数，那么 this 的指向就会始终指向 Person 实例：\",\"function Person() { this.age = 0; setInterval(() => { this.age++; // 这里的 this 指向的是 Person 实例 }, 1000); } const person = new Person(); \",\"提示\",\"如果上面的说法你看不懂，那这里可以说人话：\",\"function 定义的函数只能访问全局定义的变量和方法\",\"箭头函数 定义的函数同时可以访问上下文中定义的变量和方法\",\"因此，一般建议使用 箭头函数 而非 function\"]},\"204\":{\"c\":[\"Vue3 网络前端开发\"]},\"205\":{\"c\":[\"JavaScript\",\"TypeScript\"]},\"206\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"207\":{\"h\":\"CPL Dot OJ 补完计划\"},\"208\":{\"h\":\"C 语言学习分享\"},\"209\":{\"h\":\"C SFML 游戏开发\"},\"210\":{\"h\":\"CPL Remake\"},\"211\":{\"h\":\"Vue3 网络前端开发\"}},\"dirtCount\":0,\"index\":[[\"始终指向函数定义时的上下文\",{\"1\":{\"203\":1}}],[\"引入的一种新的函数定义方式\",{\"1\":{\"203\":1}}],[\"引言其实没啥好说的\",{\"1\":{\"85\":1}}],[\"引言\",{\"0\":{\"85\":1,\"192\":1}}],[\"箭头函数和普通函数的主要区别在于\",{\"1\":{\"203\":1}}],[\"箭头函数\",{\"1\":{\"203\":4}}],[\"默认导出这个\",{\"1\":{\"202\":1}}],[\"默认是\",{\"1\":{\"116\":1}}],[\"检验http的状态码\",{\"1\":{\"202\":1}}],[\"检查起来好检查\",{\"1\":{\"5\":1}}],[\"响应拦截器\",{\"1\":{\"202\":1}}],[\"允许跨域请求携带\",{\"1\":{\"202\":1}}],[\"供你创建一个\",{\"1\":{\"202\":1}}],[\"供大家为本周的oj困难挑战做准备练习\",{\"1\":{\"2\":1}}],[\"却是\",{\"1\":{\"202\":1}}],[\"意识到问题所在了吗\",{\"1\":{\"202\":1}}],[\"意思到了\",{\"1\":{\"31\":1}}],[\"尖括号中的类型\",{\"1\":{\"202\":1}}],[\"尖括号里的文件\",{\"1\":{\"91\":1}}],[\"才会得到结果\",{\"1\":{\"202\":1}}],[\"才能一层一层递归\",{\"1\":{\"23\":1}}],[\"程序会切换到另一个协程\",{\"1\":{\"202\":1}}],[\"程序本身还是只有一个线程\",{\"1\":{\"202\":1}}],[\"程序了\",{\"1\":{\"58\":1}}],[\"协程\",{\"1\":{\"202\":1}}],[\"异步\",{\"1\":{\"202\":1}}],[\"异或运算\",{\"1\":{\"8\":1}}],[\"网络请求库的用法介绍\",{\"1\":{\"201\":1}}],[\"网络前端开发的\",{\"1\":{\"195\":1}}],[\"网络前端开发\",{\"0\":{\"192\":1,\"211\":1},\"2\":{\"179\":1,\"190\":1,\"193\":1,\"196\":1,\"199\":1,\"204\":1}}],[\"阅读\",{\"1\":{\"201\":1}}],[\"互动教程\",{\"1\":{\"201\":1}}],[\"表明先渲染一个\",{\"1\":{\"198\":1}}],[\"表示需要走多少步到达终点\",{\"1\":{\"149\":1}}],[\"表示迷宫的布局\",{\"1\":{\"149\":1}}],[\"表示迷宫的大小\",{\"1\":{\"149\":1}}],[\"表示要输出的字符的\",{\"1\":{\"123\":1}}],[\"表示保留小数的位数\",{\"1\":{\"121\":1}}],[\"表示单引号\",{\"1\":{\"121\":1}}],[\"表示双引号\",{\"1\":{\"121\":1}}],[\"表示制表符\",{\"1\":{\"121\":1}}],[\"表示换行符\",{\"1\":{\"121\":2}}],[\"表示输出的位数\",{\"1\":{\"121\":2}}],[\"表示输出文件名\",{\"1\":{\"94\":1}}],[\"表示输入输出一个字符串\",{\"1\":{\"120\":1}}],[\"表示输入输出一个字符\",{\"1\":{\"120\":1}}],[\"表示输入输出一个浮点数\",{\"1\":{\"120\":1}}],[\"表示输入输出一个整数\",{\"1\":{\"120\":1}}],[\"表示取地址\",{\"1\":{\"120\":1}}],[\"表示将读取的数据存储到\",{\"1\":{\"120\":1}}],[\"表示读取一个浮点数\",{\"1\":{\"120\":1}}],[\"表示读取一个整数\",{\"1\":{\"120\":1}}],[\"表示可以接受任意数量的参数\",{\"1\":{\"120\":1,\"121\":1}}],[\"表示为负数\",{\"1\":{\"106\":1}}],[\"表示正数\",{\"1\":{\"106\":1}}],[\"表示负数\",{\"1\":{\"106\":2}}],[\"表示当前文件夹\",{\"1\":{\"94\":1}}],[\"表示这是\",{\"1\":{\"27\":1}}],[\"表示这非常的难以置信\",{\"1\":{\"23\":1}}],[\"表示\",{\"1\":{\"23\":1,\"134\":9,\"148\":1}}],[\"表示函数真的很好用\",{\"1\":{\"17\":1}}],[\"表示第二行代码根本不想看\",{\"1\":{\"5\":1}}],[\"表示我们想要读入一个整型\",{\"1\":{\"2\":1}}],[\"子组件\",{\"1\":{\"198\":1}}],[\"重定向到登录页面\",{\"1\":{\"198\":1}}],[\"页面为它指定了\",{\"1\":{\"198\":1}}],[\"页面\",{\"1\":{\"198\":1}}],[\"页面元素设计基础\",{\"0\":{\"173\":1}}],[\"字段指定了页面的元数据\",{\"1\":{\"198\":1}}],[\"字面意思来看\",{\"1\":{\"198\":1}}],[\"字符作为结尾标识\",{\"1\":{\"165\":1}}],[\"字符串需要一个\",{\"1\":{\"165\":1}}],[\"字符串等\",{\"1\":{\"99\":1}}],[\"字符需要用单引号\",{\"1\":{\"116\":1}}],[\"字符型\",{\"0\":{\"115\":1},\"1\":{\"103\":1}}],[\"伪类等\",{\"1\":{\"198\":1}}],[\"伪类选择器\",{\"1\":{\"174\":1}}],[\"块将会对全局生效\",{\"1\":{\"198\":1}}],[\"块\",{\"1\":{\"198\":1}}],[\"事件等\",{\"1\":{\"198\":1}}],[\"事实上我们还并没有将\",{\"1\":{\"58\":1}}],[\"选项式\",{\"1\":{\"198\":1}}],[\"选择所有具有\",{\"1\":{\"174\":1}}],[\"选择页面中具有指定状态的元素\",{\"1\":{\"174\":1}}],[\"选择页面中具有指定属性的元素\",{\"1\":{\"174\":1}}],[\"选择页面中具有指定\",{\"1\":{\"174\":1}}],[\"选择页面中所有具有指定类名的元素\",{\"1\":{\"174\":1}}],[\"选择页面中的所有指定元素\",{\"1\":{\"174\":1}}],[\"选择器可以组合使用\",{\"1\":{\"174\":1}}],[\"选择器是\",{\"1\":{\"174\":1}}],[\"选择器\",{\"0\":{\"174\":1},\"1\":{\"174\":1}}],[\"选择方向一路走到撞墙\",{\"1\":{\"149\":1}}],[\"选择执行对应的\",{\"1\":{\"136\":1}}],[\"选择\",{\"1\":{\"86\":1}}],[\"选择上课提到的三个比较经典的问题\",{\"1\":{\"23\":1}}],[\"证明你想要使用\",{\"1\":{\"198\":1}}],[\"生命周期钩子等\",{\"1\":{\"198\":1}}],[\"生成之后的数据\",{\"1\":{\"52\":1}}],[\"样式\",{\"1\":{\"198\":1}}],[\"样例在本地跑的是对的\",{\"1\":{\"46\":1}}],[\"模板是声明式的\",{\"1\":{\"198\":1}}],[\"模板\",{\"1\":{\"198\":1}}],[\"理论上\",{\"1\":{\"198\":1}}],[\"理论上应该只需要占用\",{\"1\":{\"118\":1}}],[\"创建了一个\",{\"1\":{\"198\":1}}],[\"仔细观察其中的代码就会发现\",{\"1\":{\"198\":1}}],[\"仔细观察每道题的标题\",{\"1\":{\"55\":1}}],[\"└──\",{\"1\":{\"198\":5}}],[\"│\",{\"1\":{\"198\":13}}],[\"├──\",{\"1\":{\"198\":12}}],[\"基本一致\",{\"1\":{\"198\":1}}],[\"基础部分讲完后示例环节中使用的两个例子的代码\",{\"1\":{\"195\":1}}],[\"基础和\",{\"1\":{\"195\":1}}],[\"基础\",{\"1\":{\"195\":1}}],[\"基础又经典的游戏结构理解\",{\"0\":{\"64\":1}}],[\"点击一下幻灯片后按\",{\"1\":{\"195\":1}}],[\"敬请谅解\",{\"1\":{\"195\":1}}],[\"状态管理等\",{\"1\":{\"195\":1}}],[\"状态的一些属性\",{\"1\":{\"178\":1}}],[\"路由\",{\"1\":{\"195\":1,\"198\":1}}],[\"组合式\",{\"1\":{\"198\":1}}],[\"组件内部建议都使用\",{\"1\":{\"198\":1}}],[\"组件的样式部分\",{\"1\":{\"198\":1}}],[\"组件的模板部分\",{\"1\":{\"198\":1}}],[\"组件的逻辑部分\",{\"1\":{\"198\":1}}],[\"组件化的编程模型\",{\"1\":{\"198\":1}}],[\"组件\",{\"1\":{\"195\":1,\"198\":1}}],[\"组成\",{\"1\":{\"133\":1}}],[\"智软新航道\",{\"0\":{\"195\":1}}],[\"软件工程与计算\",{\"1\":{\"192\":1}}],[\"软件仓库索引镜像使用帮助\",{\"1\":{\"86\":1}}],[\"视频等资源的路径\",{\"1\":{\"187\":1}}],[\"任何事情都是有度的\",{\"1\":{\"182\":1}}],[\"及类似容器起到一个包裹的作用\",{\"1\":{\"182\":1}}],[\"形成一个树状结构\",{\"1\":{\"182\":1}}],[\"形成一个整体\",{\"1\":{\"27\":1}}],[\"键打开开发者工具\",{\"1\":{\"182\":1}}],[\"摁下你的\",{\"1\":{\"182\":1}}],[\"尽量使用\",{\"0\":{\"182\":1}}],[\"尽量加上括号\",{\"1\":{\"8\":1}}],[\"主要介绍了\",{\"1\":{\"195\":1}}],[\"主要说需要用到的内容\",{\"1\":{\"192\":1}}],[\"主要明确一些概念\",{\"1\":{\"181\":1}}],[\"主页\",{\"0\":{\"0\":1},\"1\":{\"198\":1}}],[\"跳过了\",{\"1\":{\"181\":1}}],[\"跳过内部的操作\",{\"1\":{\"133\":1}}],[\"知识\",{\"1\":{\"181\":1}}],[\"知道确定的答案之后\",{\"1\":{\"23\":1}}],[\"知道各位同学已经学过了if和for还有while\",{\"1\":{\"5\":1}}],[\"知道了这一点点东西\",{\"1\":{\"2\":1}}],[\"跟它描述你的需求\",{\"1\":{\"178\":1}}],[\"外边距实现的\",{\"1\":{\"177\":1}}],[\"登录\",{\"1\":{\"177\":1,\"195\":1}}],[\"南京大学\",{\"1\":{\"177\":1,\"195\":1}}],[\"南京大学登录\",{\"1\":{\"177\":1}}],[\"南哪2022\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1}}],[\"南哪\",{\"0\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"26\":1,\"31\":1,\"34\":1,\"37\":1},\"1\":{\"128\":2,\"142\":3,\"151\":3}}],[\"设置请求超时时间\",{\"1\":{\"202\":1}}],[\"设置请求的根路径\",{\"1\":{\"202\":1}}],[\"设置为\",{\"1\":{\"177\":1}}],[\"设计中并未包含\",{\"1\":{\"198\":1}}],[\"设计可以使你的页面如虎添翼\",{\"1\":{\"173\":1}}],[\"悬浮\",{\"1\":{\"176\":1}}],[\"悬空指针可能导致程序崩溃或产生不可预测的行为\",{\"1\":{\"166\":1}}],[\"悬空指针\",{\"1\":{\"166\":1}}],[\"边框和背景颜色似乎又不是很有对比度\",{\"1\":{\"176\":1}}],[\"边界条件\",{\"1\":{\"149\":2}}],[\"边界条件是什么\",{\"1\":{\"23\":1}}],[\"边界条件会出手\",{\"1\":{\"20\":1}}],[\"盒子设计\",{\"0\":{\"176\":1}}],[\"盒模型\",{\"1\":{\"173\":1}}],[\"垂直排列\",{\"1\":{\"175\":1}}],[\"水平排列\",{\"1\":{\"175\":1}}],[\"弹性盒子\",{\"1\":{\"175\":1}}],[\"变成\",{\"1\":{\"174\":1}}],[\"变量中\",{\"1\":{\"120\":2,\"122\":1}}],[\"变量名一般使用大写字母\",{\"1\":{\"102\":1}}],[\"变量名一般使用小写字母\",{\"1\":{\"102\":1}}],[\"变量命名我们一般遵循以下规则\",{\"1\":{\"102\":1}}],[\"变量需要先声明才能够被使用\",{\"1\":{\"100\":1}}],[\"变量可以被声明\",{\"1\":{\"99\":1}}],[\"变量可以存储各种类型的数据\",{\"1\":{\"99\":1}}],[\"变量是用来存储数据的容器\",{\"1\":{\"99\":1}}],[\"变量是一个可以被改变的量\",{\"1\":{\"99\":1}}],[\"变量和数据类型\",{\"0\":{\"98\":1}}],[\"变量和一个大小为\",{\"1\":{\"43\":1,\"158\":1}}],[\"变量的命名规则\",{\"0\":{\"102\":1}}],[\"变量的作用域表示该变量在程序中可以被正确访问的范围\",{\"1\":{\"100\":1}}],[\"变量的作用域\",{\"0\":{\"100\":1}}],[\"变量的指针没有区别\",{\"1\":{\"43\":1,\"158\":1}}],[\"变量的存储位置\",{\"1\":{\"37\":1}}],[\"变量的值\",{\"1\":{\"37\":1}}],[\"变量只有\",{\"1\":{\"5\":1}}],[\"变量存了\",{\"1\":{\"5\":1}}],[\"变量\",{\"0\":{\"99\":1},\"1\":{\"2\":1}}],[\"前面加上一个空格\",{\"1\":{\"174\":1}}],[\"前者表示赋值\",{\"1\":{\"134\":1}}],[\"元素将会自动为你渲染不同的内容\",{\"1\":{\"198\":1}}],[\"元素中\",{\"1\":{\"198\":1}}],[\"元素设计基础\",{\"0\":{\"181\":1}}],[\"元素\",{\"1\":{\"174\":1,\"175\":1,\"182\":1}}],[\"元素选择器\",{\"1\":{\"174\":1}}],[\"鼠标悬停\",{\"1\":{\"174\":1}}],[\"动画\",{\"0\":{\"178\":1}}],[\"动画等\",{\"1\":{\"173\":1}}],[\"动态规划等\",{\"1\":{\"150\":1}}],[\"动态数组\",{\"0\":{\"34\":1},\"1\":{\"34\":2}}],[\"动态创建\",{\"1\":{\"27\":1}}],[\"布局精通\",{\"0\":{\"176\":1}}],[\"布局设计\",{\"0\":{\"175\":1}}],[\"布局\",{\"1\":{\"173\":1}}],[\"布尔型\",{\"0\":{\"117\":1},\"1\":{\"103\":1}}],[\"该指针仍然保留对已释放内存的引用\",{\"1\":{\"166\":1}}],[\"防止悬空指针\",{\"1\":{\"165\":1}}],[\"防止内存泄漏\",{\"1\":{\"73\":1}}],[\"吃饭等\",{\"1\":{\"165\":1}}],[\"方法是异步的\",{\"1\":{\"202\":1}}],[\"方法中的回调函数会被调用\",{\"1\":{\"202\":2}}],[\"方法来处理这个\",{\"1\":{\"202\":1}}],[\"方法会立即返回一个\",{\"1\":{\"202\":1}}],[\"方法将\",{\"1\":{\"198\":1}}],[\"方法注册了\",{\"1\":{\"198\":1}}],[\"方法\",{\"1\":{\"165\":2,\"198\":1,\"202\":1}}],[\"方便我们应对未知数据量的问题\",{\"1\":{\"34\":1}}],[\"性别等\",{\"1\":{\"165\":1}}],[\"什么是悬空指针\",{\"0\":{\"166\":1}}],[\"什么是对象\",{\"0\":{\"165\":1}}],[\"什么是变量\",{\"1\":{\"99\":1}}],[\"恰恰是这种方法\",{\"1\":{\"164\":1}}],[\"恰好完成了其中一道期末项目的要求\",{\"1\":{\"49\":1}}],[\"配合\",{\"1\":{\"164\":1}}],[\"配置了每个路由所对应的\",{\"1\":{\"198\":1}}],[\"配置\",{\"1\":{\"58\":1,\"198\":1}}],[\"调用了\",{\"1\":{\"159\":1}}],[\"调转搜索方向的顺序也能削减搜索空间\",{\"1\":{\"149\":1}}],[\"图等\",{\"1\":{\"150\":1}}],[\"图中有一些障碍物\",{\"1\":{\"20\":1}}],[\"逐步计算\",{\"1\":{\"150\":1}}],[\"逐步求解问题的方法\",{\"1\":{\"150\":1}}],[\"反而更好理解\",{\"1\":{\"150\":1}}],[\"反而不必担心输入的格式问题\",{\"1\":{\"120\":1}}],[\"递推和递归是两种不同的算法思想\",{\"1\":{\"150\":1}}],[\"递推更加具体\",{\"1\":{\"150\":1}}],[\"递推\",{\"0\":{\"150\":1}}],[\"递归在处理一些具有递归性质的问题时\",{\"1\":{\"150\":1}}],[\"递归是将大问题拆分为小问题\",{\"1\":{\"150\":1}}],[\"递归是一种非常强大的算法思想\",{\"1\":{\"149\":1}}],[\"递归\",{\"0\":{\"148\":1}}],[\"递归和递推\",{\"0\":{\"145\":1}}],[\"递归的终止条件\",{\"1\":{\"148\":1}}],[\"递归的终止条件有没有写完整\",{\"1\":{\"55\":1}}],[\"递归的题目确实有点抽象\",{\"1\":{\"23\":1}}],[\"递归真的很好用\",{\"1\":{\"23\":1}}],[\"递归中的错误很可能让人摸不着头脑\",{\"1\":{\"20\":1}}],[\"②\",{\"1\":{\"149\":3}}],[\"①\",{\"1\":{\"149\":3}}],[\"秒之内最多只能执行\",{\"1\":{\"149\":1}}],[\"种可能的情况\",{\"1\":{\"149\":1}}],[\"向四个方向搜索\",{\"1\":{\"149\":2}}],[\"向编译器告知\",{\"1\":{\"27\":1}}],[\"搜搜你的\",{\"0\":{\"149\":1}}],[\"搜索即可\",{\"1\":{\"86\":1}}],[\"搜索下一位\",{\"1\":{\"20\":1}}],[\"搜索的题目一开始做会有一点点难理解\",{\"1\":{\"20\":1}}],[\"搜索\",{\"0\":{\"20\":1},\"1\":{\"20\":1}}],[\"拆分为\",{\"1\":{\"148\":1}}],[\"应当等于\",{\"1\":{\"148\":1}}],[\"应该用哪些东西呢\",{\"1\":{\"176\":1}}],[\"应该\",{\"1\":{\"46\":1}}],[\"斐波那契数列的前两项是\",{\"1\":{\"148\":1}}],[\"得出\",{\"1\":{\"148\":1}}],[\"得到的结果就是原本要被整除的那个数\",{\"1\":{\"108\":1}}],[\"得到的却是\",{\"1\":{\"106\":1}}],[\"项\",{\"1\":{\"148\":1,\"150\":1}}],[\"项目结构和每个部分的作用有一定的具体了解了\",{\"1\":{\"198\":1}}],[\"项目\",{\"1\":{\"198\":1}}],[\"项目技能分享\",{\"0\":{\"195\":1}}],[\"项目中常用的语法进行介绍\",{\"1\":{\"181\":1}}],[\"项目的配置文件\",{\"1\":{\"58\":1}}],[\"项目名为例\",{\"1\":{\"58\":1}}],[\"项目打包好帮手\",{\"0\":{\"58\":1}}],[\"听说过二维迷宫吗\",{\"1\":{\"149\":1}}],[\"听说有些老师在课上已经讲过了八皇后问题\",{\"1\":{\"20\":1}}],[\"听起来可能有一些绕\",{\"1\":{\"148\":1}}],[\"参数会包含错误信息\",{\"1\":{\"202\":1}}],[\"参数会包含服务器返回的数据\",{\"1\":{\"202\":1}}],[\"参数列表是函数的参数列表\",{\"1\":{\"159\":1}}],[\"参数列表是函数的参数\",{\"1\":{\"146\":1,\"147\":1}}],[\"参数列表\",{\"1\":{\"146\":1,\"147\":1,\"159\":1}}],[\"参数指的是函数中的自变量\",{\"1\":{\"91\":1}}],[\"死循环指的是无法终止的循环\",{\"1\":{\"137\":1}}],[\"三个部分\",{\"1\":{\"198\":1}}],[\"三个数组\",{\"1\":{\"55\":1}}],[\"三目运算符可以嵌套使用\",{\"1\":{\"135\":1}}],[\"三目运算符也能用来选择执行简单的操作\",{\"1\":{\"135\":1}}],[\"三目运算符是\",{\"1\":{\"135\":1}}],[\"三目运算符\",{\"0\":{\"135\":1}}],[\"闰年满足以下条件\",{\"1\":{\"134\":1}}],[\"小于等于\",{\"1\":{\"134\":2,\"149\":1}}],[\"小于\",{\"1\":{\"134\":2}}],[\"小游戏项目不知道怎么写\",{\"0\":{\"49\":1}}],[\"整除\",{\"1\":{\"134\":2}}],[\"整除但不能被\",{\"1\":{\"134\":1}}],[\"整个表达式就成立\",{\"1\":{\"134\":1}}],[\"整个表达式才成立\",{\"1\":{\"134\":1}}],[\"整型类型\",{\"1\":{\"105\":1}}],[\"整型\",{\"0\":{\"104\":1},\"1\":{\"103\":1}}],[\"整型变量的溢出实际上比较好控制\",{\"1\":{\"5\":1}}],[\"逻辑非\",{\"1\":{\"134\":1}}],[\"逻辑或\",{\"1\":{\"134\":1}}],[\"逻辑与\",{\"1\":{\"134\":1}}],[\"逻辑运算符\",{\"0\":{\"134\":1}}],[\"确定自己的逻辑是正确的\",{\"1\":{\"133\":1}}],[\"确实比较麻烦\",{\"1\":{\"79\":1}}],[\"被编写出来后\",{\"1\":{\"133\":1}}],[\"执行内部的操作\",{\"1\":{\"133\":1}}],[\"零\",{\"1\":{\"133\":1,\"136\":1}}],[\"换成英文来说就是\",{\"1\":{\"133\":1}}],[\"换行的\",{\"1\":{\"46\":1}}],[\"负数\",{\"1\":{\"133\":1,\"135\":1,\"136\":1}}],[\"负数还是零的操作\",{\"1\":{\"136\":1}}],[\"负数还是零\",{\"1\":{\"133\":1}}],[\"负数是以补码的形式存储的\",{\"1\":{\"5\":1}}],[\"放在后面表示先进行运算\",{\"1\":{\"125\":1}}],[\"放在前面表示先加\",{\"1\":{\"125\":1}}],[\"乘法运算符\",{\"1\":{\"125\":1}}],[\"乘法\",{\"1\":{\"125\":1}}],[\"乘方\",{\"1\":{\"5\":1}}],[\"算术运算符用于执行基本的算术运算\",{\"1\":{\"125\":1}}],[\"算术运算符\",{\"0\":{\"125\":1}}],[\"算算超过了\",{\"1\":{\"55\":1}}],[\"含义是\",{\"1\":{\"120\":1}}],[\"稍安勿躁哦~\",{\"1\":{\"120\":1}}],[\"稍微超一点点也不大要紧\",{\"1\":{\"55\":1}}],[\"务必注意\",{\"1\":{\"116\":1}}],[\"码大于\",{\"1\":{\"116\":1}}],[\"码值\",{\"1\":{\"116\":1,\"122\":1,\"123\":1}}],[\"码里面实际上并没有多少东西\",{\"1\":{\"5\":1}}],[\"符号等\",{\"1\":{\"116\":1}}],[\"符号位就会被直接解释为负数\",{\"1\":{\"106\":1}}],[\"格式\",{\"1\":{\"114\":1,\"116\":2}}],[\"范围的情况\",{\"1\":{\"109\":1}}],[\"范围内的随机数\",{\"1\":{\"52\":1}}],[\"范围内的值\",{\"1\":{\"17\":1}}],[\"通常情况下\",{\"1\":{\"109\":1}}],[\"通过观察这个文件就能看懂\",{\"1\":{\"198\":1}}],[\"通过指定\",{\"1\":{\"178\":1}}],[\"通过指针\",{\"1\":{\"43\":1,\"155\":1}}],[\"通过函数指针\",{\"1\":{\"159\":1}}],[\"通过使用指针\",{\"1\":{\"43\":1,\"158\":1}}],[\"通过不断地解决小问题\",{\"1\":{\"23\":1,\"148\":1}}],[\"通过这样以二分的方法将数组拆分\",{\"1\":{\"23\":1}}],[\"通过这样的处理\",{\"1\":{\"23\":1,\"148\":1}}],[\"通过这样一个函数\",{\"1\":{\"17\":1}}],[\"通过添加一些边界条件\",{\"1\":{\"20\":1}}],[\"通过全排列我们已经解决了皇后们出现在同一行\",{\"1\":{\"20\":1}}],[\"通过写这样一个\",{\"1\":{\"17\":1}}],[\"您猜怎么着\",{\"1\":{\"108\":1}}],[\"÷\",{\"1\":{\"108\":2}}],[\"商余\",{\"1\":{\"108\":1}}],[\"啊呀\",{\"1\":{\"175\":1}}],[\"啊\",{\"1\":{\"108\":1}}],[\"补码怎么想出来的\",{\"0\":{\"108\":1}}],[\"补完计划的重制版\",{\"1\":{\"85\":1}}],[\"补完计划\",{\"0\":{\"207\":1},\"1\":{\"128\":2,\"142\":3,\"151\":3,\"160\":1,\"167\":1},\"2\":{\"3\":1,\"6\":1,\"9\":1,\"12\":1,\"15\":1,\"18\":1,\"21\":1,\"24\":1,\"29\":1,\"32\":1,\"35\":1,\"38\":1,\"41\":1,\"44\":1}}],[\"退位操作根本无法实现\",{\"1\":{\"107\":1}}],[\"退到上一步\",{\"1\":{\"20\":1}}],[\"减法运算符\",{\"1\":{\"125\":1}}],[\"减法\",{\"1\":{\"125\":1}}],[\"减法需要退位\",{\"1\":{\"107\":1}}],[\"减少搜索过程中复制粘贴的工程量\",{\"1\":{\"20\":2}}],[\"既然函数在声明后就可以被调用\",{\"1\":{\"148\":1}}],[\"既然它占用了二进制上\",{\"1\":{\"105\":1}}],[\"既然存储数据都是\",{\"1\":{\"37\":1}}],[\"浮点型变量的存储格式采取\",{\"1\":{\"114\":1}}],[\"浮点型\",{\"0\":{\"111\":1},\"1\":{\"103\":1}}],[\"浮点数\",{\"1\":{\"99\":1}}],[\"命名法\",{\"1\":{\"102\":2,\"146\":1,\"164\":1}}],[\"命令来编译你的代码\",{\"1\":{\"94\":1}}],[\"命令安装即可\",{\"1\":{\"86\":1}}],[\"命令\",{\"1\":{\"58\":1}}],[\"命令创建一个名为\",{\"1\":{\"58\":1}}],[\"累加器等\",{\"1\":{\"101\":1}}],[\"静态变量不会被销毁\",{\"1\":{\"101\":1}}],[\"静态变量的特点在于\",{\"1\":{\"101\":1}}],[\"静态变量通常用于表示需要在函数调用之间保持状态的变量\",{\"1\":{\"101\":1}}],[\"静态变量是一种在整个程序运行期间都存在的变量\",{\"1\":{\"101\":1}}],[\"局部变量\",{\"1\":{\"100\":1}}],[\"局部变量一旦离开其声明的大括号\",{\"1\":{\"100\":1}}],[\"常用语法\",{\"1\":{\"201\":1}}],[\"常用的选择器有\",{\"1\":{\"174\":1}}],[\"常量通常用于表示不会改变的值\",{\"1\":{\"101\":1}}],[\"常量是一种不能被修改的变量\",{\"1\":{\"101\":1}}],[\"常量\",{\"1\":{\"101\":1}}],[\"常量和静态变量\",{\"0\":{\"101\":1}}],[\"常量和静态变量的含义会在稍后提到\",{\"1\":{\"100\":1}}],[\"常见的数学函数\",{\"1\":{\"5\":1}}],[\"全局变量\",{\"1\":{\"100\":1}}],[\"全局变量通常在函数外部声明\",{\"1\":{\"100\":1}}],[\"右移运算符\",{\"1\":{\"126\":1}}],[\"右移同理\",{\"1\":{\"8\":1}}],[\"右侧可以是任何结果满足被赋值变量类型的表达式\",{\"1\":{\"99\":1}}],[\"赋值符号的左侧只能是指定的变量\",{\"1\":{\"99\":1}}],[\"赋值符号\",{\"1\":{\"99\":2,\"134\":1}}],[\"赋值语句我们用的是\",{\"1\":{\"2\":1}}],[\"顾名思义\",{\"1\":{\"99\":1}}],[\"试一试\",{\"0\":{\"95\":1,\"128\":1,\"142\":1,\"151\":1,\"160\":1,\"167\":1}}],[\"按照目前为止学过的知识搞不出来\",{\"1\":{\"133\":1}}],[\"按照最大的数据范围计算出在最坏的情况下\",{\"1\":{\"55\":1}}],[\"按位取反运算符\",{\"1\":{\"126\":1}}],[\"按位异或运算符\",{\"1\":{\"126\":1}}],[\"按位或运算符\",{\"1\":{\"126\":1}}],[\"按位与运算符\",{\"1\":{\"126\":1}}],[\"按钮\",{\"1\":{\"94\":1}}],[\"▶\",{\"1\":{\"94\":1}}],[\"转义符号\",{\"1\":{\"121\":1}}],[\"转换成计算机能够理解的机器语言\",{\"1\":{\"94\":1}}],[\"转化成了一次移动和两次\",{\"1\":{\"23\":1,\"148\":1}}],[\"转化为十进制的\",{\"1\":{\"17\":1}}],[\"缩进是\",{\"1\":{\"93\":1}}],[\"代理等\",{\"1\":{\"198\":1}}],[\"代表着这个函数已经得到了结果\",{\"1\":{\"91\":1}}],[\"代表这个程序顺利退出\",{\"1\":{\"91\":1}}],[\"代码\",{\"1\":{\"177\":2,\"198\":2}}],[\"代码已经写好了\",{\"1\":{\"94\":1}}],[\"代码格式化\",{\"1\":{\"85\":1}}],[\"代码运行\",{\"1\":{\"85\":1}}],[\"代码未经检查\",{\"1\":{\"31\":1}}],[\"代码缩进问题无法解决\",{\"1\":{\"20\":1}}],[\"kx\",{\"1\":{\"91\":1}}],[\"kb\",{\"1\":{\"5\":2,\"55\":2}}],[\"了解了\",{\"1\":{\"198\":1}}],[\"了解到的是这个变量的值\",{\"1\":{\"2\":1}}],[\"了\",{\"1\":{\"87\":2,\"94\":1,\"106\":1}}],[\"镜像使用帮助\",{\"1\":{\"87\":1}}],[\"镜像加速这个过程\",{\"1\":{\"58\":1}}],[\"镜像加速\",{\"1\":{\"58\":1}}],[\"回想起我们小学学过的整数除法\",{\"1\":{\"108\":1}}],[\"回车运行后\",{\"1\":{\"86\":1,\"87\":1}}],[\"回调函数等等\",{\"1\":{\"43\":1,\"155\":1}}],[\"盘空间就省出来了\",{\"1\":{\"86\":1}}],[\"盘的空间可能显得有点小了\",{\"1\":{\"86\":1}}],[\"盘的某个角落\",{\"1\":{\"86\":1}}],[\"属性可以用来指定链接的目标地址\",{\"1\":{\"188\":1}}],[\"属性可以用来指定图片\",{\"1\":{\"187\":1}}],[\"属性可以用来给元素添加内联样式\",{\"1\":{\"186\":1}}],[\"属性可以用来给元素添加一个唯一的标识符\",{\"1\":{\"185\":1}}],[\"属性可以用来给元素添加一个或多个类名\",{\"1\":{\"184\":1}}],[\"属性的值必须是唯一的\",{\"1\":{\"185\":1}}],[\"属性来指定它的动画过程\",{\"1\":{\"178\":1}}],[\"属性来设置元素的排列方向\",{\"1\":{\"175\":1}}],[\"属性选择器\",{\"1\":{\"174\":1}}],[\"属性\",{\"1\":{\"86\":1,\"165\":2,\"198\":2}}],[\"装在哪了\",{\"1\":{\"86\":1}}],[\"查看具体的配置方法\",{\"1\":{\"86\":1}}],[\"高校联合镜像站的文档非常详细\",{\"1\":{\"87\":1}}],[\"高校联合镜像站\",{\"1\":{\"86\":1,\"87\":1}}],[\"高级程序设计\",{\"1\":{\"34\":1}}],[\"卡的一批\",{\"1\":{\"86\":1}}],[\"目录添加到环境变量\",{\"1\":{\"86\":1}}],[\"目的是更系统\",{\"1\":{\"85\":1}}],[\"版本需要\",{\"1\":{\"86\":1}}],[\"真的推荐\",{\"1\":{\"85\":1}}],[\"界面主题\",{\"1\":{\"85\":1}}],[\"功能很强\",{\"1\":{\"85\":1}}],[\"二者在现代软件程序员之间都得到广泛使用\",{\"1\":{\"85\":1}}],[\"二进制下第一位的取值来判断的话\",{\"1\":{\"8\":1}}],[\"二进制的\",{\"1\":{\"5\":1}}],[\"丹尼斯\",{\"1\":{\"85\":1}}],[\"操作系统\",{\"1\":{\"85\":1}}],[\"年龄\",{\"1\":{\"165\":1}}],[\"年\",{\"1\":{\"85\":1}}],[\"面向过程式的计算机程序设计语言\",{\"1\":{\"85\":1}}],[\"菜鸟教程\",{\"1\":{\"85\":1,\"173\":1,\"181\":1}}],[\"摘自\",{\"1\":{\"85\":1}}],[\"好吧\",{\"1\":{\"85\":1}}],[\"好在我们现在仅仅是借助\",{\"1\":{\"58\":1}}],[\"玩家听到的感觉肯定也不一样\",{\"1\":{\"82\":1}}],[\"另一种理解是玩家坐在电脑面前\",{\"1\":{\"82\":1}}],[\"另外学这个得先会点\",{\"1\":{\"61\":1}}],[\"另外一种可能导致时间超限的原因可能是无限递归或者死循环\",{\"1\":{\"55\":1}}],[\"另外需要提醒的一点就是\",{\"1\":{\"20\":1}}],[\"另外\",{\"1\":{\"17\":1,\"149\":1,\"165\":1}}],[\"另外某\",{\"1\":{\"5\":1}}],[\"此后再也无法访问\",{\"1\":{\"100\":1}}],[\"此外\",{\"1\":{\"99\":1,\"100\":1}}],[\"此外是soundplayer\",{\"1\":{\"82\":1}}],[\"此时该指针就变成了悬空指针\",{\"1\":{\"166\":1}}],[\"此时是\",{\"1\":{\"116\":1}}],[\"此时\",{\"1\":{\"28\":3,\"43\":2,\"58\":2,\"158\":2}}],[\"此时记得要把当前的标记去除\",{\"1\":{\"20\":1}}],[\"音频\",{\"1\":{\"187\":1}}],[\"音乐文件一般比较大\",{\"1\":{\"82\":1}}],[\"音乐和其它文件是不一样的\",{\"1\":{\"82\":1}}],[\"音乐播放器\",{\"0\":{\"82\":1}}],[\"音量还有暂停\",{\"1\":{\"82\":1}}],[\"轻松拿捏游戏音乐和音效\",{\"0\":{\"82\":1}}],[\"轻量\",{\"1\":{\"58\":1}}],[\"写一个代码判断输入的数是正数\",{\"1\":{\"133\":1}}],[\"写一个栈\",{\"1\":{\"79\":1}}],[\"写出这样的代码具体改变了什么呢\",{\"1\":{\"5\":1}}],[\"写出更好看的代码格式\",{\"1\":{\"5\":1}}],[\"游戏开发\",{\"0\":{\"209\":1}}],[\"游戏也是一样\",{\"1\":{\"82\":1}}],[\"游戏会有声音随着位置改变\",{\"1\":{\"82\":1}}],[\"游戏音效往往是有位置的\",{\"1\":{\"82\":1}}],[\"游戏内容从栈中弹出\",{\"1\":{\"79\":1}}],[\"游戏场景随便\",{\"0\":{\"79\":1}}],[\"运算符\",{\"0\":{\"124\":1}}],[\"运算符的话\",{\"1\":{\"8\":1}}],[\"运动\",{\"1\":{\"73\":1}}],[\"坐标的变换从父节点到子节点一路叠buff\",{\"1\":{\"73\":1}}],[\"依照上文的例子\",{\"1\":{\"73\":1}}],[\"依旧很烂\",{\"1\":{\"20\":1}}],[\"树和图看不明白是什么意思的话\",{\"1\":{\"150\":1}}],[\"树\",{\"1\":{\"73\":1}}],[\"计算起来非常地繁琐\",{\"1\":{\"73\":1}}],[\"计算机科学教育新生态\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1}}],[\"根本不好用\",{\"1\":{\"67\":1}}],[\"根据上课的速度\",{\"1\":{\"23\":1}}],[\"根据\",{\"1\":{\"5\":1,\"136\":1}}],[\"更灵活\",{\"1\":{\"198\":1}}],[\"更好看的文件图标\",{\"1\":{\"85\":1}}],[\"更好的画面编排方式\",{\"0\":{\"73\":1}}],[\"更精确地从零开始介绍\",{\"1\":{\"85\":1}}],[\"更轻松地存取文件\",{\"0\":{\"67\":1}}],[\"更方便的游戏结构\",{\"1\":{\"64\":1}}],[\"更新答案\",{\"1\":{\"20\":1}}],[\"搭配上sfml的内容\",{\"1\":{\"64\":1}}],[\"官网\",{\"1\":{\"61\":1,\"85\":1,\"201\":1}}],[\"官网上提供了详尽的解决方案\",{\"1\":{\"58\":1}}],[\"照着写就完事了\",{\"1\":{\"79\":1}}],[\"照着\",{\"1\":{\"61\":1}}],[\"把文件一个一个声明并且读入固然十分有效\",{\"1\":{\"67\":1}}],[\"把\",{\"1\":{\"61\":1}}],[\"把一些繁复的语句打包\",{\"1\":{\"17\":1}}],[\"都不会\",{\"1\":{\"181\":1}}],[\"都等于\",{\"1\":{\"148\":1}}],[\"都是依靠一个栈来实现\",{\"1\":{\"79\":1}}],[\"都行\",{\"1\":{\"61\":1}}],[\"都会自动跳过空白符和一些无关的特殊字符\",{\"1\":{\"46\":1}}],[\"打开浏览器中的一个网页\",{\"1\":{\"182\":1}}],[\"打开文件资源管理器\",{\"1\":{\"86\":1}}],[\"打开你的命令行\",{\"1\":{\"61\":1}}],[\"打上标记\",{\"1\":{\"20\":1}}],[\"环境配置\",{\"0\":{\"85\":1},\"1\":{\"61\":1}}],[\"包本身而使用这个实例即可\",{\"1\":{\"202\":1}}],[\"包管理器创建\",{\"1\":{\"198\":1}}],[\"包裹元素可以提高代码的可读性\",{\"1\":{\"182\":1}}],[\"包裹的\",{\"1\":{\"133\":1,\"174\":1}}],[\"包括选择器\",{\"1\":{\"173\":1}}],[\"包括之后说到的\",{\"1\":{\"137\":1}}],[\"包括加法\",{\"1\":{\"125\":1}}],[\"包括网络\",{\"1\":{\"61\":1}}],[\"包下下来\",{\"1\":{\"61\":1}}],[\"包都在\",{\"1\":{\"58\":1}}],[\"又没有更简单的\",{\"1\":{\"76\":1}}],[\"又没有更好的方法可以解决这个问题呢\",{\"1\":{\"73\":1}}],[\"又到了和\",{\"1\":{\"61\":1}}],[\"又是我\",{\"1\":{\"20\":1}}],[\"添加\",{\"1\":{\"58\":1}}],[\"添加到我们的配置文件中作为编译内容的一部分\",{\"1\":{\"58\":1}}],[\"插件生态也很完整\",{\"1\":{\"85\":1}}],[\"插件吧\",{\"1\":{\"58\":1}}],[\"插件但并不好用\",{\"1\":{\"58\":1}}],[\"考虑到了这一点\",{\"1\":{\"58\":1}}],[\"保存\",{\"1\":{\"58\":1}}],[\"文档\",{\"1\":{\"86\":1}}],[\"文件\",{\"1\":{\"198\":1}}],[\"文件可以包含多个\",{\"1\":{\"198\":1}}],[\"文件最多可以包含一个顶层<template>\",{\"1\":{\"198\":1}}],[\"文件最多可以包含一个\",{\"1\":{\"198\":1}}],[\"文件不是完全空的\",{\"1\":{\"198\":1}}],[\"文件的结构之后\",{\"1\":{\"198\":1}}],[\"文件的结构\",{\"1\":{\"198\":1}}],[\"文件中定义\",{\"1\":{\"186\":1}}],[\"文件夹中的页面\",{\"1\":{\"198\":1}}],[\"文件夹下存放的是一些可以在多个页面或者同一页面上多次复用的组件\",{\"1\":{\"198\":1}}],[\"文件夹下存放的是某一个路由的整体设计\",{\"1\":{\"198\":1}}],[\"文件夹下存放的是组件\",{\"1\":{\"198\":1}}],[\"文件夹下存放的是页面\",{\"1\":{\"198\":1}}],[\"文件夹\",{\"1\":{\"58\":1,\"198\":1}}],[\"文件夹路径的命令行中输入\",{\"1\":{\"58\":1}}],[\"文件夹是存放项目代码的位置\",{\"1\":{\"58\":1}}],[\"文件便是这个\",{\"1\":{\"58\":1}}],[\"文件与\",{\"1\":{\"58\":1}}],[\"文章\",{\"0\":{\"1\":1}}],[\"启动\",{\"1\":{\"58\":2}}],[\"构建出我们想要的\",{\"1\":{\"64\":1}}],[\"构建工具链\",{\"1\":{\"58\":1}}],[\"构建系统\",{\"1\":{\"58\":1}}],[\"工具链和需要安装的内容\",{\"1\":{\"58\":1}}],[\"工具链\",{\"1\":{\"58\":1}}],[\"十分影响使用体验\",{\"1\":{\"58\":1}}],[\"十分的奇怪\",{\"1\":{\"55\":1}}],[\"十分的阴间\",{\"1\":{\"37\":1}}],[\"访问速度很慢\",{\"1\":{\"58\":1}}],[\"安装后需重启命令行\",{\"1\":{\"86\":1,\"87\":1}}],[\"安装指示在官方页面上写的非常清楚\",{\"1\":{\"58\":1}}],[\"安装\",{\"1\":{\"58\":1,\"86\":1}}],[\"库\",{\"1\":{\"58\":1}}],[\"库中的函数实际上大多数的实现都是基于\",{\"1\":{\"5\":1}}],[\"库中的一些函数来解决较为实际的问题\",{\"1\":{\"5\":1}}],[\"解析成功啦\",{\"1\":{\"58\":1}}],[\"解析\",{\"1\":{\"58\":1}}],[\"解决这些问题估计死循环也很难存在了\",{\"1\":{\"55\":1}}],[\"解决这个问题的方法一般有两种\",{\"1\":{\"46\":1}}],[\"解决它们的任务就交给同学们辣\",{\"1\":{\"20\":1}}],[\"带来不一样的构建体验\",{\"1\":{\"58\":1}}],[\"跨平台等特性\",{\"1\":{\"58\":1}}],[\"简介\",{\"0\":{\"198\":1}}],[\"简介和环境配置\",{\"0\":{\"61\":1}}],[\"简洁\",{\"1\":{\"58\":1}}],[\"简单介绍一下使用方式\",{\"1\":{\"14\":1}}],[\"利用\",{\"1\":{\"58\":1}}],[\"利用这种写法我们就获得了一种读入整数的更快的方式\",{\"1\":{\"46\":1}}],[\"支持多重编译器和平台\",{\"1\":{\"58\":1}}],[\"超空间怎么办这一类的问题了吧\",{\"1\":{\"55\":1}}],[\"超出范围或者是已经走过\",{\"1\":{\"149\":2}}],[\"超出存储范围的位数将被抹除\",{\"1\":{\"8\":1}}],[\"超出即危险\",{\"1\":{\"5\":1}}],[\"经过测试的确是可以过的\",{\"1\":{\"55\":1}}],[\"经常在群里求数据解决问题是不可取的\",{\"1\":{\"52\":1}}],[\"给它加上阴影或许会好一点\",{\"1\":{\"176\":1}}],[\"给它加上个圆角\",{\"1\":{\"176\":1}}],[\"给这两个数组\",{\"1\":{\"55\":1}}],[\"给大家拿出来对比一下\",{\"1\":{\"5\":1}}],[\"多维发展赋能系列活动\",{\"0\":{\"195\":1}}],[\"多出来的那一位就会被丢弃\",{\"1\":{\"108\":1}}],[\"多行注释以\",{\"1\":{\"92\":1}}],[\"多\",{\"1\":{\"55\":1}}],[\"多加空格\",{\"1\":{\"5\":1}}],[\"观察题目我们知道需要开两个\",{\"1\":{\"55\":1}}],[\"内容\",{\"1\":{\"195\":1}}],[\"内容就能派上用场了\",{\"1\":{\"79\":1}}],[\"内联样式可以直接在标签中定义\",{\"1\":{\"186\":1}}],[\"内部声明的变量\",{\"1\":{\"100\":1}}],[\"内部提供的镜像\",{\"1\":{\"58\":1}}],[\"内部的计算原理某\",{\"1\":{\"52\":1}}],[\"内存分配器这道题\",{\"1\":{\"55\":1}}],[\"占用\",{\"1\":{\"105\":1,\"109\":1,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"116\":1}}],[\"占用内存更加少而常被用在一些判断中\",{\"1\":{\"5\":1}}],[\"占\",{\"1\":{\"55\":3}}],[\"远远超过了1亿\",{\"1\":{\"55\":1}}],[\"吗\",{\"1\":{\"55\":1}}],[\"举个例子让你回想起来\",{\"1\":{\"108\":1}}],[\"举个例子\",{\"1\":{\"55\":1}}],[\"举一个\",{\"1\":{\"17\":1}}],[\"例如我们模板项目中的\",{\"1\":{\"198\":1}}],[\"例如上面的代码可以写成\",{\"1\":{\"138\":1,\"139\":1}}],[\"例如\",{\"1\":{\"55\":1,\"86\":2,\"91\":4,\"92\":1,\"93\":1,\"101\":1,\"120\":2,\"121\":2,\"122\":1,\"123\":1,\"125\":1,\"133\":3,\"135\":2,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":3,\"141\":1,\"147\":1,\"148\":1,\"150\":1,\"159\":2,\"165\":2,\"174\":6,\"175\":1,\"198\":1,\"203\":3}}],[\"左右或者小于\",{\"1\":{\"55\":1}}],[\"左移运算符\",{\"1\":{\"126\":1}}],[\"左移\",{\"1\":{\"8\":1}}],[\"去掉一些没必要的常数\",{\"1\":{\"55\":1}}],[\"看不清的话\",{\"1\":{\"195\":1}}],[\"看上去像是悬浮起来一样的板块\",{\"1\":{\"176\":1}}],[\"看完这个\",{\"1\":{\"55\":1}}],[\"看够了再盯着自己循环次数最多的那个地方看\",{\"1\":{\"55\":1}}],[\"看看\",{\"1\":{\"55\":1}}],[\"明明题目的时空限制放的都很宽啊\",{\"1\":{\"55\":1}}],[\"随便在命令行上打印一点东西\",{\"1\":{\"95\":1}}],[\"随着题目难度的增大\",{\"1\":{\"55\":1}}],[\"随机数据生成\",{\"0\":{\"52\":1}}],[\"控制时空复杂度\",{\"0\":{\"55\":1}}],[\"控制好语句块的缩进\",{\"1\":{\"5\":1}}],[\"两个值\",{\"1\":{\"118\":1}}],[\"两个数字相加\",{\"1\":{\"108\":1}}],[\"两个子问题构成\",{\"1\":{\"23\":1}}],[\"两者可以按照逻辑顺序连用fc\",{\"1\":{\"52\":1}}],[\"洒洒水啦~>\",{\"1\":{\"52\":1}}],[\"嘛\",{\"1\":{\"52\":1}}],[\"填入以下代码\",{\"1\":{\"52\":1}}],[\"填上数字来告诉编译器我们想定义一个数组\",{\"1\":{\"8\":1}}],[\"完整使用小猫\",{\"1\":{\"165\":1}}],[\"完全没办法啊\",{\"1\":{\"149\":1}}],[\"完全正确的程序生成的可执行文件叫\",{\"1\":{\"52\":1}}],[\"完成了\",{\"1\":{\"61\":1}}],[\"完成汉诺塔的位移\",{\"1\":{\"23\":1,\"148\":1}}],[\"发送的请求都是互相独立的\",{\"1\":{\"202\":1}}],[\"发起的网络请求也是这样\",{\"1\":{\"202\":1}}],[\"发现开始有越来越多的同学对空间超限以及时间超限发出了疑问\",{\"1\":{\"55\":1}}],[\"发现大家递归好像做的还行了\",{\"1\":{\"20\":1}}],[\"发出这个帖子之后\",{\"1\":{\"52\":1}}],[\"效率太低\",{\"1\":{\"52\":1}}],[\"学会了生成随机数\",{\"1\":{\"52\":1}}],[\"学习我的一些做法\",{\"1\":{\"49\":1}}],[\"里奇在贝尔电话实验室设计开发了\",{\"1\":{\"85\":1}}],[\"里\",{\"1\":{\"52\":1}}],[\"里面遗漏的东西\",{\"0\":{\"70\":1}}],[\"里面看是什么数据\",{\"1\":{\"52\":1}}],[\"里面先搞\",{\"1\":{\"37\":1}}],[\"里面\",{\"1\":{\"37\":1,\"79\":1}}],[\"里面存三个指针\",{\"1\":{\"34\":1}}],[\"里面仍然有\",{\"1\":{\"8\":1}}],[\"里面的表示是\",{\"1\":{\"5\":6}}],[\"里面填入东西\",{\"1\":{\"2\":1}}],[\"别人是错的你也不一定就是错的\",{\"1\":{\"52\":1}}],[\"别人是对的你不一定对\",{\"1\":{\"52\":1}}],[\"别忘了每次更新的时候要把已经播放完的音效清除\",{\"1\":{\"82\":1}}],[\"别忘了给我点颗星~o\",{\"1\":{\"49\":1}}],[\"别忘了包含stdlib\",{\"1\":{\"37\":1}}],[\"别忘了取消标记\",{\"1\":{\"20\":1}}],[\"错误也很可能出在五花八门的地方\",{\"1\":{\"52\":1}}],[\"今天发现有不少同学会在群里面求某道题的测试数据来验证自己程序的正确性\",{\"1\":{\"52\":1}}],[\"今天给大家带来\",{\"1\":{\"5\":1}}],[\"特判解决掉最小的问题\",{\"1\":{\"148\":1}}],[\"特殊的加减方式\",{\"0\":{\"127\":1}}],[\"特以此篇\",{\"1\":{\"46\":1}}],[\"特别地\",{\"1\":{\"43\":1,\"58\":1,\"156\":1}}],[\"特别提醒\",{\"1\":{\"23\":1,\"34\":1,\"49\":1}}],[\"特别注意\",{\"1\":{\"20\":1}}],[\"特别的\",{\"1\":{\"17\":1}}],[\"特别一些\",{\"1\":{\"8\":1}}],[\"出发\",{\"1\":{\"149\":1}}],[\"出现了补码表示法\",{\"1\":{\"107\":1}}],[\"出现了意想不到的问题\",{\"1\":{\"46\":1}}],[\"出题\",{\"1\":{\"46\":1}}],[\"达成了目标\",{\"1\":{\"46\":1}}],[\"处理符号问题\",{\"1\":{\"46\":1}}],[\"标签中\",{\"1\":{\"198\":1}}],[\"标签上\",{\"1\":{\"198\":1}}],[\"标签\",{\"1\":{\"198\":2}}],[\"标签应当尽量语义化\",{\"0\":{\"189\":1}}],[\"标签的语义化是指使用合适的标签来表示内容的含义\",{\"1\":{\"189\":1}}],[\"标签的属性可以用来控制标签的样式\",{\"1\":{\"183\":1}}],[\"标签的位置\",{\"1\":{\"141\":1}}],[\"标签属性\",{\"0\":{\"183\":1}}],[\"标签包裹中的\",{\"1\":{\"174\":1}}],[\"标志结束\",{\"1\":{\"46\":1}}],[\"标记为用过\",{\"1\":{\"20\":1}}],[\"连续读入\",{\"1\":{\"46\":1}}],[\"连起来读就是标准输入输出库\",{\"1\":{\"2\":1}}],[\"分别是\",{\"1\":{\"149\":1}}],[\"分支\",{\"0\":{\"131\":1,\"132\":1}}],[\"分支结构以及循环结构\",{\"1\":{\"8\":1}}],[\"分隔\",{\"1\":{\"102\":2}}],[\"分而治之\",{\"1\":{\"64\":1}}],[\"分\",{\"1\":{\"46\":1}}],[\"怎么安装\",{\"1\":{\"86\":1}}],[\"怎么找到我可能想安装的包\",{\"1\":{\"86\":1}}],[\"怎么会出现超时超空间的问题呢\",{\"1\":{\"55\":1}}],[\"怎么会随手把它丢掉\",{\"1\":{\"46\":1}}],[\"怎么办\",{\"1\":{\"23\":1}}],[\"怎么办呢\",{\"1\":{\"2\":1,\"37\":1,\"43\":1,\"157\":1}}],[\"继续尝试其他方向\",{\"1\":{\"149\":2}}],[\"继续执行后面的代码\",{\"1\":{\"133\":1}}],[\"继续使用\",{\"1\":{\"46\":1}}],[\"继续去找其它的情况\",{\"1\":{\"20\":1}}],[\"甚至在一定程度上使用了魔法的情况下还会出现下载失败的情况\",{\"1\":{\"58\":1}}],[\"甚至你还可以利用\",{\"1\":{\"46\":1}}],[\"甚至不让用\",{\"1\":{\"37\":1}}],[\"读入的速度\",{\"1\":{\"46\":1}}],[\"读入同样多的数据量\",{\"1\":{\"46\":1}}],[\"读入数据的时候\",{\"1\":{\"46\":1}}],[\"读掉换行符的方式\",{\"1\":{\"46\":1}}],[\"进行匹配\",{\"1\":{\"133\":1}}],[\"进行读入数据\",{\"1\":{\"46\":1}}],[\"进度未解锁\",{\"1\":{\"103\":1}}],[\"进制的数的函数\",{\"1\":{\"17\":1}}],[\"进制的数转化为\",{\"1\":{\"17\":1}}],[\"老版本\",{\"1\":{\"85\":1}}],[\"老师对于实践的要求历来极高\",{\"1\":{\"192\":1}}],[\"老师的强而有力的纯实践开发教学\",{\"1\":{\"192\":1}}],[\"老师毫无感情的纯理论教学之后\",{\"1\":{\"192\":1}}],[\"老师和其它同学的不尊重\",{\"1\":{\"49\":1}}],[\"老师貌似是有选择性的听取了上次开会的提议\",{\"1\":{\"17\":1}}],[\"老老实实使用\",{\"1\":{\"46\":1}}],[\"行为等\",{\"1\":{\"183\":1}}],[\"行\",{\"1\":{\"79\":1,\"149\":1}}],[\"行末的空格最好别有\",{\"1\":{\"52\":1}}],[\"行末有一个换行符\",{\"1\":{\"46\":1}}],[\"行向量\",{\"1\":{\"34\":1}}],[\"平台下生成数据会有什么区别呢\",{\"1\":{\"46\":1}}],[\"平台的环境下自动生成数据\",{\"1\":{\"46\":1}}],[\"编程语言一样普及\",{\"1\":{\"85\":1}}],[\"编辑配置\",{\"1\":{\"58\":1}}],[\"编译器会自动计算大小\",{\"1\":{\"149\":1}}],[\"编译器就会将你的代码编译成一个叫做\",{\"1\":{\"94\":1}}],[\"编译器的作用就是将我们写好的代码\",{\"1\":{\"94\":1}}],[\"编译器\",{\"1\":{\"94\":1}}],[\"编译器便会选择最近的\",{\"1\":{\"8\":1}}],[\"编译的项目也不需要考虑动态链接库的问题\",{\"1\":{\"58\":1}}],[\"编译\",{\"1\":{\"58\":1}}],[\"编写一个简单的\",{\"1\":{\"95\":1}}],[\"编写的\",{\"1\":{\"58\":1}}],[\"编写的随机数程序\",{\"1\":{\"46\":1}}],[\"编写项目\",{\"1\":{\"58\":1}}],[\"记得用\",{\"1\":{\"43\":1,\"158\":1}}],[\"记好某\",{\"1\":{\"20\":1}}],[\"产生了大量的无效内存占用\",{\"1\":{\"43\":1,\"158\":1}}],[\"申请指针必须有始有终\",{\"1\":{\"43\":1,\"158\":1}}],[\"申请完以后我们就可以使用s\",{\"1\":{\"37\":1}}],[\"否则返回\",{\"1\":{\"135\":1}}],[\"否则\",{\"1\":{\"133\":2,\"198\":3}}],[\"否则就\",{\"1\":{\"133\":1}}],[\"否则可能会出现意想不到的结果\",{\"1\":{\"127\":1}}],[\"否则可能会因为路径不能被命令行正确识别导致一些奇怪的问题\",{\"1\":{\"85\":1}}],[\"否则刷屏警告\",{\"1\":{\"52\":1}}],[\"否则编译器会报错\",{\"1\":{\"43\":1,\"158\":1}}],[\"否则会导致死循环\",{\"1\":{\"137\":1}}],[\"否则会导致内存泄露\",{\"1\":{\"43\":1,\"158\":1}}],[\"否则会有意想不到的\",{\"1\":{\"20\":1}}],[\"否则它会一直存在\",{\"1\":{\"43\":1,\"158\":1}}],[\"释放的是指针指向的内存空间\",{\"1\":{\"43\":1,\"158\":1}}],[\"释放它\",{\"1\":{\"43\":1,\"158\":1}}],[\"释放了它\",{\"1\":{\"43\":1,\"158\":1}}],[\"释放内存\",{\"1\":{\"34\":1}}],[\"新建一个文件\",{\"1\":{\"52\":1}}],[\"新建一个节点指向链表的开头以方便链表的遍历和添加删除\",{\"1\":{\"31\":1}}],[\"新建的数组就失效了\",{\"1\":{\"43\":1,\"158\":1}}],[\"翻找\",{\"1\":{\"43\":1,\"158\":1}}],[\"呢\",{\"1\":{\"43\":2,\"108\":1,\"158\":2}}],[\"假设这里你想要使用\",{\"1\":{\"202\":1}}],[\"假设我们定义了它的结果由函数\",{\"1\":{\"148\":1}}],[\"假设现在有\",{\"1\":{\"55\":1}}],[\"假设是一个int变量\",{\"1\":{\"43\":1,\"157\":1}}],[\"假装这里有一大堆用于求解\",{\"1\":{\"14\":1}}],[\"现在页面上还是空空如也\",{\"1\":{\"198\":1}}],[\"现在看起来已经不错了\",{\"1\":{\"176\":1}}],[\"现在有一个二维迷宫\",{\"1\":{\"149\":1}}],[\"现在你成功的取出了某个变量的地址\",{\"1\":{\"43\":1,\"157\":1}}],[\"现在我们需要解决斜角上冲突的问题\",{\"1\":{\"20\":1}}],[\"现在我们所在的是\",{\"1\":{\"2\":1}}],[\"帮助大家更好地理解和掌握指针\",{\"1\":{\"43\":1,\"155\":1}}],[\"帮大家把上课内容再过一遍\",{\"1\":{\"23\":1}}],[\"本教程将会尽量简短\",{\"1\":{\"192\":1}}],[\"本身没有任何的样式\",{\"1\":{\"182\":1}}],[\"本节将介绍\",{\"1\":{\"173\":1}}],[\"本文将介绍一些指针的语法小技巧\",{\"1\":{\"43\":1,\"155\":1}}],[\"本周作业\",{\"1\":{\"17\":1}}],[\"の奇妙冒险\",{\"0\":{\"40\":1}}],[\"导致编写代码十分的困难\",{\"1\":{\"58\":1}}],[\"导致在一些数据范围比较大的题目当中甚至出现了三重循环\",{\"1\":{\"55\":1}}],[\"导致你输出它们指向的变量的结果也就不同\",{\"1\":{\"37\":1}}],[\"导致最终的结果就不一样\",{\"1\":{\"37\":1}}],[\"究竟在搞什么花样\",{\"1\":{\"37\":1}}],[\"开启幻灯片全屏模式\",{\"1\":{\"195\":1}}],[\"开发一个简单的网络前端应用\",{\"1\":{\"195\":1}}],[\"开头\",{\"1\":{\"92\":2,\"174\":2}}],[\"开写\",{\"1\":{\"79\":1}}],[\"开一个指定大小的连续空间\",{\"1\":{\"43\":1,\"158\":1}}],[\"开数组\",{\"1\":{\"37\":1}}],[\"开始做题吧\",{\"1\":{\"23\":1}}],[\"开始\",{\"1\":{\"5\":1,\"140\":2,\"150\":1}}],[\"由于走到终点可能不止有一条路径\",{\"1\":{\"149\":1}}],[\"由于下标从\",{\"1\":{\"140\":1}}],[\"由于sf\",{\"1\":{\"67\":1}}],[\"由这句话我们知道了数组名字是个指针\",{\"1\":{\"37\":1}}],[\"由此可知\",{\"1\":{\"2\":1}}],[\"偏移1那就是第二个元素\",{\"1\":{\"43\":1,\"158\":1}}],[\"偏移0那就是第一个元素\",{\"1\":{\"43\":1,\"158\":1}}],[\"偏移\",{\"1\":{\"37\":2}}],[\"原先的\",{\"1\":{\"198\":1}}],[\"原来\",{\"1\":{\"37\":1,\"43\":1,\"158\":1}}],[\"原理同上\",{\"1\":{\"20\":1}}],[\"顺便\",{\"1\":{\"73\":1}}],[\"顺带一提\",{\"1\":{\"37\":1,\"43\":1,\"158\":1}}],[\"顺序也不能错\",{\"1\":{\"2\":1}}],[\"逃不掉的语法小技巧\",{\"0\":{\"43\":1},\"1\":{\"37\":1,\"43\":1,\"160\":1}}],[\"课程作业中会出现这个数据结构\",{\"1\":{\"34\":1}}],[\"获取数组的第\",{\"1\":{\"34\":1}}],[\"改变数组长度至\",{\"1\":{\"34\":1}}],[\"返回它们的和\",{\"1\":{\"159\":1}}],[\"返回类型是\",{\"1\":{\"159\":1}}],[\"返回类型是函数的返回类型\",{\"1\":{\"159\":1}}],[\"返回类型是函数返回值的类型\",{\"1\":{\"146\":1}}],[\"返回类型\",{\"1\":{\"146\":1,\"159\":1}}],[\"返回的\",{\"1\":{\"79\":1}}],[\"返回的是一个\",{\"1\":{\"43\":1,\"158\":1}}],[\"返回当前数组容量\",{\"1\":{\"34\":1}}],[\"返回当前数组大小\",{\"1\":{\"34\":1}}],[\"返回指向数组结尾的指针\",{\"1\":{\"34\":1}}],[\"返回指向数组开头的指针\",{\"1\":{\"34\":1}}],[\"返回了\",{\"1\":{\"20\":1}}],[\"删除数组的第\",{\"1\":{\"34\":1}}],[\"删除这个动态数组\",{\"1\":{\"34\":1}}],[\"删除pos指向的元素\",{\"1\":{\"31\":1}}],[\"初始化动态数组\",{\"1\":{\"34\":1}}],[\"指令系统\",{\"0\":{\"76\":1}}],[\"指令的内部需要给出一个用\",{\"1\":{\"2\":1}}],[\"指的就是\",{\"1\":{\"52\":1}}],[\"指的是垂直方向上的对齐方式\",{\"1\":{\"175\":1}}],[\"指的是水平方向上的对齐方式\",{\"1\":{\"175\":1}}],[\"指的是设置随机数种子\",{\"1\":{\"52\":1}}],[\"指的是\",{\"1\":{\"43\":1,\"158\":1}}],[\"指获取当前系统时间\",{\"1\":{\"52\":1}}],[\"指不定就是内存泄露了\",{\"1\":{\"43\":1,\"158\":1}}],[\"指针变量名是函数指针的名称\",{\"1\":{\"159\":1}}],[\"指针变量名\",{\"1\":{\"159\":1}}],[\"指针等任意东西所占用的内存大小\",{\"1\":{\"55\":1}}],[\"指针后再次使用\",{\"1\":{\"43\":1,\"158\":1}}],[\"指针是\",{\"1\":{\"43\":1,\"155\":1}}],[\"指针真的就没有了\",{\"1\":{\"37\":1}}],[\"指针指向这个\",{\"1\":{\"37\":1}}],[\"指针\",{\"0\":{\"43\":1,\"154\":1,\"155\":1},\"1\":{\"37\":1,\"43\":1,\"160\":1}}],[\"指向的是\",{\"1\":{\"203\":1}}],[\"指向的是全局对象\",{\"1\":{\"203\":2}}],[\"指向的是一段内存空间的首地址\",{\"1\":{\"43\":1,\"158\":1}}],[\"指向内存结尾\",{\"1\":{\"34\":1}}],[\"指向数组结尾\",{\"1\":{\"34\":1}}],[\"指向数组开头\",{\"1\":{\"34\":1}}],[\"建议你去那里学习\",{\"1\":{\"201\":1}}],[\"建议还是加上\",{\"1\":{\"133\":1}}],[\"建议多使用括号来明确运算顺序\",{\"1\":{\"126\":1}}],[\"建议安装以下插件\",{\"1\":{\"85\":1}}],[\"建议放到最后做\",{\"1\":{\"20\":1}}],[\"建立一个行向量结构体\",{\"1\":{\"34\":1}}],[\"相对于递归的抽象\",{\"1\":{\"150\":1}}],[\"相等\",{\"1\":{\"108\":1}}],[\"相信使用\",{\"1\":{\"58\":1}}],[\"相信你们再也不会在群里问超时怎么办\",{\"1\":{\"55\":1}}],[\"相信加上注释和清晰的变量命名\",{\"1\":{\"34\":1}}],[\"相乘\",{\"1\":{\"52\":1}}],[\"相当于之前提到的两种方法的结合\",{\"1\":{\"121\":1}}],[\"相当于在一张二维平面图上方一定距离处\",{\"1\":{\"82\":1}}],[\"相当于s\",{\"1\":{\"37\":1}}],[\"相当于乘上\",{\"1\":{\"8\":1}}],[\"用户注册\",{\"1\":{\"198\":1}}],[\"用户登录\",{\"1\":{\"198\":1}}],[\"用于管理项目的依赖和项目的启动命令\",{\"1\":{\"198\":1}}],[\"用于配置\",{\"1\":{\"198\":1}}],[\"用于选择页面中的元素\",{\"1\":{\"174\":1}}],[\"用于比较两个值的大小关系\",{\"1\":{\"134\":4}}],[\"用于比较两个值是否不相等\",{\"1\":{\"134\":1}}],[\"用于比较两个值是否相等\",{\"1\":{\"134\":1}}],[\"用于计算两个操作数的余数\",{\"1\":{\"125\":1}}],[\"用于将两个操作数的对应位进行异或运算\",{\"1\":{\"126\":1}}],[\"用于将两个操作数的对应位进行或运算\",{\"1\":{\"126\":1}}],[\"用于将两个操作数的对应位进行与运算\",{\"1\":{\"126\":1}}],[\"用于将两个操作数相乘\",{\"1\":{\"125\":1}}],[\"用于将两个操作数相加\",{\"1\":{\"125\":1}}],[\"用于将操作数的所有位向右移动指定的位数\",{\"1\":{\"126\":1}}],[\"用于将操作数的所有位向左移动指定的位数\",{\"1\":{\"126\":1}}],[\"用于将操作数的所有位进行取反运算\",{\"1\":{\"126\":1}}],[\"用于将操作数减\",{\"1\":{\"125\":1}}],[\"用于将操作数加\",{\"1\":{\"125\":1}}],[\"用于将一个操作数除以另一个操作数\",{\"1\":{\"125\":1}}],[\"用于将一个操作数减去另一个操作数\",{\"1\":{\"125\":1}}],[\"用于将右侧的值赋给左侧的变量\",{\"1\":{\"99\":1}}],[\"用于表示特殊的字符\",{\"1\":{\"121\":1}}],[\"用于指定输出数据的格式\",{\"1\":{\"121\":1}}],[\"用于指定输入数据的格式\",{\"1\":{\"120\":1}}],[\"用于视觉特效的sf\",{\"1\":{\"67\":1}}],[\"用这种结构\",{\"1\":{\"73\":1}}],[\"用起来爽到高超\",{\"1\":{\"61\":1}}],[\"用来表示这个数字是正数还是负数\",{\"1\":{\"46\":1}}],[\"用\",{\"1\":{\"46\":2,\"61\":1}}],[\"用地址\",{\"0\":{\"158\":1},\"1\":{\"43\":1}}],[\"用一用的\",{\"1\":{\"34\":1}}],[\"用0占掉了第一格\",{\"1\":{\"20\":2}}],[\"然而\",{\"1\":{\"43\":1,\"158\":1,\"192\":1}}],[\"然而并没有题可以写\",{\"1\":{\"37\":1}}],[\"然而这也没有题\",{\"1\":{\"31\":1}}],[\"然后我们使用\",{\"1\":{\"202\":1}}],[\"然后我们定义了一个函数指针\",{\"1\":{\"159\":1}}],[\"然后我们来找盘子为\",{\"1\":{\"23\":1,\"148\":1}}],[\"然后继续执行后面的代码\",{\"1\":{\"141\":1}}],[\"然后再继续执行后面的代码\",{\"1\":{\"202\":1}}],[\"然后再判断\",{\"1\":{\"139\":1}}],[\"然后再去看你的代码\",{\"1\":{\"58\":1}}],[\"然后执行\",{\"1\":{\"137\":1}}],[\"然后判断\",{\"1\":{\"137\":1}}],[\"然后判断p\",{\"1\":{\"17\":1}}],[\"然后加\",{\"1\":{\"106\":1,\"108\":1}}],[\"然后程序结束\",{\"1\":{\"91\":1}}],[\"然后右键点击\",{\"1\":{\"86\":1}}],[\"然后在播放的时候指定播放的位置\",{\"1\":{\"82\":1}}],[\"然后在正当中贴上一个\",{\"1\":{\"79\":1}}],[\"然后就是musicplayer类\",{\"1\":{\"82\":1}}],[\"然后就是每一个子问题的具体求解\",{\"1\":{\"20\":1}}],[\"然后把各种界面都整成同一种通用类型的子类往里面压入不就完事了\",{\"1\":{\"79\":1}}],[\"然后把原来的移过来\",{\"1\":{\"34\":1}}],[\"然后往里面扔就完事了\",{\"1\":{\"76\":1}}],[\"然后以\",{\"1\":{\"55\":1}}],[\"然后\",{\"1\":{\"55\":1,\"94\":1,\"175\":1}}],[\"然后当你按下任意按钮以后它会继续生成新数据\",{\"1\":{\"52\":1}}],[\"然后分别按要求输出就行了\",{\"1\":{\"37\":1}}],[\"然后才可以使用这个类型来定义变量\",{\"1\":{\"27\":1}}],[\"然后具体的合并方式实际上很好想\",{\"1\":{\"23\":1}}],[\"然后将函数的地址赋值给函数指针\",{\"1\":{\"159\":1}}],[\"然后将\",{\"1\":{\"86\":1}}],[\"然后将这两个数组合并成一个有序的数组\",{\"1\":{\"23\":1}}],[\"然后将它们组合起来解决整个问题\",{\"1\":{\"17\":1}}],[\"然后通过一种特定的合并的方法将两个有序的序列合成一个有序的序列\",{\"1\":{\"23\":1}}],[\"然后关键的在下面\",{\"1\":{\"23\":1,\"148\":1}}],[\"然后考虑两层\",{\"1\":{\"23\":1,\"148\":1}}],[\"然后返回去找别的填数的可能\",{\"1\":{\"20\":1}}],[\"然后是这个函数的名字\",{\"1\":{\"17\":1}}],[\"单词之间使用下划线\",{\"1\":{\"102\":2}}],[\"单行注释以\",{\"1\":{\"92\":1}}],[\"单纯用加法的话\",{\"1\":{\"37\":1}}],[\"单个链表节点\",{\"1\":{\"31\":1}}],[\"单独链表的应用范围\",{\"1\":{\"31\":1}}],[\"抛开没有不谈\",{\"1\":{\"31\":1}}],[\"且\",{\"1\":{\"134\":1}}],[\"且能够完美地适配不同的屏幕分辨率和尺寸\",{\"1\":{\"61\":1}}],[\"且不能直接调用链表当中某个元素的值\",{\"1\":{\"31\":1}}],[\"且这个\",{\"1\":{\"8\":1}}],[\"链表的特点在于它占用的内存不像数组那样是连续的\",{\"1\":{\"31\":1}}],[\"链表在需要节省内存空间\",{\"1\":{\"31\":1}}],[\"要使用函数指针\",{\"1\":{\"159\":1}}],[\"要使用它们\",{\"1\":{\"119\":1}}],[\"要得到从起点到终点的路径\",{\"1\":{\"149\":1}}],[\"要是真的不知道大项目该怎么写\",{\"1\":{\"49\":1}}],[\"要慢不少\",{\"1\":{\"46\":1}}],[\"要智能的多\",{\"1\":{\"46\":1}}],[\"要想看懂它\",{\"1\":{\"31\":1}}],[\"要推出斐波那契数列\",{\"1\":{\"23\":1}}],[\"手搓链表\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"与我们想要的结果冲突\",{\"1\":{\"177\":1}}],[\"与\",{\"1\":{\"28\":1}}],[\"与运算\",{\"1\":{\"8\":1}}],[\"联合体通常用于存储一些互斥的数据\",{\"1\":{\"28\":1}}],[\"联合体的大小等于其中最大的字段的大小\",{\"1\":{\"28\":1}}],[\"联合体\",{\"1\":{\"28\":1}}],[\"让我们来简单地过一下这个目录结构\",{\"1\":{\"198\":1}}],[\"让你自己完成\",{\"1\":{\"192\":1}}],[\"让用户有更好的体验\",{\"1\":{\"173\":1}}],[\"让它自行选取符合条件的实体进行更新\",{\"1\":{\"76\":1}}],[\"让它更好理解呢\",{\"1\":{\"64\":1}}],[\"让他来控制所有文件的存取呢\",{\"1\":{\"67\":1}}],[\"让可执行文件点开即玩\",{\"1\":{\"58\":1}}],[\"让含义更贴近面向对象表达\",{\"1\":{\"27\":1}}],[\"让oj的前几题较为简单\",{\"1\":{\"17\":1}}],[\"`this`\",{\"1\":{\"27\":1}}],[\"`utils\",{\"1\":{\"27\":1}}],[\"像我之前提到的\",{\"1\":{\"91\":2}}],[\"像这样\",{\"1\":{\"27\":1,\"202\":1}}],[\"像斐波那契数列的第n项\",{\"1\":{\"23\":1}}],[\"兄弟\",{\"1\":{\"27\":1,\"108\":1,\"164\":1}}],[\"有了更深入的了解\",{\"1\":{\"177\":1}}],[\"有没有办法呢\",{\"1\":{\"164\":1}}],[\"有关\",{\"1\":{\"58\":1}}],[\"有时剪枝是优化时间的很关键的一步\",{\"1\":{\"55\":1}}],[\"有负号\",{\"1\":{\"46\":1}}],[\"有些人特别钟爱用\",{\"1\":{\"34\":1}}],[\"有些同学可能做了这个题单发现有些题目递归来做特别容易超时\",{\"1\":{\"23\":1}}],[\"有的时候我们还是需要获取某个东西的绝对位置\",{\"1\":{\"70\":1}}],[\"有的\",{\"1\":{\"27\":2,\"108\":2,\"164\":2}}],[\"后者表示等于\",{\"1\":{\"134\":1}}],[\"后面的每一项都是前两项的和\",{\"1\":{\"148\":1}}],[\"后面的所有代码都不会被执行\",{\"1\":{\"91\":1}}],[\"后面的返回值是可以自行指定的\",{\"1\":{\"91\":1}}],[\"后面可以跟两种文件\",{\"1\":{\"91\":1}}],[\"后面有紧接着对应的\",{\"1\":{\"8\":1}}],[\"后果自负\",{\"1\":{\"49\":1}}],[\"后缀\",{\"1\":{\"27\":1,\"164\":1}}],[\"关联起来\",{\"1\":{\"198\":1}}],[\"关闭输入显示\",{\"1\":{\"52\":1}}],[\"关键字来表示无符号整型\",{\"1\":{\"105\":1}}],[\"关键字\",{\"1\":{\"101\":2}}],[\"关键字了\",{\"1\":{\"27\":1}}],[\"关键的来了\",{\"1\":{\"27\":1}}],[\"关于\",{\"0\":{\"46\":1},\"1\":{\"5\":4}}],[\"关于溢出\",{\"1\":{\"5\":1}}],[\"关于存储空间\",{\"1\":{\"5\":1}}],[\"关于整型变量的补充\",{\"1\":{\"5\":1}}],[\"定义并初始化一个\",{\"1\":{\"164\":1}}],[\"定义一个名为\",{\"1\":{\"164\":1}}],[\"定义的函数同时可以访问上下文中定义的变量和方法\",{\"1\":{\"203\":1}}],[\"定义的函数只能访问全局定义的变量和方法\",{\"1\":{\"203\":1}}],[\"定义的类型\",{\"1\":{\"27\":1}}],[\"定义的别名中加上\",{\"1\":{\"27\":1}}],[\"定义结构体变量\",{\"1\":{\"27\":1}}],[\"定义结构体类型\",{\"1\":{\"27\":1}}],[\"定义方向\",{\"1\":{\"20\":2}}],[\"结尾\",{\"1\":{\"92\":1}}],[\"结果会舍去小数部分\",{\"1\":{\"125\":1}}],[\"结果\",{\"1\":{\"43\":1,\"158\":1}}],[\"结构体可以储存变量我明白了\",{\"1\":{\"164\":1}}],[\"结构体变量类型的命名规则也是使用\",{\"1\":{\"164\":1}}],[\"结构体\",{\"0\":{\"164\":1},\"1\":{\"164\":1}}],[\"结构体和共用体\",{\"0\":{\"163\":1}}],[\"结构体类似\",{\"1\":{\"28\":1}}],[\"结构体是一种复合类型\",{\"1\":{\"27\":1}}],[\"结合\",{\"1\":{\"8\":1}}],[\"中已经包含\",{\"1\":{\"198\":1}}],[\"中修改\",{\"1\":{\"198\":1}}],[\"中最基本的概念\",{\"1\":{\"174\":1}}],[\"中的三个核心概念\",{\"1\":{\"198\":1}}],[\"中的代码高亮似乎丢失了\",{\"1\":{\"195\":1}}],[\"中的一个基本概念\",{\"1\":{\"165\":1}}],[\"中的\",{\"1\":{\"91\":1,\"198\":2}}],[\"中的结构体中是可以定义方法的\",{\"1\":{\"27\":1}}],[\"中输入以下命令\",{\"1\":{\"86\":1,\"87\":1}}],[\"中使用\",{\"1\":{\"86\":1,\"94\":1}}],[\"中\",{\"1\":{\"86\":1,\"94\":1,\"198\":3,\"203\":1}}],[\"中等号两侧这两种表达是等价的\",{\"1\":{\"43\":1,\"158\":1}}],[\"中提到了一些更进阶的数据类型定义方式\",{\"1\":{\"26\":1}}],[\"中间柱才是你这一步的终点柱\",{\"1\":{\"23\":1,\"148\":1}}],[\"中间柱子和终点柱子\",{\"1\":{\"23\":1,\"148\":1}}],[\"75\",{\"1\":{\"195\":1}}],[\"754\",{\"1\":{\"114\":1}}],[\"7\",{\"0\":{\"26\":1,\"82\":1,\"170\":1},\"1\":{\"28\":1,\"108\":2,\"167\":1}}],[\"提供了\",{\"1\":{\"202\":1}}],[\"提单链接\",{\"1\":{\"23\":1}}],[\"提示\",{\"1\":{\"2\":3,\"5\":4,\"8\":3,\"14\":1,\"17\":1,\"27\":3,\"43\":3,\"52\":1,\"61\":1,\"85\":2,\"86\":1,\"87\":1,\"91\":2,\"92\":1,\"99\":1,\"100\":1,\"105\":1,\"109\":1,\"120\":3,\"121\":2,\"125\":1,\"126\":1,\"133\":2,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"139\":1,\"140\":2,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"157\":1,\"158\":2,\"164\":4,\"165\":2,\"173\":1,\"181\":1,\"195\":2,\"198\":6,\"201\":1,\"203\":1}}],[\"祝大家本周末以及下周的期中考试愉快\",{\"1\":{\"23\":1}}],[\"祝大家在之后的题单中能够快乐地提升自己\",{\"1\":{\"2\":1}}],[\"留给有条件的同学们自己去思考\",{\"1\":{\"23\":1}}],[\"留给大家自己去实现\",{\"1\":{\"23\":1}}],[\"逆序对可以计算吗\",{\"1\":{\"23\":1}}],[\"显然\",{\"1\":{\"201\":1}}],[\"显然是从它们左边一格或者上边一格来\",{\"1\":{\"149\":1}}],[\"显然这两个数构成了一个逆序对\",{\"1\":{\"23\":1}}],[\"显然冒泡排序可以解决这个问题\",{\"1\":{\"23\":1}}],[\"显然每一行只可能有一个皇后\",{\"1\":{\"20\":1}}],[\"json\",{\"1\":{\"198\":5}}],[\"jsconfig\",{\"1\":{\"198\":1}}],[\"js\",{\"1\":{\"198\":12},\"2\":{\"197\":1}}],[\"jpg\",{\"1\":{\"187\":1,\"195\":1}}],[\"justify\",{\"1\":{\"175\":7,\"195\":2}}],[\"j++\",{\"1\":{\"149\":1}}],[\"javascript\",{\"1\":{\"198\":2,\"203\":1},\"2\":{\"194\":1,\"197\":1,\"200\":1,\"205\":1}}],[\"java\",{\"1\":{\"85\":1}}],[\"j\",{\"1\":{\"23\":3,\"55\":1,\"149\":3}}],[\"存地址\",{\"0\":{\"157\":1},\"1\":{\"43\":1}}],[\"存图\",{\"1\":{\"34\":1}}],[\"存图实际上有\",{\"1\":{\"20\":1}}],[\"存在\",{\"1\":{\"23\":1}}],[\"次运算\",{\"1\":{\"149\":1}}],[\"次的循环次数\",{\"1\":{\"55\":1}}],[\"次所以这个程序实际上需要约\",{\"1\":{\"55\":1}}],[\"次循环次数\",{\"1\":{\"55\":1}}],[\"次循环次数大概刚好不过1s的时间限制\",{\"1\":{\"55\":1}}],[\"次循环就快上不少\",{\"1\":{\"23\":1}}],[\"次循环就能解决这个问题\",{\"1\":{\"23\":1}}],[\"次就能将它分到最小\",{\"1\":{\"23\":1}}],[\"次\",{\"1\":{\"23\":1}}],[\"次方\",{\"1\":{\"8\":1}}],[\"实例挂载到页面上了\",{\"1\":{\"198\":1}}],[\"实例挂载到\",{\"1\":{\"198\":1}}],[\"实例\",{\"1\":{\"27\":1,\"198\":1,\"202\":2,\"203\":3}}],[\"实现\",{\"1\":{\"73\":1}}],[\"实现这些函数\",{\"1\":{\"27\":1}}],[\"实现的时候还是要写的\",{\"1\":{\"27\":1}}],[\"实现起来略有一些麻烦\",{\"1\":{\"23\":1}}],[\"实际上得到的结果是除以\",{\"1\":{\"108\":1}}],[\"实际上只拥有\",{\"1\":{\"105\":1}}],[\"实际上你合并的时候需要将这两半序列都过一遍\",{\"1\":{\"55\":1}}],[\"实际上这种绕过方式的精髓在于\",{\"1\":{\"46\":1}}],[\"实际上就是递归的反向\",{\"1\":{\"150\":1}}],[\"实际上就是\",{\"1\":{\"46\":1}}],[\"实际上就是通过添加一些边界条件来跳过一些不必要的搜索\",{\"1\":{\"20\":1}}],[\"实际上在ctype\",{\"1\":{\"46\":1}}],[\"实际上也许就是\",{\"1\":{\"46\":1}}],[\"实际上指的就是\",{\"1\":{\"43\":1,\"158\":1}}],[\"实际上建议弄到\",{\"1\":{\"37\":1}}],[\"实际上一段代码就足够\",{\"1\":{\"31\":1}}],[\"实际上一样\",{\"1\":{\"5\":1}}],[\"实际上递归就是一种量变引起质变的方式\",{\"1\":{\"23\":1,\"148\":1}}],[\"实际上我们可以把\",{\"1\":{\"23\":1,\"148\":1}}],[\"实际上是存在对应字符的\",{\"1\":{\"116\":1}}],[\"实际上是历史遗留问题\",{\"1\":{\"14\":1}}],[\"实际上是一样的\",{\"1\":{\"5\":1}}],[\"实际上是没有必要的\",{\"1\":{\"5\":1}}],[\"实际上\",{\"1\":{\"5\":1,\"20\":2,\"118\":1,\"137\":1,\"149\":1}}],[\"归并排序是可以过的\",{\"1\":{\"55\":1}}],[\"归并排序来帮你\",{\"1\":{\"23\":1}}],[\"归并排序可以用来解决逆序对问题\",{\"1\":{\"23\":1}}],[\"归并排序的目的是通过二分将整个序列的排序分成两个小序列的排序\",{\"1\":{\"23\":1}}],[\"归并排序到底是什么意思\",{\"1\":{\"23\":1}}],[\"归并排序\",{\"1\":{\"23\":1}}],[\"找一个大模型\",{\"1\":{\"178\":1}}],[\"找到一条路径\",{\"1\":{\"149\":1}}],[\"找到一种更容易写出的解决方案\",{\"1\":{\"55\":1}}],[\"找到自己习惯的写法\",{\"1\":{\"23\":1}}],[\"找到自己的方法\",{\"1\":{\"23\":1}}],[\"找出结果\",{\"1\":{\"23\":1}}],[\"欸\",{\"1\":{\"23\":1,\"148\":1}}],[\"总有一天你会发现\",{\"1\":{\"23\":1,\"148\":1}}],[\"总结的几点注意\",{\"1\":{\"20\":1}}],[\"移到终点柱子上\",{\"1\":{\"23\":1,\"148\":1}}],[\"认作是一柱二柱三柱那格局就小了\",{\"1\":{\"23\":1,\"148\":1}}],[\"自减运算符\",{\"1\":{\"125\":1}}],[\"自增运算符\",{\"1\":{\"125\":1}}],[\"自然对数的底数等\",{\"1\":{\"101\":1}}],[\"自然不用说\",{\"1\":{\"23\":1,\"148\":1}}],[\"自行安装即可\",{\"1\":{\"85\":1}}],[\"自己心里清楚\",{\"1\":{\"31\":1}}],[\"自己算一下这些点的行号和列号之间大概有什么关系\",{\"1\":{\"20\":1}}],[\"层的问题\",{\"1\":{\"23\":1,\"148\":2}}],[\"层从中间柱子通过起点柱子的帮助\",{\"1\":{\"23\":1,\"148\":1}}],[\"层从起始柱子通过终点柱子的帮助移到中间柱子去\",{\"1\":{\"23\":1,\"148\":1}}],[\"层\",{\"1\":{\"23\":3,\"148\":3}}],[\"层抽象成两层\",{\"1\":{\"23\":1,\"148\":1}}],[\"层时的处理方法\",{\"1\":{\"23\":1,\"148\":1}}],[\"竟然这么简单\",{\"1\":{\"23\":1}}],[\"汉诺塔问题\",{\"1\":{\"23\":1,\"148\":1}}],[\"空格等\",{\"1\":{\"122\":1}}],[\"空格能让你的不少算式看上去更加分散\",{\"1\":{\"5\":1}}],[\"空间复杂度\",{\"1\":{\"55\":1}}],[\"空间可以算\",{\"1\":{\"23\":1}}],[\"空间比时间更好掌握\",{\"1\":{\"23\":1}}],[\"毕竟\",{\"1\":{\"23\":1}}],[\"诶\",{\"1\":{\"23\":1}}],[\"正处于激活状态\",{\"1\":{\"174\":1}}],[\"正数\",{\"1\":{\"133\":1,\"135\":1,\"136\":1}}],[\"正好就是\",{\"1\":{\"108\":1}}],[\"正常机子\",{\"1\":{\"55\":1}}],[\"正常做数据范围应该是能过的\",{\"1\":{\"20\":1}}],[\"正确性验证\",{\"0\":{\"52\":1}}],[\"正是因为上述原因导致我们重复去求解了明明只需要求解一次的问题\",{\"1\":{\"23\":1}}],[\"忘记重新过一遍数据范围了otz\",{\"1\":{\"23\":1}}],[\"至此\",{\"1\":{\"198\":1}}],[\"至于它为什么快呢\",{\"1\":{\"23\":1}}],[\"至于它们两个是怎么求出来的\",{\"1\":{\"23\":1}}],[\"至少占用\",{\"1\":{\"5\":1}}],[\"直到走到终点\",{\"1\":{\"149\":1}}],[\"直到起点\",{\"1\":{\"149\":1}}],[\"直到\",{\"1\":{\"137\":1,\"138\":1,\"139\":1,\"150\":1}}],[\"直到满足某个条件为止\",{\"1\":{\"137\":1}}],[\"直到遇到\",{\"1\":{\"136\":1}}],[\"直到读到非数字\",{\"1\":{\"46\":1}}],[\"直到读到我们需要的数字\",{\"1\":{\"46\":1}}],[\"直到读入到自己需要的数据\",{\"1\":{\"46\":1}}],[\"直到将数组拆成长度为1\",{\"1\":{\"23\":1}}],[\"直到达到边界\",{\"1\":{\"23\":1}}],[\"直接导致整个学习过程十分的麻烦而且并不容易\",{\"1\":{\"192\":1}}],[\"直接跳转到\",{\"1\":{\"141\":1}}],[\"直接跳过这一个方向\",{\"1\":{\"20\":1}}],[\"直接上代码你就懂了\",{\"1\":{\"52\":1}}],[\"直接使用\",{\"1\":{\"46\":1,\"202\":1}}],[\"直接把它挪到终点柱子就好了\",{\"1\":{\"23\":1,\"148\":1}}],[\"直接走\",{\"1\":{\"20\":1}}],[\"直接返回\",{\"1\":{\"20\":2}}],[\"直接输出\",{\"1\":{\"20\":1}}],[\"问问前两项\",{\"1\":{\"23\":1}}],[\"问问f\",{\"1\":{\"23\":1}}],[\"问题\",{\"1\":{\"20\":1}}],[\"≥\",{\"1\":{\"23\":1}}],[\"于是很轻松地就能写出以下代码\",{\"1\":{\"149\":1}}],[\"于是\",{\"1\":{\"23\":1}}],[\"于是我们便学会了对变量进行基本的处理\",{\"1\":{\"2\":1}}],[\"先行学习\",{\"1\":{\"181\":1}}],[\"先判断\",{\"1\":{\"138\":1}}],[\"先执行\",{\"1\":{\"137\":1}}],[\"先给它来点颜色\",{\"1\":{\"176\":1}}],[\"先给自己准备好的每一个音乐都准备好独特的id\",{\"1\":{\"82\":1}}],[\"先给代码后解释\",{\"1\":{\"23\":1,\"148\":1}}],[\"先解释一下这个函数中各个参数的含义\",{\"1\":{\"23\":1,\"148\":1}}],[\"先把代码写在这里\",{\"1\":{\"23\":1}}],[\"先来看一下写法\",{\"1\":{\"8\":1}}],[\"先来看一下用法\",{\"1\":{\"8\":1}}],[\"决定提前拿出题单\",{\"1\":{\"23\":1}}],[\"感觉各位同学对递归可能是一知半解\",{\"1\":{\"23\":1}}],[\"感谢各位的收看\",{\"1\":{\"17\":1}}],[\"会被渲染到\",{\"1\":{\"198\":1}}],[\"会检查当前用户是否已经登录\",{\"1\":{\"198\":1}}],[\"会自动帮你处理路由\",{\"1\":{\"198\":1}}],[\"会自动为你处理\",{\"1\":{\"198\":1}}],[\"会自动检查平台\",{\"1\":{\"58\":1}}],[\"会显得更加高效和直接\",{\"1\":{\"150\":1}}],[\"会显得更加简洁和直观\",{\"1\":{\"150\":1}}],[\"会导致程序卡死\",{\"1\":{\"137\":1}}],[\"会默认将软件安装在\",{\"1\":{\"86\":1}}],[\"会分配一段连续的内存空间\",{\"1\":{\"27\":1}}],[\"会在接下来的讲解中一并讲掉这题是怎么做的\",{\"1\":{\"23\":1}}],[\"会在题单中放一道经典的需要用归并排序的问题\",{\"1\":{\"23\":1}}],[\"会做即可\",{\"1\":{\"23\":1}}],[\"会看到题目给定的时空限制\",{\"1\":{\"5\":1}}],[\"频道似乎会吞空格\",{\"1\":{\"20\":1}}],[\"已经修正\",{\"1\":{\"20\":1}}],[\"9\",{\"1\":{\"20\":1,\"46\":1,\"140\":1,\"195\":1}}],[\"注释有两种形式\",{\"1\":{\"92\":1}}],[\"注释是\",{\"1\":{\"92\":1}}],[\"注\",{\"1\":{\"20\":1,\"23\":1}}],[\"注意后缀名\",{\"1\":{\"52\":1}}],[\"注意这里障碍物不止一个\",{\"1\":{\"20\":1}}],[\"注意看某一条从右上到左下的斜线上每一个点的坐标\",{\"1\":{\"20\":1}}],[\"注意观察题目的数据范围思考在最坏的情况下自己的算式会不会有某个地方超出了变量的存储范围\",{\"1\":{\"11\":1}}],[\"注意\",{\"1\":{\"5\":3,\"8\":1,\"17\":1,\"34\":1,\"43\":2,\"85\":1,\"86\":1,\"126\":1,\"133\":3,\"134\":1,\"140\":1,\"141\":1,\"147\":1,\"148\":1,\"149\":1,\"158\":2,\"165\":1}}],[\"接下来是\",{\"1\":{\"195\":1}}],[\"接下来我们来详细剖析一下\",{\"1\":{\"133\":1}}],[\"接下来我们来具体解释这些批处理命令\",{\"1\":{\"52\":1}}],[\"接下来我们假设\",{\"1\":{\"52\":1}}],[\"接下来所有的文件都在同一个文件夹里\",{\"1\":{\"52\":1}}],[\"接下来就轮到我们的对拍上场辣\",{\"1\":{\"52\":1}}],[\"接下来就大概的看一看实现的代码\",{\"1\":{\"34\":1}}],[\"接下来\",{\"1\":{\"20\":1,\"27\":1,\"149\":1,\"198\":1}}],[\"接下来进入十分重要的一环\",{\"1\":{\"20\":1}}],[\"优化了搜索的效率\",{\"1\":{\"20\":1}}],[\"答案自然是可以的\",{\"1\":{\"148\":1}}],[\"答案自然是有的\",{\"1\":{\"108\":1}}],[\"答案是\",{\"1\":{\"46\":1}}],[\"答案已经最小\",{\"1\":{\"20\":1}}],[\"答案显然可以直接得出\",{\"1\":{\"14\":1}}],[\"绝对能把搜索写对\",{\"1\":{\"20\":1}}],[\"绝对值\",{\"1\":{\"5\":1}}],[\"无事发生\",{\"1\":{\"149\":2}}],[\"无论是简单还是复杂的界面\",{\"1\":{\"198\":1}}],[\"无论你在什么地方修改了它的值\",{\"1\":{\"43\":1,\"158\":1}}],[\"无论条件成立与否它都会先执行一次\",{\"1\":{\"11\":1}}],[\"无所谓\",{\"1\":{\"20\":1}}],[\"枚举方向\",{\"1\":{\"20\":1}}],[\"枚举类型默认从\",{\"1\":{\"5\":1}}],[\"枚举类型实际上也是\",{\"1\":{\"5\":1}}],[\"走不通\",{\"1\":{\"149\":2}}],[\"走它干嘛\",{\"1\":{\"20\":1}}],[\"走过了\",{\"1\":{\"20\":1}}],[\"走到\",{\"1\":{\"20\":1}}],[\"邻接矩阵\",{\"1\":{\"20\":1}}],[\"时间复杂度\",{\"1\":{\"55\":1}}],[\"时间常数大的起飞\",{\"1\":{\"34\":1}}],[\"时\",{\"1\":{\"20\":1,\"106\":4,\"120\":1}}],[\"具体占用大小因平台而异\",{\"1\":{\"114\":1}}],[\"具体步骤可以在网络中搜到\",{\"1\":{\"86\":1}}],[\"具体实现非常弱智\",{\"1\":{\"73\":1}}],[\"具体的函数实现就不放在这了\",{\"1\":{\"64\":1}}],[\"具体使用哪种方法\",{\"1\":{\"150\":1}}],[\"具体使用\",{\"1\":{\"46\":1}}],[\"具体如下\",{\"1\":{\"37\":1}}],[\"具体解释在下面\",{\"1\":{\"23\":1}}],[\"具体子问题做法\",{\"1\":{\"20\":1}}],[\"具体怎么实现自然不必说\",{\"1\":{\"17\":1}}],[\"终止条件\",{\"1\":{\"20\":1}}],[\"采取之前蚂蚁寻路的那种通过讨论绕开障碍物的做法是不可取的\",{\"1\":{\"20\":1}}],[\"求最少要走多少步才能到终点\",{\"1\":{\"20\":1}}],[\"从起点开始搜索\",{\"1\":{\"149\":1}}],[\"从起点开始\",{\"1\":{\"149\":1}}],[\"从终点左边一格或者从终点上边一格来\",{\"1\":{\"149\":1}}],[\"从而降低时间复杂度\",{\"1\":{\"149\":1}}],[\"从而提高代码的可读性和可维护性\",{\"1\":{\"146\":1}}],[\"从而能在相当于n次循环的时间内解决了这个问题\",{\"1\":{\"23\":1}}],[\"从最高层一层一层询问下去\",{\"1\":{\"23\":1}}],[\"从整个搜索过程思考一下为什么它叫这个名字\",{\"1\":{\"20\":1}}],[\"从\",{\"1\":{\"20\":1,\"86\":1}}],[\"从左上到右下的斜线同理\",{\"1\":{\"20\":1}}],[\"拿一道简单的题目来举例\",{\"1\":{\"20\":1}}],[\"八皇后问题在洛谷上能找到这道题\",{\"1\":{\"20\":1}}],[\"同理\",{\"1\":{\"108\":1,\"121\":1,\"135\":1}}],[\"同理先记id\",{\"1\":{\"82\":1}}],[\"同样是这个概念\",{\"1\":{\"91\":1}}],[\"同样的种子出来的随机数是不会变的\",{\"1\":{\"52\":1}}],[\"同样的数据\",{\"1\":{\"52\":1}}],[\"同学们也许需要克服一点困难\",{\"1\":{\"23\":1}}],[\"同学们需要通过一定量的练习才能掌握的差不多\",{\"1\":{\"23\":1}}],[\"同学们需要自己写一写\",{\"1\":{\"23\":1}}],[\"同学们是不是对递归有了更深的理解\",{\"1\":{\"23\":1}}],[\"同一条斜线上的点\",{\"1\":{\"20\":1}}],[\"同时会自动生成一个同名的可执行文件在你的代码旁边\",{\"1\":{\"94\":1}}],[\"同时不需要进行随机寻址操作时\",{\"1\":{\"31\":1}}],[\"同时不要忘了返回\",{\"1\":{\"20\":1}}],[\"同时也能让存取的步骤更加的简单\",{\"1\":{\"67\":1}}],[\"同时也可以使算式看上去更加易于理解\",{\"1\":{\"5\":1}}],[\"同时也希望大家能获得对程序设计更深的理解\",{\"1\":{\"2\":1}}],[\"同时\",{\"1\":{\"5\":1,\"8\":1,\"23\":1,\"149\":1,\"202\":1}}],[\"容易超时\",{\"1\":{\"20\":1}}],[\"固然是可以的\",{\"1\":{\"20\":1}}],[\"列的问题\",{\"1\":{\"20\":1}}],[\"条件的判断略有不同\",{\"1\":{\"20\":1}}],[\"棋盘的行来分\",{\"1\":{\"20\":1}}],[\"上往往是叫\",{\"1\":{\"94\":1}}],[\"上随便找了一个\",{\"1\":{\"58\":1}}],[\"上\",{\"1\":{\"58\":1}}],[\"上都是非常有效的\",{\"1\":{\"46\":1}}],[\"上面定义的方法都相当于是静态方法\",{\"1\":{\"27\":1}}],[\"上面的程序里面已经标注的很清楚了\",{\"1\":{\"20\":1}}],[\"上课内容听不懂\",{\"1\":{\"2\":1}}],[\"取模运算符\",{\"1\":{\"125\":1}}],[\"取模运算十分神奇\",{\"1\":{\"11\":1}}],[\"取地址\",{\"0\":{\"156\":1},\"1\":{\"43\":1}}],[\"取消标记\",{\"1\":{\"20\":1}}],[\"view\",{\"1\":{\"198\":2}}],[\"viewport\",{\"1\":{\"198\":1}}],[\"views\",{\"1\":{\"198\":11}}],[\"vite\",{\"1\":{\"198\":4}}],[\"video>\",{\"1\":{\"187\":1}}],[\"video\",{\"1\":{\"187\":1}}],[\"vis\",{\"1\":{\"20\":14,\"149\":6}}],[\"vue都可以胜任\",{\"1\":{\"198\":1}}],[\"vue\",{\"0\":{\"195\":1},\"1\":{\"181\":1,\"198\":40}}],[\"vue3\",{\"0\":{\"192\":1,\"198\":1,\"201\":1,\"211\":1},\"1\":{\"195\":3,\"201\":2},\"2\":{\"179\":1,\"190\":1,\"193\":1,\"194\":1,\"196\":1,\"197\":1,\"199\":1,\"200\":1,\"204\":1}}],[\"vscode\",{\"1\":{\"58\":3,\"61\":1,\"85\":3,\"94\":4}}],[\"value2\",{\"1\":{\"135\":2,\"136\":1}}],[\"value1\",{\"1\":{\"135\":2,\"136\":1}}],[\"val\",{\"1\":{\"34\":8}}],[\"vec\",{\"1\":{\"34\":33}}],[\"vector\",{\"1\":{\"34\":3}}],[\"void\",{\"1\":{\"17\":7,\"20\":3,\"23\":1,\"27\":5,\"31\":2,\"34\":8,\"43\":2,\"46\":1,\"148\":1,\"149\":2,\"158\":2,\"165\":5}}],[\"并提供了一套声明式的\",{\"1\":{\"198\":1}}],[\"并调整自己内部元素的排版\",{\"1\":{\"182\":1}}],[\"并借助\",{\"1\":{\"178\":1}}],[\"并全程使用创建出来的指针访问这个变量\",{\"1\":{\"165\":1}}],[\"并返回它们的和\",{\"1\":{\"147\":1}}],[\"并返回这段空间的首地址\",{\"1\":{\"43\":1,\"158\":1}}],[\"并参与整数运算\",{\"1\":{\"116\":1}}],[\"并仍然保持其值不变\",{\"1\":{\"101\":1}}],[\"并安装了\",{\"1\":{\"94\":1}}],[\"并将剩余未定义的路由都重定向到\",{\"1\":{\"198\":1}}],[\"并将结果打印出来\",{\"1\":{\"159\":1}}],[\"并将\",{\"1\":{\"159\":1}}],[\"并将其存储到\",{\"1\":{\"120\":1,\"122\":1}}],[\"并将其存储到指定的变量中\",{\"1\":{\"120\":1}}],[\"并将这个文件的内容插入到当前文件中\",{\"1\":{\"91\":1}}],[\"并将代码拷贝到了\",{\"1\":{\"58\":1}}],[\"并在之后添加\",{\"1\":{\"198\":1}}],[\"并在子问题的解中找到当前问题的解\",{\"1\":{\"148\":1}}],[\"并在后面的尖括号里附带一个文件名的时候\",{\"1\":{\"91\":1}}],[\"并在该文件夹中生成以下目录结构\",{\"1\":{\"58\":1}}],[\"并尽可能阻止内存泄露\",{\"0\":{\"67\":1}}],[\"并编辑includepath\",{\"1\":{\"58\":1}}],[\"并回车\",{\"1\":{\"58\":1,\"86\":1,\"87\":1}}],[\"并询问是否需要安装\",{\"1\":{\"58\":1}}],[\"并像这样添加到配置当中即可\",{\"1\":{\"58\":1}}],[\"并没有\",{\"1\":{\"55\":1}}],[\"并直接在\",{\"1\":{\"46\":1}}],[\"并把它存在了\",{\"1\":{\"43\":1,\"158\":1}}],[\"并且返回的答案也正确\",{\"1\":{\"202\":1}}],[\"并且\",{\"1\":{\"198\":1,\"202\":2}}],[\"并且使用\",{\"1\":{\"198\":1}}],[\"并且可以返回值\",{\"1\":{\"203\":2}}],[\"并且可以方便地调整元素的位置\",{\"1\":{\"182\":1}}],[\"并且可以轻松的调整元素的大小和位置\",{\"1\":{\"175\":1}}],[\"并且可以与其他对象进行交互\",{\"1\":{\"165\":1}}],[\"并且首字母小写\",{\"1\":{\"164\":1}}],[\"并且会将它作为整个程序的入口\",{\"1\":{\"91\":1}}],[\"并且这些文件正好适合\",{\"1\":{\"58\":1}}],[\"并且输出结果if\",{\"1\":{\"52\":1}}],[\"并且编写了一段较为详尽的教程来告诉你我是怎么写出这个项目的\",{\"1\":{\"49\":1}}],[\"并且某\",{\"1\":{\"23\":1}}],[\"并且我们要求你把所有的排法情况按照字典序输出\",{\"1\":{\"20\":1}}],[\"并不清楚\",{\"1\":{\"52\":1}}],[\"并不会影响前面你走过某个点\",{\"1\":{\"20\":1}}],[\"并不会严格的证明\",{\"1\":{\"11\":1}}],[\"并不是某种标准的命名法\",{\"1\":{\"5\":1}}],[\"练多了才会好\",{\"1\":{\"20\":1}}],[\"67\",{\"1\":{\"192\":2}}],[\"6c6e72\",{\"1\":{\"176\":1,\"177\":2}}],[\"6f106e\",{\"1\":{\"175\":6,\"177\":1,\"195\":1}}],[\"65535\",{\"1\":{\"52\":1,\"105\":2}}],[\"6\",{\"0\":{\"20\":1,\"23\":1,\"79\":1,\"163\":1},\"1\":{\"20\":1,\"23\":2,\"151\":2,\"195\":5}}],[\"64\",{\"1\":{\"5\":1,\"110\":1,\"113\":1}}],[\"q\",{\"1\":{\"17\":2}}],[\"再切换回来\",{\"1\":{\"202\":1}}],[\"再渲染子路由的具体内容\",{\"1\":{\"198\":1}}],[\"再来理解\",{\"1\":{\"149\":1}}],[\"再来具体解释一下\",{\"1\":{\"23\":1}}],[\"再选择一个方向走\",{\"1\":{\"149\":1}}],[\"再在之后给出定义\",{\"1\":{\"147\":1}}],[\"再判断\",{\"1\":{\"137\":1}}],[\"再提醒一次\",{\"1\":{\"133\":1}}],[\"再加\",{\"1\":{\"125\":1}}],[\"再进行运算\",{\"1\":{\"125\":1}}],[\"再进行判断\",{\"1\":{\"11\":1}}],[\"再仔细一瞧\",{\"1\":{\"108\":1}}],[\"再看一眼\",{\"0\":{\"70\":1}}],[\"再去看两道题实战演练一下\",{\"1\":{\"55\":1}}],[\"再把下面一个盘子移到终点柱子上\",{\"1\":{\"23\":1,\"148\":1}}],[\"再一层一层回来\",{\"1\":{\"23\":1}}],[\"再编写一个将\",{\"1\":{\"17\":1}}],[\"下载对应机器的安装包\",{\"1\":{\"85\":1}}],[\"下建议使用\",{\"1\":{\"58\":1}}],[\"下实际上是一样的\",{\"1\":{\"52\":1}}],[\"下怎么写对拍了\",{\"1\":{\"52\":1}}],[\"下就不一样了\",{\"1\":{\"46\":1}}],[\"下的换行符是\",{\"1\":{\"46\":1}}],[\"下的换行符实际上并不一样\",{\"1\":{\"46\":1}}],[\"下的换行符和\",{\"1\":{\"46\":1}}],[\"下出题\",{\"1\":{\"46\":1}}],[\"下次需要就直接拿出来用\",{\"1\":{\"23\":1}}],[\"下面是一个指向\",{\"1\":{\"159\":1}}],[\"下面是归并排序的一个应用的讲解\",{\"1\":{\"23\":1}}],[\"下面就可以来开始打包项目了\",{\"1\":{\"58\":1}}],[\"下面就来大致的讲一讲罢\",{\"1\":{\"55\":1}}],[\"下面\",{\"1\":{\"43\":1,\"158\":1}}],[\"下面来解决一个稍微难理解一点的\",{\"1\":{\"23\":1}}],[\"下面来举一个某\",{\"1\":{\"5\":1}}],[\"下面讲一点搜索的优化小技巧\",{\"1\":{\"20\":1}}],[\"下一个排列中用到的函数\",{\"1\":{\"17\":1}}],[\"题目要求你用这么多内存来解决问题\",{\"1\":{\"55\":1}}],[\"题目要求明显是要你用链表来动态分配内存\",{\"1\":{\"55\":1}}],[\"题\",{\"1\":{\"17\":2}}],[\"题单里有一道这个题\",{\"1\":{\"23\":1}}],[\"题单中有一些搜索的题目\",{\"1\":{\"20\":1}}],[\"题单链接\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"43\":1}}],[\"题单\",{\"1\":{\"2\":2,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1}}],[\"role\",{\"1\":{\"198\":3}}],[\"routes\",{\"1\":{\"198\":1}}],[\"routerview\",{\"1\":{\"198\":1}}],[\"router\",{\"1\":{\"198\":17}}],[\"row\",{\"1\":{\"175\":7,\"177\":1}}],[\"rgb\",{\"1\":{\"195\":1}}],[\"rgba\",{\"1\":{\"176\":1,\"177\":3,\"195\":9}}],[\"right\",{\"1\":{\"177\":3,\"195\":1}}],[\"radius\",{\"1\":{\"176\":1,\"177\":4,\"195\":4}}],[\"rand\",{\"1\":{\"52\":6}}],[\"random\",{\"1\":{\"52\":4}}],[\"runner\",{\"1\":{\"85\":1,\"94\":1}}],[\"run\",{\"1\":{\"58\":1}}],[\"r是否在某一个进制下符合条件\",{\"1\":{\"17\":1}}],[\"r\",{\"1\":{\"17\":7,\"46\":1,\"52\":3}}],[\"remake\",{\"0\":{\"210\":1}}],[\"reject\",{\"1\":{\"202\":3}}],[\"request\",{\"1\":{\"202\":1}}],[\"register\",{\"1\":{\"198\":3}}],[\"rel=\",{\"1\":{\"198\":1}}],[\"reveal\",{\"2\":{\"197\":1}}],[\"reverse\",{\"1\":{\"17\":1}}],[\"redirect\",{\"1\":{\"198\":3}}],[\"red\",{\"1\":{\"186\":1}}],[\"readint\",{\"1\":{\"46\":2}}],[\"reference\",{\"1\":{\"43\":1,\"158\":1}}],[\"response\",{\"1\":{\"202\":11}}],[\"result\",{\"1\":{\"147\":2,\"159\":2,\"202\":12}}],[\"resize\",{\"1\":{\"34\":1}}],[\"reserve\",{\"1\":{\"34\":4}}],[\"recursiondotoj\",{\"1\":{\"151\":1}}],[\"recursion\",{\"0\":{\"20\":1,\"23\":1},\"1\":{\"20\":1,\"23\":1,\"151\":1}}],[\"return\",{\"1\":{\"2\":2,\"5\":2,\"17\":4,\"20\":10,\"23\":4,\"27\":3,\"31\":1,\"34\":6,\"52\":2,\"91\":4,\"92\":1,\"93\":1,\"101\":1,\"133\":1,\"134\":1,\"136\":1,\"137\":1,\"138\":2,\"139\":2,\"141\":1,\"147\":3,\"148\":2,\"149\":7,\"159\":2,\"165\":1,\"202\":5,\"203\":2}}],[\"叫做\",{\"1\":{\"17\":1}}],[\"说话\",{\"1\":{\"165\":1}}],[\"说的严重点\",{\"1\":{\"55\":1}}],[\"说明你是操作系统大神\",{\"1\":{\"52\":1}}],[\"说到递归\",{\"1\":{\"23\":1}}],[\"说不定加了剪枝\",{\"1\":{\"20\":1}}],[\"说人话\",{\"1\":{\"17\":1}}],[\"说一声就完事了\",{\"1\":{\"17\":1}}],[\"括起来\",{\"1\":{\"116\":1}}],[\"括起来的字符串和若干变量\",{\"1\":{\"2\":1}}],[\"括号中可以填一些传入该函数的参数\",{\"1\":{\"17\":1}}],[\"值为val\",{\"1\":{\"34\":1}}],[\"值为\",{\"1\":{\"34\":1}}],[\"值\",{\"1\":{\"17\":2,\"52\":1,\"149\":1}}],[\"限制在\",{\"1\":{\"17\":1}}],[\"因此在使用指针时需要特别注意避免悬空指针\",{\"1\":{\"166\":1}}],[\"因此在使用时需要注意运算符的优先级\",{\"1\":{\"126\":1}}],[\"因此需要多分配一个字节的空间\",{\"1\":{\"165\":1}}],[\"因此我们建议自行指定结构体的创建和删除方法\",{\"1\":{\"165\":1}}],[\"因此我们需要找到其中步数最短的那条路径\",{\"1\":{\"149\":1}}],[\"因此极度不建议使用\",{\"1\":{\"141\":1}}],[\"因此不建议嵌套使用三目运算符\",{\"1\":{\"135\":1}}],[\"因此要特别小心超出\",{\"1\":{\"109\":1}}],[\"因此十分有必要借助\",{\"1\":{\"58\":1}}],[\"因此\",{\"1\":{\"17\":1,\"27\":1,\"28\":1,\"105\":3,\"106\":2,\"107\":1,\"108\":2,\"116\":2,\"118\":2,\"120\":1,\"126\":1,\"133\":1,\"148\":1,\"149\":1,\"203\":2}}],[\"因为配置问题\",{\"1\":{\"195\":1}}],[\"因为在课上并不会给你讲解项目中任何的代码\",{\"1\":{\"192\":1}}],[\"因为我们在释放后需要修改原指针的值\",{\"1\":{\"165\":1}}],[\"因为我们想要的暂停效果只不过是给画面蒙上一层灰色透明的长方形\",{\"1\":{\"79\":1}}],[\"因为理论上向右和向下走更多的路径更容易最短\",{\"1\":{\"149\":1}}],[\"因为无论如何\",{\"1\":{\"149\":2}}],[\"因为此时还没有找到路径\",{\"1\":{\"149\":1}}],[\"因为参数的位置顺序决定了调用时的顺序\",{\"1\":{\"147\":1}}],[\"因为地址空间的申请必须按照字节大小对齐\",{\"1\":{\"118\":1}}],[\"因为展开讲起来有些麻烦\",{\"1\":{\"114\":1}}],[\"因为音乐很长\",{\"1\":{\"82\":1}}],[\"因为它需要从下往上画\",{\"1\":{\"79\":1}}],[\"因为它并没有明确告诉你到底要用多大的数组才够用\",{\"1\":{\"55\":1}}],[\"因为它的使用会导致代码逻辑混乱\",{\"1\":{\"14\":1}}],[\"因为上面已经读到一个了\",{\"1\":{\"46\":1}}],[\"因为是一个完整的数字\",{\"1\":{\"46\":1}}],[\"因为一会这个符号还有另一个含义\",{\"1\":{\"43\":1,\"157\":1}}],[\"因为指针的操作非常复杂\",{\"1\":{\"43\":1,\"155\":1}}],[\"因为内存总归是一位一位的\",{\"1\":{\"37\":1}}],[\"因为如果你没有学过之前学到的位运算\",{\"1\":{\"37\":1}}],[\"因为每一步都有四个方向可以选择\",{\"1\":{\"149\":1}}],[\"因为每一层递归\",{\"1\":{\"23\":1}}],[\"因为每次跑代码所得到的结果都不一样\",{\"1\":{\"52\":1}}],[\"因为每次扩容都需要重新申请一段内存\",{\"1\":{\"34\":1}}],[\"因为只是定义\",{\"1\":{\"27\":1}}],[\"因为确实有那么一点点难挑\",{\"1\":{\"23\":1}}],[\"因为根据了解\",{\"1\":{\"23\":1}}],[\"因为你在一些步骤中终点柱并不是最开始的那个终点柱\",{\"1\":{\"23\":1,\"148\":1}}],[\"因为你实际上比一般的搜索优化了不少\",{\"1\":{\"20\":1}}],[\"因为你需要标记某一个点你有没有走过\",{\"1\":{\"20\":1}}],[\"因为这东西真的太好算辣\",{\"1\":{\"55\":1}}],[\"因为这样的穷举方式是基于递归的\",{\"1\":{\"20\":1}}],[\"因为这些变量已经声明\",{\"1\":{\"17\":1}}],[\"因为会造成代码逻辑的混乱\",{\"1\":{\"14\":1}}],[\"因为\",{\"1\":{\"11\":1,\"106\":1,\"133\":1,\"198\":2,\"202\":1}}],[\"因为定义和处理部分完全可以不填\",{\"1\":{\"8\":1}}],[\"因为有时\",{\"1\":{\"8\":1}}],[\"因为存储空间占用至少是\",{\"1\":{\"5\":1}}],[\"所有后面的问题对前面是没有影响的\",{\"1\":{\"20\":1}}],[\"所有的网络请求都是异步的\",{\"1\":{\"202\":1}}],[\"所有的前置步骤已经完成\",{\"1\":{\"58\":1}}],[\"所有的情况都探索完了\",{\"1\":{\"20\":1}}],[\"所有的位置都放好数字了\",{\"1\":{\"20\":1}}],[\"所有的程序都从这里开始执行\",{\"1\":{\"17\":1}}],[\"所以可以优先搜索向右和向下走的情况\",{\"1\":{\"149\":1}}],[\"所以大概会有\",{\"1\":{\"149\":1}}],[\"所以参数的顺序非常重要\",{\"1\":{\"147\":1}}],[\"所以上面的数组的最大下标实际上是\",{\"1\":{\"140\":1}}],[\"所以数组中的第一个元素的下标是\",{\"1\":{\"140\":1}}],[\"所以我更喜欢在之后加一个空格\",{\"1\":{\"133\":1}}],[\"所以我们需要将它的外边距设置为\",{\"1\":{\"177\":1}}],[\"所以我们需要将它们缩进一层\",{\"1\":{\"93\":1}}],[\"所以我们需要把它强制类型转换为\",{\"1\":{\"43\":1,\"158\":1}}],[\"所以我们主要来讲一下\",{\"1\":{\"85\":1}}],[\"所以我们这里只放上一个musiccount用来占位\",{\"1\":{\"82\":1}}],[\"所以我们的数组长度可以开到\",{\"1\":{\"55\":1}}],[\"所以我们自己写了一个\",{\"1\":{\"52\":1}}],[\"所以我们先把它处理了\",{\"1\":{\"46\":1}}],[\"所以我们可以尝试修改指针指向的地址来访问这个数组的任意一个位置\",{\"1\":{\"37\":1}}],[\"所以我们实际上只需要\",{\"1\":{\"23\":1}}],[\"所以我们怎么具体构造这个递归呢\",{\"1\":{\"23\":1,\"148\":1}}],[\"所以我们想知道\",{\"1\":{\"23\":1}}],[\"所以我们很形象地把这种搜索优化方法称作剪枝\",{\"1\":{\"20\":1}}],[\"所以我们暂且先把这个放在一边\",{\"1\":{\"2\":1}}],[\"所以我们在这里正式推出cpl\",{\"1\":{\"2\":1}}],[\"所以就不展开了\",{\"1\":{\"114\":1}}],[\"所以补码的值就很好计算了\",{\"1\":{\"108\":1}}],[\"所以在写\",{\"1\":{\"82\":1}}],[\"所以在此某\",{\"1\":{\"5\":1}}],[\"所以sfml的打开方式并不是像其他类型的文件一样\",{\"1\":{\"82\":1}}],[\"所以最后得出的结构是这样的\",{\"1\":{\"73\":1}}],[\"所以无法在这里加载\",{\"1\":{\"67\":1}}],[\"所以再准备一个load以备不时之需\",{\"1\":{\"67\":1}}],[\"所以为什么我们不自己写一个类\",{\"1\":{\"67\":1}}],[\"所以为什么不用\",{\"1\":{\"61\":1}}],[\"所以还是需要一种更稳妥的读入数据的方式\",{\"1\":{\"46\":1}}],[\"所以当你发现你的\",{\"1\":{\"46\":1}}],[\"所以使用了自己用\",{\"1\":{\"46\":1}}],[\"所以说\",{\"1\":{\"37\":1}}],[\"所以这个语言也被称为\",{\"1\":{\"198\":1}}],[\"所以这个代码最多只能处理\",{\"1\":{\"149\":1}}],[\"所以这个数据范围\",{\"1\":{\"55\":1}}],[\"所以这里的容量和数组大小并不相同\",{\"1\":{\"34\":1}}],[\"所以这次题目难度变化不会很大\",{\"1\":{\"20\":1}}],[\"所以这次我们主要的关注点是变量类型以及一些要注意的点\",{\"1\":{\"5\":1}}],[\"所以直接抄代码请你谨慎\",{\"1\":{\"34\":1}}],[\"所以函数参数部分\",{\"1\":{\"27\":1}}],[\"所以八皇后问题就是一个\",{\"1\":{\"20\":1}}],[\"所以终止条件依然少不了\",{\"1\":{\"20\":1}}],[\"所以一定要记得把标记去除\",{\"1\":{\"20\":1}}],[\"所以它可能会导致代码的混乱\",{\"1\":{\"141\":1}}],[\"所以它更适合用在循环次数不确定的情况下\",{\"1\":{\"139\":1}}],[\"所以它的返回值肯定是我们想要得到的那个值\",{\"1\":{\"17\":1}}],[\"所以它实际上就是\",{\"1\":{\"5\":1}}],[\"所以某\",{\"1\":{\"11\":1}}],[\"所以实际上一个\",{\"1\":{\"5\":1}}],[\"所以你最好还是不要去尝试溢出\",{\"1\":{\"5\":1}}],[\"所以\",{\"1\":{\"2\":1,\"5\":4,\"43\":1,\"55\":1,\"70\":1,\"148\":1,\"158\":1,\"192\":1,\"198\":1,\"202\":1}}],[\"作为一个合格的网络请求模块\",{\"1\":{\"202\":1}}],[\"作为第一个参数\",{\"1\":{\"165\":1}}],[\"作为这个数据类型所创建的变量能够使用的方法\",{\"1\":{\"164\":1}}],[\"作为终止条件\",{\"1\":{\"148\":1}}],[\"作为\",{\"1\":{\"17\":1}}],[\"首先指定它的\",{\"1\":{\"177\":1}}],[\"首先用\",{\"1\":{\"148\":1}}],[\"首先用if特判解决掉最小的问题\",{\"1\":{\"23\":1}}],[\"首先是大名鼎鼎的代码编辑器\",{\"1\":{\"85\":1}}],[\"首先是这个函数的返回值类型\",{\"1\":{\"17\":1}}],[\"首先在指定的文件夹路径下使用\",{\"1\":{\"58\":1}}],[\"首先你会需要循环n次来读入\",{\"1\":{\"55\":1}}],[\"首先我们需要一个保证正确的代码生成的可执行文件用来作为标准输出正确答案\",{\"1\":{\"52\":1}}],[\"首先我们需要自己写个程序来生成随机的测试数据\",{\"1\":{\"52\":1}}],[\"首先没有那么多的测试数据来给\",{\"1\":{\"52\":1}}],[\"首先找到这个变量的变量名\",{\"1\":{\"43\":1,\"156\":1}}],[\"首先\",{\"1\":{\"17\":1,\"20\":1,\"37\":1,\"105\":1,\"175\":1}}],[\"首先先来列一下常见的变量类型\",{\"1\":{\"5\":1}}],[\"想一想为什么是这个式子\",{\"1\":{\"46\":1}}],[\"想想不久前你可能仍然挣扎在数百行代码之中\",{\"1\":{\"17\":1}}],[\"想要的时候再通过id把它取出来\",{\"1\":{\"67\":1}}],[\"想要一下子跳出所有的循环\",{\"1\":{\"14\":1}}],[\"想要提醒下各位同学\",{\"1\":{\"5\":1}}],[\"非\",{\"1\":{\"134\":1}}],[\"非常推荐\",{\"1\":{\"85\":1}}],[\"非常顺畅\",{\"1\":{\"58\":1}}],[\"非常好\",{\"1\":{\"23\":1}}],[\"非常直观\",{\"1\":{\"23\":1}}],[\"非常重要\",{\"1\":{\"5\":1}}],[\"非常重要的一点是读入一定不能少了\",{\"1\":{\"2\":1}}],[\"非也\",{\"1\":{\"17\":1}}],[\"使它看上去有鼠标移过去之后就浮起来的效果\",{\"1\":{\"178\":1}}],[\"使得它靠在最右边\",{\"1\":{\"177\":1}}],[\"使得你能够到达终点\",{\"1\":{\"149\":2}}],[\"使得程序更加的通俗易懂\",{\"1\":{\"27\":1}}],[\"使得\",{\"1\":{\"17\":1}}],[\"使用之前提到过的\",{\"1\":{\"27\":1}}],[\"使用结构体变量\",{\"1\":{\"27\":1}}],[\"使用时需要特别注意\",{\"1\":{\"5\":1}}],[\"使用\",{\"1\":{\"5\":2,\"27\":3,\"58\":1,\"86\":1,\"105\":1,\"182\":1}}],[\"使用超时的算法拿部分分未尝不可\",{\"1\":{\"5\":1}}],[\"到\",{\"1\":{\"17\":4,\"20\":1,\"23\":2,\"52\":3,\"137\":2,\"138\":1,\"139\":1}}],[\"到这里就不得不提一嘴\",{\"1\":{\"11\":1}}],[\"函数改为箭头函数\",{\"1\":{\"203\":1}}],[\"函数定义\",{\"1\":{\"147\":1}}],[\"函数调用\",{\"1\":{\"147\":1}}],[\"函数声明\",{\"1\":{\"147\":1}}],[\"函数也可以先声明\",{\"1\":{\"147\":1}}],[\"函数也能返回值吗\",{\"1\":{\"17\":1}}],[\"函数体是函数的具体实现\",{\"1\":{\"146\":1}}],[\"函数体\",{\"1\":{\"146\":1}}],[\"函数名也建议使用\",{\"1\":{\"146\":1}}],[\"函数名是函数的名称\",{\"1\":{\"146\":1}}],[\"函数名\",{\"1\":{\"146\":1,\"147\":1}}],[\"函数是一个普通函数\",{\"1\":{\"203\":1}}],[\"函数是\",{\"1\":{\"146\":1}}],[\"函数是不能定义在某一个函数里面的\",{\"1\":{\"17\":1}}],[\"函数了\",{\"1\":{\"146\":1}}],[\"函数接受一个整数参数\",{\"1\":{\"123\":1}}],[\"函数返回读取的字符的\",{\"1\":{\"122\":1}}],[\"函数返回了\",{\"1\":{\"91\":1}}],[\"函数才能将读取的数据存储到这个位置\",{\"1\":{\"120\":1}}],[\"函数用于将一个字符输出到标准输出\",{\"1\":{\"123\":1}}],[\"函数用于将数据输出到标准输出\",{\"1\":{\"121\":1}}],[\"函数用于从标准输入严格读取下一个字符\",{\"1\":{\"122\":1}}],[\"函数用于从标准输入读取数据\",{\"1\":{\"120\":1}}],[\"函数用来生成\",{\"1\":{\"52\":1}}],[\"函数来实现的\",{\"1\":{\"119\":1}}],[\"函数的地址赋值给\",{\"1\":{\"159\":1}}],[\"函数的声明就已经完成了\",{\"1\":{\"148\":1}}],[\"函数的调用格式如下\",{\"1\":{\"147\":1}}],[\"函数的调用\",{\"0\":{\"147\":1}}],[\"函数的定义格式如下\",{\"1\":{\"146\":1}}],[\"函数的语法如下\",{\"1\":{\"120\":1,\"121\":1,\"122\":1,\"123\":1}}],[\"函数的子步骤\",{\"1\":{\"93\":2}}],[\"函数的操作步骤是\",{\"1\":{\"93\":1}}],[\"函数的操作步骤\",{\"1\":{\"93\":1}}],[\"函数的返回\",{\"1\":{\"91\":1}}],[\"函数的例子\",{\"1\":{\"17\":1}}],[\"函数指针的定义方式如下\",{\"1\":{\"159\":1}}],[\"函数指针是一种特殊的指针\",{\"1\":{\"159\":1}}],[\"函数指针\",{\"0\":{\"159\":1},\"1\":{\"43\":1,\"155\":1}}],[\"函数自己调用了自己\",{\"1\":{\"23\":1}}],[\"函数没有返回值\",{\"1\":{\"17\":1}}],[\"函数有一种特别的类型\",{\"1\":{\"17\":1}}],[\"函数中的代码还有子步骤\",{\"1\":{\"93\":1}}],[\"函数中的代码是\",{\"1\":{\"93\":1}}],[\"函数中的代码都被缩进了一层\",{\"1\":{\"93\":1}}],[\"函数中的操作步骤\",{\"1\":{\"91\":1}}],[\"函数中\",{\"1\":{\"17\":1}}],[\"函数中我们传入了经过处理的\",{\"1\":{\"17\":1}}],[\"函数中需要获得\",{\"1\":{\"17\":1}}],[\"函数后面一定有括号\",{\"1\":{\"17\":1}}],[\"函数为例\",{\"1\":{\"17\":1}}],[\"函数\",{\"0\":{\"145\":1,\"146\":1},\"1\":{\"17\":3,\"91\":3,\"101\":1,\"120\":1,\"159\":2}}],[\"函数究竟是干嘛用的呢\",{\"1\":{\"17\":1}}],[\"他可以让你轻松的将元素排列成你想要的样子\",{\"1\":{\"175\":1}}],[\"他会在频道当中新开一个分区用来放近期题库正确可执行文件的下载链接\",{\"1\":{\"52\":1}}],[\"他只会严重破坏代码的可读性\",{\"1\":{\"28\":1}}],[\"他发现这玩意真的很好用\",{\"1\":{\"17\":1}}],[\"他的std指的是标准\",{\"1\":{\"2\":1}}],[\">密码<\",{\"1\":{\"195\":1}}],[\">用户名<\",{\"1\":{\"195\":1}}],[\">登录<\",{\"1\":{\"195\":1}}],[\">visit\",{\"1\":{\"188\":1}}],[\">this\",{\"1\":{\"184\":1,\"185\":1,\"186\":1}}],[\">hello\",{\"1\":{\"184\":1,\"185\":1}}],[\"><\",{\"1\":{\"175\":18,\"176\":1,\"177\":2,\"198\":2}}],[\">speak\",{\"1\":{\"165\":2}}],[\">set\",{\"1\":{\"165\":2}}],[\">swap\",{\"1\":{\"27\":1}}],[\">name\",{\"1\":{\"165\":5}}],[\">next\",{\"1\":{\"31\":10}}],[\">ω<\",{\"1\":{\"49\":1}}],[\">=\",{\"1\":{\"46\":1,\"86\":1,\"134\":1}}],[\">data\",{\"1\":{\"31\":2}}],[\">prev\",{\"1\":{\"31\":7}}],[\">age\",{\"1\":{\"27\":1,\"165\":2}}],[\">min\",{\"1\":{\"27\":1}}],[\">max\",{\"1\":{\"27\":1}}],[\">\",{\"1\":{\"17\":1,\"20\":6,\"23\":3,\"27\":1,\"34\":5,\"52\":3,\"55\":1,\"133\":1,\"134\":1,\"135\":2,\"136\":1,\"139\":1,\"148\":2,\"149\":7,\"175\":9,\"177\":6,\"184\":1,\"185\":1,\"187\":1,\"195\":13,\"198\":10}}],[\">>\",{\"1\":{\"8\":1,\"126\":1}}],[\"各位可以自行去下载\",{\"1\":{\"52\":1}}],[\"各位好呀\",{\"1\":{\"5\":1}}],[\"各位好啊\",{\"1\":{\"2\":1,\"20\":1,\"23\":1}}],[\"各个函数解决小范围内的一些问题\",{\"1\":{\"17\":1}}],[\"便会使用指定的工具链编译对应的库并安装到全局\",{\"1\":{\"58\":1}}],[\"便会执行\",{\"1\":{\"8\":2}}],[\"便于练习\",{\"1\":{\"17\":1}}],[\"5px\",{\"1\":{\"195\":1}}],[\"5rem\",{\"1\":{\"195\":2}}],[\"5d0b5d\",{\"1\":{\"195\":1}}],[\"52px\",{\"1\":{\"175\":4}}],[\"5\",{\"0\":{\"17\":1,\"70\":1,\"76\":1,\"154\":1,\"195\":1},\"1\":{\"17\":1,\"20\":4,\"150\":1,\"151\":1,\"195\":2}}],[\"5ll\",{\"1\":{\"5\":3}}],[\"难以调试\",{\"1\":{\"14\":1}}],[\"难以接受负数\",{\"1\":{\"5\":1}}],[\"情况下\",{\"1\":{\"14\":1}}],[\"gap\",{\"1\":{\"175\":9,\"177\":1}}],[\"game\",{\"1\":{\"82\":1}}],[\"gcc\",{\"1\":{\"86\":3,\"87\":3,\"94\":3}}],[\"gui等进行更新是在是太麻烦了\",{\"1\":{\"76\":1}}],[\"godot\",{\"1\":{\"61\":1}}],[\"goto\",{\"0\":{\"141\":1},\"1\":{\"14\":5,\"52\":5,\"141\":7}}],[\"gitee\",{\"1\":{\"58\":1}}],[\"git\",{\"1\":{\"58\":1}}],[\"gitignore\",{\"1\":{\"58\":1}}],[\"github\",{\"1\":{\"49\":1,\"58\":2}}],[\"g\",{\"1\":{\"58\":1}}],[\"getitem\",{\"1\":{\"198\":2,\"202\":1}}],[\"get函数的实现\",{\"1\":{\"67\":1}}],[\"get\",{\"1\":{\"34\":1,\"202\":7}}],[\"getchar\",{\"0\":{\"122\":1},\"1\":{\"5\":1,\"46\":10,\"119\":1,\"122\":5}}],[\"growup\",{\"1\":{\"203\":3}}],[\"grow\",{\"1\":{\"27\":3}}],[\"请求拦截器\",{\"1\":{\"202\":1}}],[\"请输入密码\",{\"1\":{\"195\":1}}],[\"请输入用户名\",{\"1\":{\"195\":1}}],[\"请前往\",{\"1\":{\"173\":1}}],[\"请你编写一个程序\",{\"1\":{\"149\":1}}],[\"请注意\",{\"1\":{\"58\":1}}],[\"请各位饶了我吧\",{\"1\":{\"23\":1}}],[\"请各位同学一定要看到最后\",{\"1\":{\"20\":1}}],[\"请各位同学们在进行变量相加或者相乘的时候\",{\"1\":{\"11\":1}}],[\"请耐心将题单简介看完\",{\"1\":{\"23\":1}}],[\"请不要参考\",{\"1\":{\"5\":1}}],[\"唯一不同的地方在于\",{\"1\":{\"11\":1}}],[\"速度会快很多\",{\"1\":{\"8\":1}}],[\"判断闰年就是经典的例子\",{\"1\":{\"134\":1}}],[\"判断必然也得搭配逻辑运算符食用\",{\"1\":{\"134\":1}}],[\"判断语句又被称为分支语句\",{\"1\":{\"133\":1}}],[\"判断一个数是否为偶数\",{\"1\":{\"8\":1}}],[\"判断条件中非\",{\"1\":{\"8\":1}}],[\"必须要根据不同的条件选择一条分支来执行\",{\"1\":{\"133\":1}}],[\"必须要有表达类似\",{\"1\":{\"133\":1}}],[\"必须要知道这个变量的地址在哪里\",{\"1\":{\"2\":1}}],[\"必要时记得开\",{\"1\":{\"52\":1}}],[\"必要的情况下\",{\"1\":{\"8\":1}}],[\"需要先定义一个函数\",{\"1\":{\"159\":1}}],[\"需要先包含头文件\",{\"1\":{\"119\":1}}],[\"需要根据问题的性质和需求来决定\",{\"1\":{\"150\":1}}],[\"需要注意两个关键点\",{\"1\":{\"148\":1}}],[\"需要注意运算符的运算顺序\",{\"1\":{\"8\":1}}],[\"需要使用两个反斜杠\",{\"1\":{\"121\":1}}],[\"需要使用\",{\"1\":{\"101\":2}}],[\"需要搞清楚两个关键点\",{\"1\":{\"23\":1}}],[\"需要考虑大量的剪枝优化\",{\"1\":{\"20\":1}}],[\"需要同学们及时对各个数据进行取模\",{\"1\":{\"11\":1}}],[\"需要用到\",{\"1\":{\"5\":1}}],[\"灵活\",{\"1\":{\"58\":1}}],[\"灵活使用可以提高代码的效率\",{\"1\":{\"8\":1}}],[\"灵活运用\",{\"1\":{\"5\":1}}],[\"不包括一般的\",{\"1\":{\"198\":1}}],[\"不需要写\",{\"1\":{\"164\":1}}],[\"不需要排序\",{\"1\":{\"23\":1}}],[\"不成立为止\",{\"1\":{\"137\":1,\"138\":1,\"139\":1}}],[\"不是闰年\",{\"1\":{\"134\":1}}],[\"不是吗\",{\"1\":{\"64\":1}}],[\"不等于\",{\"1\":{\"134\":2}}],[\"不仅仅是\",{\"1\":{\"82\":1}}],[\"不仅限于此\",{\"1\":{\"58\":1}}],[\"不说也应该知道干啥了吧\",{\"1\":{\"76\":1}}],[\"不好用\",{\"1\":{\"76\":1}}],[\"不好用了\",{\"1\":{\"46\":1}}],[\"不算高效但是更方便的游戏更新策略\",{\"0\":{\"76\":1}}],[\"不支持的类型\",{\"1\":{\"67\":1}}],[\"不建议使用除\",{\"1\":{\"58\":1}}],[\"不能重复\",{\"1\":{\"185\":1}}],[\"不能向上或向左移动\",{\"1\":{\"149\":1}}],[\"不能动态改变\",{\"1\":{\"140\":1}}],[\"不能被随便拷贝\",{\"1\":{\"73\":1}}],[\"不能给出更有针对性的数据\",{\"1\":{\"52\":1}}],[\"不能走\",{\"1\":{\"20\":1}}],[\"不然到时候很有可能搞不清自己到底在做什么\",{\"1\":{\"64\":1}}],[\"不然没法调用数组的任意一个位置\",{\"1\":{\"37\":1}}],[\"不然就等着死循环吧\",{\"1\":{\"20\":1}}],[\"不允许使用\",{\"1\":{\"37\":1}}],[\"不\",{\"1\":{\"34\":1}}],[\"不具体讲了\",{\"1\":{\"23\":1}}],[\"不就行了吗\",{\"1\":{\"23\":1}}],[\"不过一般来说\",{\"1\":{\"198\":1}}],[\"不过它的含义更加拓展了\",{\"1\":{\"91\":1}}],[\"不过有需要注意的一点\",{\"1\":{\"79\":1}}],[\"不过我们也并不会在resourceholder里面加载这种文件\",{\"1\":{\"67\":1}}],[\"不过我们在这里还需要补充一些东西\",{\"1\":{\"37\":1}}],[\"不过oj的机子貌似比较好\",{\"1\":{\"55\":1}}],[\"不过还好\",{\"1\":{\"46\":1}}],[\"不过总体上来说\",{\"1\":{\"34\":1}}],[\"不过记得\",{\"1\":{\"23\":1}}],[\"不过归并的过程略微有些烧脑\",{\"1\":{\"23\":1}}],[\"不过\",{\"1\":{\"20\":1}}],[\"不过貌似也不是特别多的亚子\",{\"1\":{\"20\":1}}],[\"不要紧\",{\"1\":{\"175\":1}}],[\"不要搞混了\",{\"1\":{\"134\":1}}],[\"不要继续往下找了\",{\"1\":{\"20\":1}}],[\"不要听题解瞎说\",{\"1\":{\"20\":1}}],[\"不要想着去运行\",{\"1\":{\"17\":1}}],[\"不足的将填上0\",{\"1\":{\"8\":1}}],[\"不一定每一个部分都要死板的填上东西\",{\"1\":{\"8\":1}}],[\"将已经释放的指针置为\",{\"1\":{\"165\":1}}],[\"将当前点标记为走过\",{\"1\":{\"149\":2}}],[\"将当前问题拆分为更小的子问题\",{\"1\":{\"148\":1}}],[\"将一个条件取反\",{\"1\":{\"134\":1}}],[\"将一些内容重述\",{\"1\":{\"26\":1}}],[\"将变量所存储的位置告诉\",{\"1\":{\"120\":1}}],[\"将游戏的内容继续压入\",{\"1\":{\"79\":1}}],[\"将标题画面的内容压入一个栈\",{\"1\":{\"79\":1}}],[\"将指令传入整棵树\",{\"1\":{\"76\":1}}],[\"将内容输入到程序中运行\",{\"1\":{\"52\":1}}],[\"将输出内容附到指定文件上<\",{\"1\":{\"52\":1}}],[\"将容量扩充至\",{\"1\":{\"34\":1}}],[\"将它们两两合并\",{\"1\":{\"23\":1}}],[\"将这种方法不太准确地称作递归的记忆化\",{\"1\":{\"23\":1}}],[\"将这个函数用在了约瑟夫问题当中\",{\"1\":{\"17\":1}}],[\"将基于递归的搜索的通用做法来给大家过一遍\",{\"1\":{\"20\":1}}],[\"将数组从\",{\"1\":{\"17\":1}}],[\"将\",{\"1\":{\"8\":1,\"20\":1}}],[\"xmake的安装位置\",{\"1\":{\"58\":1}}],[\"xmake支持几乎所有常见的工具链\",{\"1\":{\"58\":1}}],[\"xmake\",{\"0\":{\"58\":1},\"1\":{\"58\":24,\"61\":1}}],[\"x\",{\"1\":{\"8\":3,\"17\":12,\"20\":20,\"34\":4,\"55\":2,\"91\":2,\"108\":3,\"121\":2,\"127\":3,\"149\":16}}],[\"^\",{\"1\":{\"8\":5,\"34\":1,\"126\":1}}],[\"或其它元素包裹起来\",{\"1\":{\"182\":1}}],[\"或其它替代容器来包裹内容\",{\"0\":{\"182\":1}}],[\"或减\",{\"1\":{\"125\":2}}],[\"或可自行查阅\",{\"1\":{\"120\":1}}],[\"或\",{\"1\":{\"118\":1,\"134\":1}}],[\"或运算\",{\"1\":{\"8\":1}}],[\"或者你想让自己的每一条请求都附带登录信息\",{\"1\":{\"202\":1}}],[\"或者能被\",{\"1\":{\"134\":1}}],[\"或者意想得到的\",{\"1\":{\"20\":1}}],[\"或者子问题之间根本没有关系\",{\"1\":{\"20\":1}}],[\"或者花去了多少的时间\",{\"1\":{\"5\":1}}],[\"或者\",{\"1\":{\"5\":2,\"61\":2,\"87\":1,\"136\":1,\"198\":1,\"202\":1}}],[\"white\",{\"1\":{\"195\":2}}],[\"whiledotoj\",{\"1\":{\"142\":1}}],[\"while\",{\"0\":{\"11\":1,\"138\":1,\"139\":1},\"1\":{\"8\":1,\"11\":10,\"17\":2,\"46\":3,\"137\":2,\"138\":5,\"139\":8}}],[\"www\",{\"1\":{\"177\":2,\"188\":1,\"195\":1}}],[\"wrap\",{\"1\":{\"175\":6}}],[\"withcredentials\",{\"1\":{\"202\":1}}],[\"with\",{\"1\":{\"186\":1}}],[\"width=device\",{\"1\":{\"198\":1}}],[\"width\",{\"1\":{\"175\":24,\"176\":1,\"177\":4,\"195\":7,\"198\":1}}],[\"winlibs下载对应最新版本的\",{\"1\":{\"86\":1}}],[\"winget\",{\"1\":{\"86\":11}}],[\"windows\",{\"0\":{\"86\":1},\"1\":{\"46\":5,\"52\":2,\"58\":1,\"61\":1,\"85\":1,\"86\":4,\"94\":1}}],[\"world\",{\"1\":{\"91\":5,\"92\":2,\"93\":1,\"184\":1,\"185\":1}}],[\"wednesday\",{\"1\":{\"5\":1}}],[\"week\",{\"1\":{\"5\":1}}],[\"统一输出\",{\"1\":{\"8\":1}}],[\"统一读入\",{\"1\":{\"8\":1}}],[\"长度为多少\",{\"1\":{\"8\":1}}],[\"数字\",{\"1\":{\"116\":1}}],[\"数据类型用于表示变量可以存储的数据类型\",{\"1\":{\"103\":1}}],[\"数据类型\",{\"0\":{\"103\":1}}],[\"数据有了\",{\"1\":{\"52\":1}}],[\"数据按照标准应当是统一使用\",{\"1\":{\"46\":1}}],[\"数列中的每一个位置上都存储了一个对应类型的变量\",{\"1\":{\"8\":1}}],[\"数组的大小是固定的\",{\"1\":{\"140\":1}}],[\"数组的下标从\",{\"1\":{\"140\":1}}],[\"数组的时候不要加\",{\"1\":{\"43\":1,\"156\":1}}],[\"数组是一种特殊的变量\",{\"1\":{\"140\":1}}],[\"数组后面方括号里面的数字实际上指的是相对于这个数组指针在内存上的偏移值\",{\"1\":{\"37\":1,\"43\":1,\"158\":1}}],[\"数组这东西好理解啊\",{\"1\":{\"8\":1}}],[\"数组\",{\"0\":{\"140\":1},\"1\":{\"8\":1,\"20\":1,\"43\":1,\"55\":2,\"158\":1}}],[\"第三期\",{\"0\":{\"195\":1}}],[\"第三个元素赋值为\",{\"1\":{\"140\":1}}],[\"第三个部分是处理部分\",{\"1\":{\"8\":1}}],[\"第二年我们又迎来了\",{\"1\":{\"192\":1}}],[\"第二个是一个简单的登陆界面\",{\"1\":{\"195\":1}}],[\"第二个元素的下标是\",{\"1\":{\"140\":1}}],[\"第二个元素赋值为\",{\"1\":{\"140\":1}}],[\"第二个部分是判断部分\",{\"1\":{\"8\":1}}],[\"第一个是一个简单的上侧导航栏\",{\"1\":{\"195\":1}}],[\"第一个部分是初始化部分\",{\"1\":{\"8\":1}}],[\"第一行包含两个整数\",{\"1\":{\"149\":1}}],[\"第一题数据范围太大不但需要高精度而且递归会超时\",{\"1\":{\"23\":1}}],[\"第零章我们只学了整型变量\",{\"1\":{\"2\":1}}],[\"<router\",{\"1\":{\"198\":1}}],[\"<routerview\",{\"1\":{\"198\":2}}],[\"<template>\",{\"1\":{\"198\":3}}],[\"<title>nypt<\",{\"1\":{\"198\":1}}],[\"<script>\",{\"1\":{\"198\":1}}],[\"<script\",{\"1\":{\"198\":5}}],[\"<style\",{\"1\":{\"198\":3}}],[\"<style>\",{\"1\":{\"195\":2,\"198\":1}}],[\"<string\",{\"1\":{\"34\":1}}],[\"<stdlib\",{\"1\":{\"31\":1,\"34\":1}}],[\"<stdio\",{\"1\":{\"2\":2,\"5\":1,\"31\":1,\"34\":1,\"91\":3,\"92\":1,\"93\":1,\"133\":1}}],[\"<body>\",{\"1\":{\"198\":1}}],[\"<button\",{\"1\":{\"177\":1,\"195\":1}}],[\"<meta\",{\"1\":{\"198\":2}}],[\"<main\",{\"1\":{\"195\":1}}],[\"<main>main\",{\"1\":{\"189\":1}}],[\"<link\",{\"1\":{\"198\":1}}],[\"<li>item\",{\"1\":{\"189\":3}}],[\"<label\",{\"1\":{\"195\":2}}],[\"<nav\",{\"1\":{\"195\":1}}],[\"<nav>navigation<\",{\"1\":{\"189\":1}}],[\"<footer>footer<\",{\"1\":{\"189\":1}}],[\"<header\",{\"1\":{\"198\":1}}],[\"<header>header<\",{\"1\":{\"189\":1}}],[\"<head>\",{\"1\":{\"198\":1}}],[\"<html\",{\"1\":{\"198\":1}}],[\"<h1>heading<\",{\"1\":{\"189\":1}}],[\"<h1\",{\"1\":{\"184\":1,\"185\":1}}],[\"<ul>\",{\"1\":{\"189\":1}}],[\"<video\",{\"1\":{\"187\":1}}],[\"<p>paragraph<\",{\"1\":{\"189\":1}}],[\"<p\",{\"1\":{\"177\":1,\"184\":1,\"185\":1,\"195\":2}}],[\"<input\",{\"1\":{\"195\":2}}],[\"<img\",{\"1\":{\"177\":1,\"187\":1,\"195\":2}}],[\"<id>\",{\"1\":{\"86\":2}}],[\"<audio\",{\"1\":{\"187\":1}}],[\"<a\",{\"1\":{\"177\":1,\"188\":1,\"195\":1}}],[\"<div\",{\"1\":{\"175\":27,\"176\":1,\"177\":4,\"184\":1,\"185\":1,\"186\":1,\"195\":4,\"198\":1}}],[\"<\",{\"1\":{\"11\":2,\"17\":2,\"20\":6,\"23\":1,\"27\":1,\"34\":2,\"37\":1,\"52\":2,\"133\":1,\"134\":1,\"140\":1,\"141\":1,\"149\":4,\"175\":9,\"177\":5,\"184\":3,\"185\":3,\"186\":1,\"189\":1,\"195\":11,\"198\":13}}],[\"<<\",{\"1\":{\"8\":2,\"46\":4,\"126\":1}}],[\"<=\",{\"1\":{\"8\":2,\"20\":3,\"46\":1,\"55\":1,\"134\":1,\"137\":1,\"138\":2,\"139\":1,\"149\":4,\"150\":1}}],[\"循环也可以用\",{\"1\":{\"139\":1}}],[\"循环会先执行一次\",{\"1\":{\"139\":1}}],[\"循环会进行一次判断部分\",{\"1\":{\"8\":1}}],[\"循环可以用来替代\",{\"1\":{\"138\":1}}],[\"循环来替代会显著降低代码可读性\",{\"1\":{\"139\":1}}],[\"循环来替代\",{\"1\":{\"139\":1}}],[\"循环来输出\",{\"1\":{\"137\":1,\"138\":1,\"139\":1}}],[\"循环来实现\",{\"1\":{\"11\":1}}],[\"循环的特性\",{\"1\":{\"139\":1}}],[\"循环的区别是\",{\"1\":{\"139\":1}}],[\"循环的\",{\"1\":{\"137\":1}}],[\"循环的形式如下\",{\"1\":{\"137\":1,\"138\":1,\"139\":1}}],[\"循环的时候\",{\"1\":{\"8\":1}}],[\"循环是最常见的一种\",{\"1\":{\"137\":1}}],[\"循环语句是\",{\"1\":{\"137\":1}}],[\"循环中依旧适用\",{\"1\":{\"11\":1}}],[\"循环中的处理部分后\",{\"1\":{\"8\":1}}],[\"循环很简单\",{\"1\":{\"11\":1}}],[\"循环替代\",{\"1\":{\"11\":1}}],[\"循环实际上完全可以由\",{\"1\":{\"11\":1}}],[\"循环变成下一次要提到的\",{\"1\":{\"8\":1}}],[\"循环和数组\",{\"0\":{\"131\":1},\"1\":{\"8\":1}}],[\"循环就会结束\",{\"1\":{\"8\":1}}],[\"循环才会继续\",{\"1\":{\"8\":1}}],[\"循环当中我们用两个分号将其分成了三个部分\",{\"1\":{\"8\":1}}],[\"循环\",{\"0\":{\"137\":1},\"1\":{\"8\":2,\"11\":1,\"137\":1,\"138\":1}}],[\"即小写字母和下划线组合\",{\"1\":{\"164\":1}}],[\"即将运算符提前\",{\"1\":{\"127\":1}}],[\"即最高位为\",{\"1\":{\"106\":1}}],[\"即代表它有符号\",{\"1\":{\"105\":1}}],[\"即变量名以类型前缀开头\",{\"1\":{\"102\":1}}],[\"即\",{\"1\":{\"102\":2}}],[\"即编写好你的代码并保存后\",{\"1\":{\"94\":1}}],[\"即可安装\",{\"1\":{\"86\":1}}],[\"即可\",{\"1\":{\"86\":1}}],[\"即可启动编译\",{\"1\":{\"58\":1}}],[\"即使多个传入参数的类型是相同的\",{\"1\":{\"147\":1}}],[\"即使这会让代码看上去更长\",{\"1\":{\"133\":1}}],[\"即使离开变量所在的作用域\",{\"1\":{\"101\":1}}],[\"即使变量类型是一样的也不行\",{\"1\":{\"17\":1}}],[\"即使它不再能表示负数\",{\"1\":{\"5\":1}}],[\"即真\",{\"1\":{\"8\":1}}],[\"为\",{\"1\":{\"177\":1}}],[\"为它加上\",{\"1\":{\"176\":1}}],[\"为真\",{\"1\":{\"135\":1}}],[\"为什么负数要使用补码表示法\",{\"0\":{\"107\":1}}],[\"为什么要准备两种load\",{\"1\":{\"67\":1}}],[\"为什么要用\",{\"1\":{\"43\":1,\"158\":1}}],[\"为啥最小值可以比最大值多\",{\"0\":{\"106\":1}}],[\"为保证全局变量的安全性\",{\"1\":{\"100\":1}}],[\"为例\",{\"1\":{\"58\":1,\"198\":1}}],[\"为标准来提一提\",{\"1\":{\"55\":1}}],[\"为准\",{\"1\":{\"55\":1}}],[\"为单位\",{\"1\":{\"43\":1,\"158\":1}}],[\"为了让大家能够顺利的完成课程\",{\"1\":{\"192\":1}}],[\"为了让我们能够很轻松地用简单的几句话控制音乐的播放\",{\"1\":{\"82\":1}}],[\"为了保证代码编写的体验\",{\"1\":{\"85\":1}}],[\"为了移植与开发\",{\"1\":{\"85\":1}}],[\"为了避免出现野指针\",{\"1\":{\"43\":1,\"158\":1}}],[\"为了节约时间成本\",{\"1\":{\"34\":1}}],[\"为了和赋值语句区分开\",{\"1\":{\"8\":1}}],[\"为避免重名\",{\"1\":{\"27\":1}}],[\"为大家提供一些也许不是特别好的讲解\",{\"1\":{\"2\":1}}],[\"类名可以用来控制元素的样式\",{\"1\":{\"184\":1}}],[\"类名\",{\"1\":{\"174\":2}}],[\"类名的\",{\"1\":{\"174\":1}}],[\"类选择器\",{\"1\":{\"174\":1}}],[\"类\",{\"1\":{\"79\":2}}],[\"类似的方法配置吧\",{\"1\":{\"61\":1}}],[\"类似上面的写法\",{\"1\":{\"8\":1}}],[\"类型来跳过这个过程~~\",{\"1\":{\"198\":1}}],[\"类型参数的函数\",{\"1\":{\"159\":1}}],[\"类型实际上占用\",{\"1\":{\"118\":1}}],[\"类型实际上也会占用\",{\"1\":{\"5\":1}}],[\"类型时\",{\"1\":{\"105\":1}}],[\"类型的参数\",{\"1\":{\"159\":1}}],[\"类型的函数指针的定义\",{\"1\":{\"159\":1}}],[\"类型的变量\",{\"1\":{\"164\":1}}],[\"类型的变量只能存储\",{\"1\":{\"118\":1}}],[\"类型的变量也可以存储整数\",{\"1\":{\"116\":1}}],[\"类型的变量实际上存储的是字符的\",{\"1\":{\"116\":1}}],[\"类型的变量可以存储一个字符\",{\"1\":{\"116\":1}}],[\"类型的变量在定义时\",{\"1\":{\"27\":1}}],[\"类型的指针\",{\"1\":{\"43\":2,\"158\":2}}],[\"类型重命名\",{\"1\":{\"27\":1}}],[\"类型了\",{\"1\":{\"5\":1}}],[\"类型因为较\",{\"1\":{\"5\":1}}],[\"类型硬生生占了1b的内存\",{\"1\":{\"5\":1}}],[\"类型只有两种状态\",{\"1\":{\"5\":1}}],[\"类型表示一个字符\",{\"1\":{\"5\":1}}],[\"类型在scanf和printf里面的表示是\",{\"1\":{\"5\":1}}],[\"类型在\",{\"1\":{\"5\":5}}],[\"类型能表示的范围是\",{\"1\":{\"5\":1}}],[\"类型真正用来表示数据大小的只有\",{\"1\":{\"5\":1}}],[\"类型被称为双精度浮点数\",{\"1\":{\"5\":1}}],[\"类型被称为单精度浮点数\",{\"1\":{\"5\":1}}],[\"类型被称为\",{\"1\":{\"5\":1}}],[\"类型\",{\"1\":{\"5\":6,\"27\":1,\"108\":1,\"114\":2}}],[\"貌似是个年份\",{\"1\":{\"8\":1}}],[\"es6\",{\"1\":{\"203\":1}}],[\"element\",{\"1\":{\"201\":2}}],[\"else\",{\"0\":{\"133\":1},\"1\":{\"8\":6,\"23\":1,\"133\":12,\"134\":1,\"136\":2,\"148\":1,\"149\":1,\"198\":5,\"202\":1}}],[\"eee\",{\"1\":{\"195\":1}}],[\"ease\",{\"1\":{\"178\":3,\"195\":2}}],[\"e6e8eb\",{\"1\":{\"178\":1}}],[\"edu\",{\"1\":{\"177\":2,\"195\":1}}],[\"error\",{\"1\":{\"86\":1,\"87\":1,\"202\":17}}],[\"errorlevel\",{\"1\":{\"52\":3}}],[\"erase\",{\"1\":{\"34\":2}}],[\"echooff\",{\"1\":{\"52\":1}}],[\"echo\",{\"1\":{\"52\":1}}],[\"export\",{\"1\":{\"198\":1}}],[\"expression\",{\"1\":{\"136\":3}}],[\"example\",{\"1\":{\"188\":2}}],[\"extension\",{\"1\":{\"85\":1}}],[\"exe\",{\"1\":{\"52\":6,\"86\":1,\"94\":1}}],[\"ex\",{\"0\":{\"20\":1,\"31\":1,\"34\":1},\"1\":{\"20\":1,\"31\":1,\"34\":1,\"151\":1}}],[\"e\",{\"1\":{\"17\":1}}],[\"en\",{\"1\":{\"198\":1}}],[\"entity\",{\"1\":{\"73\":1}}],[\"engine\",{\"1\":{\"61\":1}}],[\"endofstorage\",{\"1\":{\"34\":5}}],[\"end\",{\"1\":{\"14\":2,\"34\":13}}],[\"enum\",{\"1\":{\"5\":2}}],[\"eof\",{\"1\":{\"11\":1}}],[\"还原现场\",{\"1\":{\"149\":2}}],[\"还需要牺牲一位二进制位表示符号的正负\",{\"1\":{\"105\":1}}],[\"还记得\",{\"1\":{\"94\":1}}],[\"还要考虑到球绕着主角的旋转情况\",{\"1\":{\"73\":1}}],[\"还在为不知道怎么写cpl课程的小游戏项目而烦恼吗\",{\"1\":{\"49\":1}}],[\"还关不掉\",{\"1\":{\"43\":1,\"158\":1}}],[\"还是会自动忽略两个输入之间的空白符\",{\"1\":{\"120\":1}}],[\"还是\",{\"1\":{\"46\":1,\"116\":1}}],[\"还是有一点的\",{\"1\":{\"31\":1}}],[\"还是建议同学们使用当周的知识点解决问题\",{\"1\":{\"5\":1}}],[\"还没有明白递归到底是干嘛用的\",{\"1\":{\"23\":1}}],[\"还不明白\",{\"1\":{\"17\":1}}],[\"还有其它的设置项\",{\"1\":{\"202\":1}}],[\"还有背景\",{\"1\":{\"76\":1}}],[\"还有for循环有没有写成别的奇怪的东西\",{\"1\":{\"55\":1}}],[\"还有一个小技巧\",{\"1\":{\"86\":1}}],[\"还有一个重要的知识点\",{\"1\":{\"11\":1}}],[\"还有一些其它的数据范围\",{\"1\":{\"55\":1}}],[\"还有逻辑或\",{\"1\":{\"8\":1}}],[\"还有\",{\"1\":{\"5\":1,\"79\":1}}],[\"每行包含\",{\"1\":{\"149\":1}}],[\"每次调用上面的\",{\"1\":{\"101\":1}}],[\"每次扩容时会把容量多扩一些\",{\"1\":{\"34\":1}}],[\"每帧我们根据用户的输入情况以及游戏的整体情况决定需要进行哪些更新\",{\"1\":{\"76\":1}}],[\"每个\",{\"1\":{\"198\":3}}],[\"每个抽屉里可以放一个整数\",{\"1\":{\"140\":1}}],[\"每个节点的性质需要能被绘制\",{\"1\":{\"73\":1}}],[\"每个人程序的做法是不同的\",{\"1\":{\"52\":1}}],[\"每个皇后的列号肯定也不一样\",{\"1\":{\"20\":1}}],[\"每个函数都有属于它自己的坑\",{\"1\":{\"5\":1}}],[\"每一个\",{\"1\":{\"17\":1}}],[\"每一个格子都存上一个变量\",{\"1\":{\"14\":1}}],[\"每道题有条件可把之前的代码清空了重写\",{\"1\":{\"5\":1}}],[\"区别非常明显\",{\"1\":{\"5\":1}}],[\"易于分辨哪个是哪个\",{\"1\":{\"5\":1}}],[\"加法运算符\",{\"1\":{\"125\":1}}],[\"加入此类递归的一种优化方法\",{\"1\":{\"23\":1}}],[\"加空格干什么用呢\",{\"1\":{\"5\":1}}],[\"加上它的补码\",{\"1\":{\"108\":1}}],[\"加上它再整除\",{\"1\":{\"108\":1}}],[\"加上\",{\"1\":{\"5\":1,\"108\":1}}],[\"虽然运气不好的话可能还是要跑很久\",{\"1\":{\"52\":1}}],[\"虽然说\",{\"1\":{\"46\":1}}],[\"虽然你也可以把它当作只有一个元素的数组使用\",{\"1\":{\"43\":1,\"158\":1}}],[\"虽然这很好理解\",{\"1\":{\"37\":1}}],[\"虽然里面的参数好像不太一样\",{\"1\":{\"23\":1}}],[\"虽然某\",{\"1\":{\"11\":1}}],[\"虽然\",{\"1\":{\"5\":1,\"58\":1,\"120\":1}}],[\"虽然它实际上只有1bit\",{\"1\":{\"5\":1}}],[\"语法创建了别名\",{\"1\":{\"164\":1}}],[\"语法\",{\"1\":{\"164\":1,\"202\":1}}],[\"语法高亮\",{\"1\":{\"85\":1}}],[\"语句结束\",{\"1\":{\"136\":1}}],[\"语句可以用来实现循环\",{\"1\":{\"141\":1}}],[\"语句可以不写\",{\"1\":{\"136\":1}}],[\"语句可以进行嵌套\",{\"1\":{\"8\":1}}],[\"语句来写一个判断输入的数是正数\",{\"1\":{\"136\":1}}],[\"语句来直接跳出循环\",{\"1\":{\"8\":1}}],[\"语句来直接进入下一次循环\",{\"1\":{\"8\":1}}],[\"语句是一种特殊的分支语句\",{\"1\":{\"136\":1}}],[\"语句非常简单\",{\"1\":{\"133\":1}}],[\"语句的\",{\"1\":{\"136\":1}}],[\"语句的用法\",{\"1\":{\"133\":1}}],[\"语句的子代码块不是必须用\",{\"1\":{\"133\":1}}],[\"语句的时候\",{\"1\":{\"8\":1}}],[\"语句和一般的函数调用不太相同\",{\"1\":{\"133\":1}}],[\"语句才有了用武之地\",{\"1\":{\"14\":1}}],[\"语句并不建议使用\",{\"1\":{\"14\":1}}],[\"语句在\",{\"1\":{\"11\":1}}],[\"语句之后大括号里面的内容\",{\"1\":{\"8\":1}}],[\"语句中条件成立的时候\",{\"1\":{\"8\":1}}],[\"语句\",{\"1\":{\"8\":1,\"14\":1,\"133\":2,\"136\":3,\"141\":2}}],[\"语句块之间可以适当空行\",{\"1\":{\"5\":1}}],[\"语言不能在初始化时自动指定变量的初始值\",{\"1\":{\"165\":1}}],[\"语言不是一种面向对象语言\",{\"1\":{\"27\":1}}],[\"语言这个不是面向对象的语言变得面向对象起来\",{\"1\":{\"164\":1}}],[\"语言就有差不多这样的表达\",{\"1\":{\"133\":1}}],[\"语言默认使用的是\",{\"1\":{\"114\":1}}],[\"语言需要包含头文件\",{\"1\":{\"103\":1}}],[\"语言标准库中的一个函数\",{\"1\":{\"91\":1}}],[\"语言标准库中寻找\",{\"1\":{\"91\":1}}],[\"语言会首先执行\",{\"1\":{\"91\":1}}],[\"语言会自动去寻找这个文件\",{\"1\":{\"91\":1}}],[\"语言程序\",{\"1\":{\"95\":1}}],[\"语言程序的时候\",{\"1\":{\"91\":1}}],[\"语言程序都必须包含\",{\"1\":{\"17\":1}}],[\"语言认识这个函数\",{\"1\":{\"91\":1}}],[\"语言编写的村规之一\",{\"1\":{\"93\":1}}],[\"语言编译器会从当前文件所在的目录中开始寻找\",{\"1\":{\"91\":1}}],[\"语言编译器会在\",{\"1\":{\"91\":1}}],[\"语言编程中最基础也是最重要的两种结构\",{\"1\":{\"8\":1}}],[\"语言是一款非常自然的语言\",{\"1\":{\"91\":1}}],[\"语言是一种广泛使用的计算机语言\",{\"1\":{\"85\":1}}],[\"语言是一种通用的\",{\"1\":{\"85\":1}}],[\"语言是自然语言\",{\"1\":{\"91\":1}}],[\"语言\",{\"1\":{\"85\":2}}],[\"语言怎么写随机数呢\",{\"1\":{\"52\":1}}],[\"语言学习分享\",{\"0\":{\"208\":1},\"2\":{\"47\":1,\"50\":1,\"53\":1,\"56\":1,\"59\":1}}],[\"语言当中依然用起来有些难度的东西\",{\"1\":{\"34\":1}}],[\"语言中非常重要的一个概念\",{\"1\":{\"146\":1}}],[\"语言中它改变形式后可以替代所有形式的循环\",{\"1\":{\"137\":1}}],[\"语言中有以下几种逻辑运算符\",{\"1\":{\"134\":1}}],[\"语言中有没有办法实现类似的功能呢\",{\"1\":{\"27\":1}}],[\"语言中的\",{\"1\":{\"133\":1}}],[\"语言中的数据类型包括以下几种\",{\"1\":{\"103\":1}}],[\"语言中的两种特殊变量\",{\"1\":{\"101\":1}}],[\"语言中的赋值运算符\",{\"1\":{\"99\":1}}],[\"语言中的一种特殊变量类型\",{\"1\":{\"164\":1}}],[\"语言中的一种特殊语句\",{\"1\":{\"137\":1,\"141\":1}}],[\"语言中的一种特殊语法\",{\"1\":{\"92\":1}}],[\"语言中的一种特殊运算符\",{\"1\":{\"135\":1}}],[\"语言中的一个关键字\",{\"1\":{\"91\":1}}],[\"语言中\",{\"1\":{\"91\":1,\"92\":1,\"99\":1,\"102\":1,\"103\":1,\"116\":1,\"119\":1}}],[\"语言中最容易出错的地方\",{\"1\":{\"43\":1,\"155\":1}}],[\"语言中空行并不会影响程序\",{\"1\":{\"5\":1}}],[\"语言规定的程序的入口\",{\"1\":{\"17\":1}}],[\"语言的函数中\",{\"1\":{\"91\":1}}],[\"语言的环境\",{\"1\":{\"85\":1}}],[\"语言的历史吧\",{\"1\":{\"85\":1}}],[\"语言的核心技巧\",{\"1\":{\"43\":1,\"155\":1}}],[\"语言的变量存储是对齐的\",{\"1\":{\"5\":1}}],[\"语言的基本设计结构\",{\"1\":{\"2\":1}}],[\"语言库的指令\",{\"1\":{\"2\":1}}],[\"制表符来让你的程序变得更美观\",{\"1\":{\"5\":1}}],[\"等另一个协程完成之后\",{\"1\":{\"202\":1}}],[\"等于\",{\"1\":{\"134\":2}}],[\"等语句同理\",{\"1\":{\"133\":1}}],[\"等待安装完成即可\",{\"1\":{\"86\":1,\"87\":1}}],[\"等\",{\"1\":{\"5\":1,\"116\":1,\"174\":2,\"175\":1,\"183\":1,\"198\":1}}],[\"等等\",{\"1\":{\"5\":1,\"150\":1}}],[\"对所有从后端收到的请求进行处理\",{\"1\":{\"202\":1}}],[\"对所有要发送给后端的请求进行处理\",{\"1\":{\"202\":1}}],[\"对应页面的\",{\"1\":{\"198\":1}}],[\"对应类型分\",{\"1\":{\"103\":1}}],[\"对它应用\",{\"1\":{\"178\":1}}],[\"对象并不会立即得到结果\",{\"1\":{\"202\":1}}],[\"对象\",{\"1\":{\"202\":4}}],[\"对象的结果\",{\"1\":{\"202\":2}}],[\"对象的方法是对象所具有的行为和操作\",{\"1\":{\"165\":1}}],[\"对象的属性是对象所具有的特性和特征\",{\"1\":{\"165\":1}}],[\"对象通常由两个部分组成\",{\"1\":{\"165\":1}}],[\"对象是程序的基本单元\",{\"1\":{\"165\":1}}],[\"对象是面向对象编程\",{\"1\":{\"165\":1}}],[\"对象可以看作是现实世界中的事物或概念的抽象\",{\"1\":{\"165\":1}}],[\"对吧\",{\"1\":{\"91\":2,\"146\":1}}],[\"对于页面特殊位置的内容\",{\"1\":{\"189\":1}}],[\"对于一个\",{\"1\":{\"175\":1,\"202\":1}}],[\"对于一般的局部变量和函数\",{\"1\":{\"102\":1}}],[\"对于当前问题\",{\"1\":{\"148\":1}}],[\"对于当前的问题\",{\"1\":{\"23\":1}}],[\"对于递归的编写\",{\"1\":{\"148\":1}}],[\"对于这个需求\",{\"1\":{\"133\":1}}],[\"对于变量\",{\"1\":{\"127\":1}}],[\"对于整数除法\",{\"1\":{\"125\":1}}],[\"对于常量\",{\"1\":{\"102\":1}}],[\"对于于全局变量\",{\"1\":{\"100\":1}}],[\"对于其它同类文件夹也是一样\",{\"1\":{\"86\":1}}],[\"对于\",{\"1\":{\"23\":1,\"86\":1,\"87\":1,\"108\":1,\"148\":1,\"201\":2}}],[\"对于附属于某一语句\",{\"1\":{\"5\":1}}],[\"对数\",{\"1\":{\"5\":1}}],[\"4b0a4b\",{\"1\":{\"195\":1}}],[\"404\",{\"1\":{\"198\":6,\"206\":1}}],[\"409eff\",{\"1\":{\"195\":1}}],[\"40px\",{\"1\":{\"177\":3,\"195\":3}}],[\"400\",{\"1\":{\"8\":1,\"134\":2}}],[\"400ll\",{\"1\":{\"5\":3}}],[\"4px\",{\"1\":{\"175\":6,\"176\":2,\"177\":7,\"195\":9}}],[\"4^n\",{\"1\":{\"149\":1}}],[\"4=26214400\",{\"1\":{\"55\":1}}],[\"4\",{\"0\":{\"14\":1,\"70\":2,\"73\":1,\"145\":1,\"201\":1},\"1\":{\"8\":1,\"14\":1,\"20\":2,\"55\":2,\"108\":4,\"109\":1,\"112\":1,\"134\":2,\"142\":1,\"149\":3,\"150\":1}}],[\"4ll\",{\"1\":{\"5\":3}}],[\"4800ll\",{\"1\":{\"5\":1}}],[\"yourfile\",{\"1\":{\"94\":8}}],[\"y+y\",{\"1\":{\"5\":1}}],[\"y\",{\"1\":{\"5\":10,\"20\":18,\"58\":1,\"91\":1,\"108\":2,\"149\":16}}],[\"year\",{\"1\":{\"5\":5,\"8\":4,\"134\":5}}],[\"喜欢的代码格式\",{\"1\":{\"5\":1}}],[\"除法运算符\",{\"1\":{\"125\":1}}],[\"除法和取模运算\",{\"1\":{\"125\":1}}],[\"除法的速度非常的慢\",{\"1\":{\"8\":1}}],[\"除非你在别处用\",{\"1\":{\"43\":1,\"158\":1}}],[\"除非你非常清楚你自己在做什么\",{\"1\":{\"5\":1}}],[\"除了之前写好的scenenode之外\",{\"1\":{\"76\":1}}],[\"除了读入单个字符\",{\"1\":{\"46\":1}}],[\"除了来路\",{\"1\":{\"20\":1}}],[\"除了\",{\"1\":{\"11\":1,\"127\":1}}],[\"除了自己写\",{\"1\":{\"5\":1}}],[\"立方根\",{\"1\":{\"5\":1}}],[\"则根据用户的权限来决定是否可以访问该页面\",{\"1\":{\"198\":1}}],[\"则输出\",{\"1\":{\"149\":2}}],[\"则一直执行\",{\"1\":{\"138\":1}}],[\"则继续执行\",{\"1\":{\"137\":1,\"139\":1}}],[\"则执行\",{\"1\":{\"136\":1,\"137\":1}}],[\"则返回\",{\"1\":{\"135\":1}}],[\"则条件成立\",{\"1\":{\"133\":1}}],[\"则会将超出的部分截掉\",{\"1\":{\"121\":1}}],[\"则会在后面补零\",{\"1\":{\"121\":1}}],[\"则会在前面补零\",{\"1\":{\"121\":1}}],[\"则会在前面补空格\",{\"1\":{\"121\":1}}],[\"则不会起作用\",{\"1\":{\"121\":1}}],[\"则照常输出不会有变化\",{\"1\":{\"121\":1}}],[\"则需要对自己的算式进行一定的修改\",{\"1\":{\"11\":1}}],[\"则它的值为前一个枚举的取值\",{\"1\":{\"5\":1}}],[\"则这个数是负数\",{\"1\":{\"5\":1}}],[\"如数列\",{\"1\":{\"150\":1}}],[\"如树\",{\"1\":{\"150\":1}}],[\"如字母\",{\"1\":{\"116\":1}}],[\"如\",{\"1\":{\"102\":1,\"116\":1,\"178\":1}}],[\"如计数器\",{\"1\":{\"101\":1}}],[\"如圆周率\",{\"1\":{\"101\":1}}],[\"如整数\",{\"1\":{\"99\":1}}],[\"如何解决这个问题呢\",{\"1\":{\"202\":1}}],[\"如何拆分子问题\",{\"1\":{\"148\":1}}],[\"如何输出\",{\"1\":{\"137\":1}}],[\"如何使用编译器呢\",{\"1\":{\"94\":1}}],[\"如何安装\",{\"1\":{\"87\":1}}],[\"如何确认安装\",{\"1\":{\"86\":1,\"87\":1}}],[\"如何打开管理员权限的命令行\",{\"1\":{\"86\":1}}],[\"如何绕过这些问题呢\",{\"1\":{\"46\":1}}],[\"如若抄袭并不幸被查重\",{\"1\":{\"49\":1}}],[\"如不指定\",{\"1\":{\"5\":1}}],[\"如果上面的说法你看不懂\",{\"1\":{\"203\":1}}],[\"如果后端服务器尝试设置你的\",{\"1\":{\"202\":1}}],[\"如果网络请求失败\",{\"1\":{\"202\":1}}],[\"如果网络请求成功\",{\"1\":{\"202\":1}}],[\"如果打开\",{\"1\":{\"198\":1}}],[\"如果已经登录\",{\"1\":{\"198\":1}}],[\"如果已经走的步数都超过了现有的答案\",{\"1\":{\"20\":1}}],[\"如果一行不够你放下所有的元素\",{\"1\":{\"175\":1}}],[\"如果一些方法涉及到与结构体实例发生交互\",{\"1\":{\"27\":1}}],[\"如果当前已经走过的步数已经超过了从起点到终点的最短路径\",{\"1\":{\"149\":1}}],[\"如果当前已经走过的步数已经超过了之前找到的最短路径\",{\"1\":{\"149\":1}}],[\"如果当前容量不够需要重新申请内存\",{\"1\":{\"34\":1}}],[\"如果到达终点\",{\"1\":{\"149\":2}}],[\"如果某一步所有方向都走不通\",{\"1\":{\"149\":1}}],[\"如果某个方向上是能走的路\",{\"1\":{\"20\":1}}],[\"如果某个方向上是障碍物或者地图边界\",{\"1\":{\"20\":1}}],[\"如果没有路径\",{\"1\":{\"149\":2}}],[\"如果没有边界\",{\"1\":{\"23\":1}}],[\"如果成立\",{\"1\":{\"137\":2,\"138\":1,\"139\":1}}],[\"如果\",{\"1\":{\"133\":1,\"135\":1,\"136\":1}}],[\"如果超出位数\",{\"1\":{\"121\":3}}],[\"如果输出的位数不足\",{\"1\":{\"121\":3}}],[\"如果需要判断多个条件\",{\"1\":{\"133\":1}}],[\"如果需要输出反斜杠\",{\"1\":{\"121\":1}}],[\"如果需要更大的数据\",{\"1\":{\"52\":1}}],[\"如果直接写小数运算\",{\"1\":{\"114\":1}}],[\"如果直接使用绝对位置来计算固然可以\",{\"1\":{\"73\":1}}],[\"如果我们将\",{\"1\":{\"203\":1}}],[\"如果我们将问题扩展到n皇后问题\",{\"1\":{\"20\":1}}],[\"如果我现在要得到\",{\"1\":{\"108\":1}}],[\"如果说一个数减去\",{\"1\":{\"108\":1}}],[\"如果说我们把前面已经找过的皇后全部过一遍一个一个判断\",{\"1\":{\"20\":1}}],[\"如果许多个变量具有相同的类型\",{\"1\":{\"99\":1}}],[\"如果安装正确\",{\"1\":{\"86\":1,\"87\":1}}],[\"如果它大于等于\",{\"1\":{\"55\":1}}],[\"如果看上去并不会超但是却时间超限了\",{\"1\":{\"55\":1}}],[\"如果不是\",{\"1\":{\"52\":1}}],[\"如果有误自己去改\",{\"1\":{\"31\":1}}],[\"如果有一种代码能够统一的表示这些操作\",{\"1\":{\"17\":1}}],[\"如果滥用\",{\"1\":{\"28\":1}}],[\"如果想寻求些挑战\",{\"1\":{\"37\":1}}],[\"如果想要了解如何不超时\",{\"1\":{\"23\":1}}],[\"如果想用\",{\"1\":{\"5\":1}}],[\"如果这个位置在地图范围之外\",{\"1\":{\"20\":1}}],[\"如果这个位置并不能走\",{\"1\":{\"20\":1}}],[\"如果这个数字没有被用过\",{\"1\":{\"20\":1}}],[\"如果仍然不是很理解\",{\"1\":{\"20\":1}}],[\"如果是第一次接触开发的同学\",{\"1\":{\"192\":1}}],[\"如果是专门为某个结构体设计的函数\",{\"1\":{\"165\":1}}],[\"如果是常量数组\",{\"1\":{\"149\":1}}],[\"如果是一个数组\",{\"1\":{\"43\":1,\"156\":1}}],[\"如果是\",{\"1\":{\"11\":1,\"52\":1}}],[\"如果使用\",{\"1\":{\"8\":1}}],[\"如果判断不成立\",{\"1\":{\"8\":1}}],[\"如果条件不成立\",{\"1\":{\"8\":1,\"133\":1}}],[\"如果你写了这样一段代码\",{\"1\":{\"202\":1}}],[\"如果你访问\",{\"1\":{\"198\":1}}],[\"如果你在\",{\"1\":{\"198\":2}}],[\"如果你在这个变量名前面加上\",{\"1\":{\"43\":1,\"156\":1}}],[\"如果你使用了大量的\",{\"1\":{\"182\":1}}],[\"如果你真的一点\",{\"1\":{\"181\":1}}],[\"如果你追求更强力的表现\",{\"1\":{\"178\":1}}],[\"如果你将\",{\"1\":{\"177\":1}}],[\"如果你将整个搜索过程画图表示出来\",{\"1\":{\"20\":1}}],[\"如果你有一个好看的背景\",{\"1\":{\"176\":1}}],[\"如果你需要设计全局生效的\",{\"1\":{\"198\":1}}],[\"如果你需要更基础的教程\",{\"1\":{\"173\":1}}],[\"如果你需要存储更多的元素\",{\"1\":{\"140\":1}}],[\"如果你更喜欢手动操作\",{\"1\":{\"94\":1}}],[\"如果你更喜欢老版本的青涩风格\",{\"1\":{\"85\":1}}],[\"如果你分盘了\",{\"1\":{\"86\":1}}],[\"如果你已经搜索过\",{\"1\":{\"86\":1}}],[\"如果你的\",{\"1\":{\"86\":1,\"175\":1}}],[\"如果你没有\",{\"1\":{\"86\":1}}],[\"如果你会使用\",{\"1\":{\"85\":1}}],[\"如果你会用正则表达式的话\",{\"1\":{\"46\":1}}],[\"如果你空间超限\",{\"1\":{\"55\":1}}],[\"如果你正在使用你是\",{\"1\":{\"52\":1}}],[\"如果你做过\",{\"1\":{\"46\":1}}],[\"如果你发现你的程序越跑越慢\",{\"1\":{\"43\":1,\"158\":1}}],[\"如果你还在别处需要这个数组\",{\"1\":{\"43\":1,\"158\":1}}],[\"如果你想使用静态数组\",{\"1\":{\"55\":1}}],[\"如果你想使用多种判断\",{\"1\":{\"8\":1}}],[\"如果你想要传入多个参数\",{\"1\":{\"17\":1}}],[\"如果你并没有学习函数并能灵活使用\",{\"1\":{\"17\":1}}],[\"如果你确定不会出现负数\",{\"1\":{\"5\":1}}],[\"如果你直接写变量名\",{\"1\":{\"2\":1}}],[\"如果该位是\",{\"1\":{\"5\":1}}],[\"你可能完成了一些事情\",{\"1\":{\"202\":1}}],[\"你可以创建一个文件\",{\"1\":{\"202\":1}}],[\"你可以直接脱去\",{\"1\":{\"202\":1}}],[\"你可以直接把它标记为已经走过\",{\"1\":{\"20\":1}}],[\"你可以这样使用它\",{\"1\":{\"202\":1}}],[\"你可以这样写\",{\"1\":{\"43\":1,\"158\":1}}],[\"你可以根据这些字段来处理跳转逻辑\",{\"1\":{\"198\":1}}],[\"你可以以你自己的理解来存放\",{\"1\":{\"198\":1}}],[\"你可以前往\",{\"1\":{\"181\":1}}],[\"你可以试试\",{\"1\":{\"175\":1}}],[\"你可以通过这个链接学习如何使用\",{\"1\":{\"198\":1}}],[\"你可以通过创建类型别名省去结构体定义时所需要写的\",{\"1\":{\"164\":1}}],[\"你可以通过循环来遍历数组中的所有元素\",{\"1\":{\"140\":1}}],[\"你可以通过下标来访问数组中的元素\",{\"1\":{\"140\":1}}],[\"你可以开着这个程序来自动找到使你程序出错的针对性数据\",{\"1\":{\"52\":1}}],[\"你可以把它当作数组使用\",{\"1\":{\"43\":1,\"158\":1}}],[\"你可以用\",{\"1\":{\"43\":1,\"157\":1}}],[\"你可以去看看之后出来的指针ex\",{\"1\":{\"37\":1}}],[\"你可以不写变量名\",{\"1\":{\"27\":1}}],[\"你可以在其中添加一些你需要的字段\",{\"1\":{\"198\":1}}],[\"你可以在这里编写组件的\",{\"1\":{\"198\":2}}],[\"你可以在这里编写组件的逻辑代码\",{\"1\":{\"198\":1}}],[\"你可以在定义\",{\"1\":{\"105\":1}}],[\"你可以在\",{\"1\":{\"27\":1,\"198\":1}}],[\"你可以将多个\",{\"1\":{\"52\":1}}],[\"你可以将\",{\"1\":{\"27\":1}}],[\"你可以编写一个判断是否确认符合进制规则的函数\",{\"1\":{\"17\":1}}],[\"你可以调用和修改这些变量\",{\"1\":{\"17\":1}}],[\"你可以采取更花式的写法\",{\"1\":{\"8\":1}}],[\"你可以使用逗号分隔符来声明多个变量\",{\"1\":{\"99\":1}}],[\"你可以使用逻辑与\",{\"1\":{\"8\":1}}],[\"你可以使用\",{\"1\":{\"5\":1,\"8\":2,\"99\":1,\"137\":1}}],[\"你将学习一些有关页面元素设计的基础内容\",{\"1\":{\"198\":1}}],[\"你应该对\",{\"1\":{\"198\":1}}],[\"你应当前往\",{\"1\":{\"201\":1}}],[\"你应当对如何编写\",{\"1\":{\"177\":1}}],[\"你应当在后面加上\",{\"1\":{\"164\":1}}],[\"你应当会看到下面的内容\",{\"1\":{\"86\":1,\"87\":1}}],[\"你编写的样式只会作用到当前文件中的模板设计\",{\"1\":{\"198\":1}}],[\"你会在开发者工具中开心地发现你请求成功了\",{\"1\":{\"202\":1}}],[\"你会找到一个\",{\"1\":{\"198\":1}}],[\"你会发现网页是由一个一个小方块组成的\",{\"1\":{\"182\":1}}],[\"你会发现列出的匹配中有\",{\"1\":{\"86\":1}}],[\"你会发现一个叫做空间限制的东西\",{\"1\":{\"55\":1}}],[\"你会发现它们在时间上的复杂度都是n²\",{\"1\":{\"55\":1}}],[\"你会发现\",{\"1\":{\"20\":1,\"55\":1,\"58\":1,\"93\":1,\"133\":1,\"149\":1,\"175\":1,\"198\":4}}],[\"你知道吗\",{\"1\":{\"198\":1}}],[\"你需要在这里配置你的\",{\"1\":{\"198\":1}}],[\"你需要在声明时指定变量的类型和名称\",{\"1\":{\"99\":1}}],[\"你需要为每个变量标注变量类型\",{\"1\":{\"198\":1}}],[\"你需要从起点\",{\"1\":{\"149\":1}}],[\"你需要创建一个更大的数组\",{\"1\":{\"140\":1}}],[\"你需要先定义结构体类型及其成员\",{\"1\":{\"27\":1}}],[\"你帮我插入到当前文件中吧\",{\"1\":{\"91\":1}}],[\"你也许会发现\",{\"1\":{\"202\":1}}],[\"你也许有熟练的手段能快速访问国际上的网络\",{\"1\":{\"87\":1}}],[\"你也应当使用\",{\"1\":{\"189\":1}}],[\"你也不能把它们写在一起\",{\"1\":{\"147\":1}}],[\"你也需要执行一些操作\",{\"1\":{\"133\":1}}],[\"你也可以为这个实例创建\",{\"1\":{\"202\":1}}],[\"你也可以为某个特定的枚举指定值\",{\"1\":{\"5\":1}}],[\"你也可以尝试应用一些简单的动画\",{\"1\":{\"178\":1}}],[\"你也可以尝试为背景色加上一定的透明度来提升观感\",{\"1\":{\"176\":1}}],[\"你也可以借助空间限制来完成一些本来不可能的操作\",{\"1\":{\"55\":1}}],[\"你也可以不给结构体名字\",{\"1\":{\"27\":1,\"164\":1}}],[\"你也可以使用类似\",{\"1\":{\"127\":1}}],[\"你也可以使用\",{\"1\":{\"17\":1,\"137\":1}}],[\"你也可以把\",{\"1\":{\"8\":1}}],[\"你都用\",{\"1\":{\"87\":1}}],[\"你都需要进行\",{\"1\":{\"55\":1}}],[\"你不会以为我要讲一讲\",{\"1\":{\"85\":1}}],[\"你还需要东西来分类存储他们\",{\"1\":{\"76\":1}}],[\"你自己心里面应该有数\",{\"1\":{\"64\":1}}],[\"你用得到的功能\",{\"1\":{\"61\":1}}],[\"你几乎能在里面找到所有你想要使用的\",{\"1\":{\"58\":1}}],[\"你想知道它们占了多少空间\",{\"1\":{\"55\":1}}],[\"你想要申请一个\",{\"1\":{\"43\":1,\"158\":1}}],[\"你再仔细看你会发现它大概是\",{\"1\":{\"55\":1}}],[\"你要对这个数据进行归并排序\",{\"1\":{\"55\":1}}],[\"你这里的循环要进行多少次\",{\"1\":{\"55\":1}}],[\"你盯着数据范围看\",{\"1\":{\"55\":1}}],[\"你的\",{\"0\":{\"58\":1}}],[\"你的随机数程序生成的可执行文件叫\",{\"1\":{\"52\":1}}],[\"你的程序就会在终端中运行了\",{\"1\":{\"94\":1}}],[\"你的程序生成的可执行文件叫\",{\"1\":{\"52\":1}}],[\"你的程序虽然还是暴力\",{\"1\":{\"20\":1}}],[\"你猜怎么着\",{\"1\":{\"49\":1}}],[\"你看到我们是怎样绕过\",{\"1\":{\"46\":1}}],[\"你就会发现原因\",{\"1\":{\"198\":1}}],[\"你就会发现用\",{\"1\":{\"46\":1}}],[\"你就可以愉快地进行网络请求了\",{\"1\":{\"202\":1}}],[\"你就可以在终端中运行这个可执行文件了\",{\"1\":{\"94\":1}}],[\"你就可以通过这些东西来计算自己应该用哪种数据类型\",{\"1\":{\"55\":1}}],[\"你就一定得知道该用多大\",{\"1\":{\"55\":1}}],[\"你就堆在主函数里面\",{\"1\":{\"17\":1}}],[\"你一定要记得把指针空置\",{\"1\":{\"43\":1,\"158\":1}}],[\"你便没有办法再获得它了\",{\"1\":{\"43\":1,\"158\":1}}],[\"你必须挨个为它们指定名称\",{\"1\":{\"147\":1}}],[\"你必须得在确定了输入之后再新建数组\",{\"1\":{\"43\":1,\"158\":1}}],[\"你必须用逗号隔开并分别指定每一个变量的类型\",{\"1\":{\"17\":1}}],[\"你现在想把它存下来\",{\"1\":{\"43\":1,\"157\":1}}],[\"你成功的取出了\",{\"1\":{\"43\":1,\"156\":1}}],[\"你们应该能看懂\",{\"1\":{\"34\":1}}],[\"你只需要这样编写你的\",{\"1\":{\"198\":1}}],[\"你只需要关注你想要展示的内容\",{\"1\":{\"198\":1}}],[\"你只需要一位一位读入二进制然后把它弄到一个\",{\"1\":{\"37\":1}}],[\"你只要尽可能顶着空间限制开\",{\"1\":{\"55\":1}}],[\"你只应当在清楚自己到底在做什么的时候使用它\",{\"1\":{\"28\":1}}],[\"你只能向右或向下移动\",{\"1\":{\"149\":1}}],[\"你只能通过传入实例来实现\",{\"1\":{\"27\":1}}],[\"你只能在创建的时候立刻使用它\",{\"1\":{\"27\":1,\"164\":1}}],[\"你最好加上前缀\",{\"1\":{\"27\":1}}],[\"你没法再在别处使用它\",{\"1\":{\"27\":1,\"164\":1}}],[\"你创建了这样一个类型\",{\"1\":{\"27\":1}}],[\"你第一步是要移到中间柱上\",{\"1\":{\"23\":1,\"148\":1}}],[\"你有三个方向可以走\",{\"1\":{\"20\":1}}],[\"你走到某一个点\",{\"1\":{\"20\":1}}],[\"你能直接通过返回值来立即离开这个已经没有用的函数\",{\"1\":{\"17\":1}}],[\"你实际上可以发现函数只不过是把一些东西放到另一个地方去写罢了\",{\"1\":{\"17\":1}}],[\"ts\",{\"1\":{\"198\":1}}],[\"token\",{\"1\":{\"198\":3,\"202\":2}}],[\"to\",{\"1\":{\"198\":7}}],[\"tom\",{\"1\":{\"165\":1}}],[\"try\",{\"1\":{\"202\":1}}],[\"translatey\",{\"1\":{\"195\":2}}],[\"transform\",{\"1\":{\"195\":2}}],[\"transition\",{\"1\":{\"178\":2,\"195\":2}}],[\"true\",{\"1\":{\"20\":3,\"118\":3,\"202\":1}}],[\"title>\",{\"1\":{\"198\":1}}],[\"title\",{\"1\":{\"177\":2,\"184\":1,\"185\":1,\"195\":4,\"198\":8}}],[\"timeout\",{\"1\":{\"202\":1}}],[\"time\",{\"1\":{\"52\":2}}],[\"template\",{\"1\":{\"198\":2}}],[\"template>\",{\"1\":{\"198\":3}}],[\"text\",{\"1\":{\"174\":1,\"195\":4}}],[\"terminal\",{\"1\":{\"87\":1}}],[\"terminated\",{\"1\":{\"86\":1,\"87\":1}}],[\"tetris项目\",{\"1\":{\"58\":1}}],[\"txt\",{\"1\":{\"61\":1}}],[\"then\",{\"1\":{\"133\":1,\"202\":6}}],[\"theme\",{\"1\":{\"85\":1}}],[\"themes\",{\"1\":{\"85\":1}}],[\"this\",{\"1\":{\"27\":9,\"165\":5,\"203\":12}}],[\"thursday\",{\"1\":{\"5\":1}}],[\"t`\",{\"1\":{\"27\":1}}],[\"tmp\",{\"1\":{\"27\":2,\"34\":3}}],[\"t\",{\"1\":{\"17\":2,\"27\":12,\"31\":8,\"43\":2,\"121\":1,\"158\":2,\"164\":3,\"165\":10}}],[\"tab\",{\"1\":{\"5\":2}}],[\"type=\",{\"1\":{\"174\":1,\"195\":2,\"198\":1}}],[\"typedef\",{\"1\":{\"5\":3,\"27\":6,\"31\":1,\"164\":3,\"165\":1}}],[\"typescript\",{\"1\":{\"198\":1},\"2\":{\"194\":1,\"197\":1,\"200\":1,\"205\":1}}],[\"types\",{\"0\":{\"5\":1,\"26\":1},\"1\":{\"5\":4,\"26\":1,\"28\":1,\"128\":1,\"167\":1}}],[\"tuesday\",{\"1\":{\"5\":2}}],[\"可拓展性\",{\"1\":{\"182\":1}}],[\"可读性下降\",{\"1\":{\"141\":1}}],[\"可执行文件去哪里领\",{\"1\":{\"94\":1}}],[\"可选\",{\"1\":{\"58\":1}}],[\"可以接受参数\",{\"1\":{\"203\":1}}],[\"可以高效地开发用户界面\",{\"1\":{\"198\":1}}],[\"可以自行复制到别处查看效果\",{\"1\":{\"195\":1}}],[\"可以自己去写写看\",{\"1\":{\"23\":1}}],[\"可以不指定大小\",{\"1\":{\"149\":1}}],[\"可以是一个或多个\",{\"1\":{\"147\":1}}],[\"可以省略\",{\"1\":{\"137\":1}}],[\"可以连续使用\",{\"1\":{\"133\":1}}],[\"可以试试使用位运算符\",{\"1\":{\"126\":1}}],[\"可以指定输入的格式\",{\"1\":{\"120\":1}}],[\"可以将文档的存储路径换到别处哦\",{\"1\":{\"86\":1}}],[\"可以将它想象成一个棋盘\",{\"1\":{\"14\":1}}],[\"可以前往\",{\"1\":{\"86\":1}}],[\"可以开\",{\"1\":{\"55\":1}}],[\"可以算出\",{\"1\":{\"55\":1}}],[\"可以参考我的代码\",{\"1\":{\"49\":1}}],[\"可以很方便的将多个数据打包\",{\"1\":{\"27\":1}}],[\"可以去看看题解\",{\"1\":{\"20\":1}}],[\"可以在某一范围内循环地往右运动\",{\"1\":{\"17\":1}}],[\"可以灵活运用内部的三大部分\",{\"1\":{\"8\":1}}],[\"可以看到它在加载的过程中需要不止一个参数\",{\"1\":{\"67\":1}}],[\"可以看到\",{\"1\":{\"8\":1,\"198\":1}}],[\"可以用来给一个类型起一个新的名字\",{\"1\":{\"5\":1}}],[\"可以用来很方便地表示一些固定的值\",{\"1\":{\"5\":1}}],[\"可能会成为至关重要的一环\",{\"1\":{\"20\":1}}],[\"可能会出现一些精度上的问题\",{\"1\":{\"5\":1}}],[\"可能有很多个\",{\"1\":{\"20\":1}}],[\"可能你想问\",{\"1\":{\"17\":1}}],[\"可能不少同学去记\",{\"1\":{\"5\":1}}],[\"但你可以通过使用\",{\"1\":{\"198\":1}}],[\"但你会发现你实际上大部分的代码都是在复制粘贴\",{\"1\":{\"17\":1}}],[\"但可以包裹其它元素\",{\"1\":{\"182\":1}}],[\"但可以为这个变量的特定值附上特定的名字\",{\"1\":{\"5\":1}}],[\"但它还不够有\",{\"1\":{\"176\":1}}],[\"但它也用掉了一部分的时间用来维护这个动态数组\",{\"1\":{\"34\":1}}],[\"但因为\",{\"1\":{\"165\":1}}],[\"但如果你使用了\",{\"1\":{\"164\":1}}],[\"但我们可以通过一个简单的例子来理解它\",{\"1\":{\"148\":1}}],[\"但我们更习惯称它位动态数组\",{\"1\":{\"34\":1}}],[\"但请确定好运算符之间的运算顺序\",{\"1\":{\"127\":1}}],[\"但很遗憾\",{\"1\":{\"118\":1}}],[\"但计算机的设计是每位分开计算的\",{\"1\":{\"107\":1}}],[\"但个人觉得这种命名方式非常丑而且没有必要\",{\"1\":{\"102\":1}}],[\"但实际上当你不指定格式\",{\"1\":{\"120\":1}}],[\"但实际上这个不是最要紧的\",{\"1\":{\"55\":1}}],[\"但实际上和单个\",{\"1\":{\"43\":1,\"158\":1}}],[\"但不要太多\",{\"1\":{\"55\":1}}],[\"但用另一种方式\",{\"1\":{\"46\":1}}],[\"但\",{\"1\":{\"43\":2,\"58\":1,\"158\":2}}],[\"但抛开好理解不谈\",{\"1\":{\"37\":1}}],[\"但反而更有利于代码的管理\",{\"1\":{\"27\":1}}],[\"但当处在多重循环之中\",{\"1\":{\"14\":1}}],[\"但某\",{\"1\":{\"5\":1}}],[\"但是并不会立即得到结果\",{\"1\":{\"202\":1}}],[\"但是控制台中输出的\",{\"1\":{\"202\":1}}],[\"但是可能会有多个协程同时运行\",{\"1\":{\"202\":1}}],[\"但是助教讲解的也并不是非常的清楚\",{\"1\":{\"192\":1}}],[\"但是你会发现它并没有靠到最右边\",{\"1\":{\"177\":1}}],[\"但是需要注意递归的边界条件和时间开销\",{\"1\":{\"149\":1}}],[\"但是想想这样找要找多久\",{\"1\":{\"149\":1}}],[\"但是因为它的跳转特性\",{\"1\":{\"141\":1}}],[\"但是因为\",{\"1\":{\"139\":1}}],[\"但是嵌套过多会导致代码可读性下降\",{\"1\":{\"135\":1}}],[\"但是为了代码的可读性考虑\",{\"1\":{\"133\":1}}],[\"但是是一种好习惯\",{\"1\":{\"165\":1}}],[\"但是是十六进制的大写形式\",{\"1\":{\"121\":1}}],[\"但是是浮点数\",{\"1\":{\"121\":1}}],[\"但是在画面上我们仍想要看到下一层内容\",{\"1\":{\"79\":1}}],[\"但是十分麻烦\",{\"1\":{\"73\":1}}],[\"但是太麻烦了\",{\"1\":{\"67\":1}}],[\"但是已经能足够我们写一些简单的东西了\",{\"1\":{\"64\":1}}],[\"但是实际用起来效果并不尽如人意\",{\"1\":{\"58\":1}}],[\"但是冒泡排序和插入排序它们就不太好过了\",{\"1\":{\"55\":1}}],[\"但是冒泡排序太慢了\",{\"1\":{\"23\":1}}],[\"但是请注意范围可能会超过\",{\"1\":{\"52\":1}}],[\"但是不能省略\",{\"1\":{\"137\":1}}],[\"但是不能直接抄袭\",{\"1\":{\"49\":1}}],[\"但是不同的变量类型理解内存上每一位的方式不一样\",{\"1\":{\"37\":1}}],[\"但是大部分情况下\",{\"1\":{\"46\":1}}],[\"但是\",{\"1\":{\"46\":1,\"64\":1,\"198\":2}}],[\"但是交上去就不大对劲\",{\"1\":{\"46\":1}}],[\"但是没有题\",{\"1\":{\"43\":1}}],[\"但是指针也是\",{\"1\":{\"43\":1,\"155\":1}}],[\"但是显然题目不允许我们这样做\",{\"1\":{\"37\":1}}],[\"但是链表的好处在于它的内存是动态的\",{\"1\":{\"31\":1}}],[\"但是它只能存放一种数据类型\",{\"1\":{\"28\":1}}],[\"但是它们更快\",{\"1\":{\"5\":1}}],[\"但是结构体如果用的好的话\",{\"1\":{\"27\":1}}],[\"但是如果你将\",{\"1\":{\"23\":1,\"148\":1}}],[\"但是这个\",{\"1\":{\"202\":1}}],[\"但是这种智能\",{\"1\":{\"46\":1}}],[\"但是这对我们理解递归有很有效的帮助\",{\"1\":{\"23\":1}}],[\"但是这样做\",{\"1\":{\"20\":1}}],[\"但是我们能知道它由\",{\"1\":{\"23\":1}}],[\"但是就是能过\",{\"1\":{\"20\":1}}],[\"但是也逃不过这种思路\",{\"1\":{\"20\":1}}],[\"但是好像基于递归来暴力求解一些问题还不太熟练\",{\"1\":{\"20\":1}}],[\"但是数量增加\",{\"1\":{\"20\":1}}],[\"但是他告诉同学们\",{\"1\":{\"11\":1}}],[\"但是使用时\",{\"1\":{\"8\":1}}],[\"但是适当的空行可以让你的程序看起来区分步骤更加明显\",{\"1\":{\"5\":1}}],[\"但是表示的精度有限\",{\"1\":{\"5\":1}}],[\"😉\",{\"1\":{\"5\":1}}],[\"person\",{\"1\":{\"203\":9}}],[\"permission\",{\"1\":{\"198\":3}}],[\"permutations\",{\"1\":{\"20\":2}}],[\"ppt\",{\"1\":{\"195\":2}}],[\"p>\",{\"1\":{\"177\":1,\"184\":1,\"185\":1,\"189\":1,\"195\":2}}],[\"png\",{\"1\":{\"177\":1,\"195\":1}}],[\"pi\",{\"1\":{\"100\":4,\"101\":1}}],[\"p运行c\",{\"1\":{\"58\":1}}],[\"password\",{\"1\":{\"195\":1}}],[\"panel\",{\"1\":{\"195\":2}}],[\"paragraph\",{\"1\":{\"184\":1,\"185\":1}}],[\"padding\",{\"0\":{\"177\":1},\"1\":{\"177\":3,\"195\":3}}],[\"path\",{\"1\":{\"67\":2,\"86\":1,\"198\":9}}],[\"package\",{\"1\":{\"198\":4}}],[\"packages\",{\"1\":{\"58\":1}}],[\"pack\",{\"1\":{\"85\":1}}],[\"pac=github\",{\"1\":{\"58\":1}}],[\"pause\",{\"1\":{\"52\":1,\"79\":1}}],[\"p2\",{\"1\":{\"43\":5,\"158\":5}}],[\"p2383\",{\"1\":{\"20\":1}}],[\"p1\",{\"1\":{\"43\":12,\"158\":12}}],[\"p1433\",{\"1\":{\"20\":1}}],[\"public\",{\"1\":{\"198\":1}}],[\"push\",{\"0\":{\"79\":1},\"1\":{\"34\":3}}],[\"putchar\",{\"0\":{\"123\":1},\"1\":{\"5\":1,\"37\":2,\"119\":1,\"123\":5}}],[\"prettier\",{\"1\":{\"85\":1}}],[\"prev\",{\"1\":{\"31\":1}}],[\"promise<>\",{\"1\":{\"202\":1}}],[\"promise\",{\"1\":{\"201\":1,\"202\":10}}],[\"programming\",{\"0\":{\"91\":1},\"2\":{\"89\":1,\"97\":1,\"130\":1,\"144\":1,\"153\":1,\"162\":1,\"169\":1,\"172\":1}}],[\"proxy\",{\"1\":{\"58\":1}}],[\"problem\",{\"1\":{\"52\":1}}],[\"printf\",{\"0\":{\"121\":1},\"1\":{\"2\":4,\"5\":9,\"8\":4,\"14\":1,\"23\":3,\"52\":1,\"91\":4,\"92\":1,\"93\":1,\"119\":1,\"121\":5,\"133\":3,\"134\":2,\"135\":2,\"136\":3,\"137\":1,\"138\":2,\"139\":2,\"140\":1,\"141\":1,\"148\":2,\"149\":2,\"159\":1,\"165\":2}}],[\"pop\",{\"1\":{\"34\":2}}],[\"position\",{\"1\":{\"195\":2}}],[\"pos\",{\"1\":{\"31\":14,\"34\":10}}],[\"pointer\",{\"0\":{\"31\":1,\"34\":1,\"37\":1},\"1\":{\"31\":1,\"34\":1,\"37\":1,\"166\":1,\"178\":1,\"195\":1}}],[\"powershell\",{\"1\":{\"86\":3}}],[\"pow\",{\"1\":{\"5\":2}}],[\"p\",{\"1\":{\"17\":1,\"43\":4,\"157\":1,\"158\":3,\"159\":6,\"165\":1,\"174\":1}}],[\"plus\",{\"1\":{\"201\":2}}],[\"placeholder=\",{\"1\":{\"195\":2}}],[\"pl\",{\"1\":{\"17\":1}}],[\"以外的语义容器\",{\"1\":{\"189\":1}}],[\"以外的编辑器使用\",{\"1\":{\"58\":1}}],[\"以防止悬空指针\",{\"1\":{\"165\":1}}],[\"以防止递归无限进行下去\",{\"1\":{\"148\":1}}],[\"以标注这个供给该结构体使用的函数\",{\"1\":{\"165\":1}}],[\"以使表达更加清楚\",{\"1\":{\"164\":1}}],[\"以十六进制的形式输出\",{\"1\":{\"121\":1}}],[\"以下代码将字符\",{\"1\":{\"123\":1}}],[\"以下代码将整数\",{\"1\":{\"121\":1}}],[\"以下代码从标准输入读取一个字符\",{\"1\":{\"122\":1}}],[\"以下代码从标准输入读取一个整数和一个浮点数\",{\"1\":{\"120\":1}}],[\"以表示这个函数所操作的对象\",{\"1\":{\"165\":1}}],[\"以表示它们是\",{\"1\":{\"93\":1}}],[\"以表歉意\",{\"1\":{\"46\":1}}],[\"以管理员身份运行\",{\"1\":{\"86\":1}}],[\"以\",{\"1\":{\"43\":1,\"92\":1,\"158\":1,\"174\":2}}],[\"以方便你之后的作业开发\",{\"1\":{\"198\":1}}],[\"以方便我们进行碰撞检测等操作\",{\"1\":{\"70\":1}}],[\"以方便我们将\",{\"1\":{\"23\":1,\"148\":1}}],[\"以方便在其它函数里面找到这个变量\",{\"1\":{\"43\":1,\"157\":1}}],[\"以此类推\",{\"1\":{\"37\":1,\"43\":1,\"93\":1,\"140\":1,\"149\":1,\"158\":1}}],[\"以便于更好地理解\",{\"1\":{\"26\":1}}],[\"以后的题目中可能会出现对某一数字取模的情况\",{\"1\":{\"11\":1}}],[\"以避免一些逻辑上的问题\",{\"1\":{\"8\":1}}],[\"以避免空间超限和时间超限的问题\",{\"1\":{\"5\":1}}],[\"以及网络请求的一些必需知识\",{\"1\":{\"198\":1}}],[\"以及如何使用\",{\"1\":{\"195\":1}}],[\"以及游戏音效的随意施放\",{\"1\":{\"82\":1}}],[\"以及\",{\"1\":{\"79\":1}}],[\"以及剪枝是否到位\",{\"1\":{\"55\":1}}],[\"以及其中高得离谱的错误率\",{\"1\":{\"20\":2}}],[\"以及一种最重要的写法\",{\"1\":{\"8\":1}}],[\"以及之后要学到的\",{\"1\":{\"5\":1}}],[\"以及地图障碍的记录\",{\"1\":{\"5\":1}}],[\"没有办法表示\",{\"1\":{\"108\":1}}],[\"没有办法提供合适的\",{\"1\":{\"58\":1}}],[\"没用过\",{\"1\":{\"61\":1}}],[\"没必要继续下去的时候\",{\"1\":{\"17\":1}}],[\"没错\",{\"1\":{\"5\":1}}],[\"没想到我们已经能编写出一个能干点事情的程序了\",{\"1\":{\"2\":1}}],[\"最大的\",{\"1\":{\"149\":1}}],[\"最基础的\",{\"1\":{\"133\":1}}],[\"最高位是符号位\",{\"1\":{\"106\":1}}],[\"最小值是\",{\"1\":{\"105\":2,\"109\":1}}],[\"最初的起点\",{\"0\":{\"90\":1}}],[\"最好仅在需要快速连续跳出多层循环时使用\",{\"1\":{\"141\":1}}],[\"最好写完之后重看一遍\",{\"1\":{\"133\":1}}],[\"最好保证你的用户名是纯英文不带空格的\",{\"1\":{\"85\":1}}],[\"最好先查清楚怎么用\",{\"1\":{\"5\":1}}],[\"最要紧的是排序的过程\",{\"1\":{\"55\":1}}],[\"最重要的来了\",{\"1\":{\"55\":1}}],[\"最终变成一层的可以直接解决的问题\",{\"1\":{\"23\":1,\"148\":1}}],[\"最终得出的结果与只对结果取模是一样的\",{\"1\":{\"11\":1}}],[\"最后通过\",{\"1\":{\"198\":1}}],[\"最后\",{\"1\":{\"159\":1}}],[\"最后返回由这些操作计算得出的指定格式的结果\",{\"1\":{\"91\":1}}],[\"最后再将他们拼接到一起\",{\"1\":{\"64\":1}}],[\"最后我们来简单介绍一下归并排序\",{\"1\":{\"23\":1}}],[\"最后我们将这\",{\"1\":{\"23\":1,\"148\":1}}],[\"最后把中间柱子上的那个盘子移到终点柱子上\",{\"1\":{\"23\":1,\"148\":1}}],[\"最后是这个函数的主体部分\",{\"1\":{\"17\":1}}],[\"最底下的一层和上面\",{\"1\":{\"23\":1,\"148\":1}}],[\"最适合的解决方法除了调试\",{\"1\":{\"20\":1}}],[\"最多只能表示到\",{\"1\":{\"5\":1}}],[\"最简单的方式是以1亿次循环为标准\",{\"1\":{\"5\":1}}],[\"一行一个整数\",{\"1\":{\"149\":1}}],[\"一般建议使用\",{\"1\":{\"203\":1}}],[\"一般也建议使用组合式\",{\"1\":{\"198\":1}}],[\"一般也用不上这么精细\",{\"1\":{\"114\":1}}],[\"一般不会用到\",{\"1\":{\"114\":1}}],[\"一般来说考前看一眼就够用\",{\"1\":{\"114\":1}}],[\"一般来说\",{\"1\":{\"114\":1,\"150\":1,\"198\":2}}],[\"一般将全局变量声明为常量或静态变量\",{\"1\":{\"100\":1}}],[\"一样\",{\"1\":{\"91\":1}}],[\"一样痛苦的配环境环节\",{\"1\":{\"61\":1}}],[\"一种是多行注释\",{\"1\":{\"92\":1}}],[\"一种是单行注释\",{\"1\":{\"92\":1}}],[\"一种是双引号里的\",{\"1\":{\"91\":1}}],[\"一种是尖括号里的\",{\"1\":{\"91\":1}}],[\"一种理解是根据主角位置的不同将其他物体发出的声音按照方向环绕在玩家耳边\",{\"1\":{\"82\":1}}],[\"一种好的代码格式\",{\"1\":{\"5\":1}}],[\"一次递归也算作一次循环\",{\"1\":{\"55\":1}}],[\"一问发现有些同学的算法不是很好\",{\"1\":{\"55\":1}}],[\"一开始并没有考虑到这个问题\",{\"1\":{\"46\":1}}],[\"一开始只是平平无奇的一个\",{\"1\":{\"37\":1}}],[\"一不小心就会出错\",{\"1\":{\"43\":1,\"155\":1}}],[\"一个空的\",{\"1\":{\"198\":1}}],[\"一个好的\",{\"1\":{\"173\":1}}],[\"一个人的方法可能包括行走\",{\"1\":{\"165\":1}}],[\"一个人的属性可能包括姓名\",{\"1\":{\"165\":1}}],[\"一个负整数\",{\"1\":{\"108\":1}}],[\"一个最快捷的方式是\",{\"1\":{\"94\":1}}],[\"一个很简单的例子\",{\"1\":{\"79\":1}}],[\"一个变量\",{\"1\":{\"28\":1}}],[\"一个\",{\"1\":{\"20\":1,\"37\":2}}],[\"一个字符的时候\",{\"1\":{\"5\":1}}],[\"一定要把标记取消\",{\"1\":{\"20\":1}}],[\"一共有多少种排法\",{\"1\":{\"20\":1}}],[\"一直想让你们把关键的变量放在主函数外面的原因\",{\"1\":{\"17\":1}}],[\"一层一层\",{\"1\":{\"14\":1}}],[\"一些用不上的内容就会略过不说\",{\"1\":{\"192\":1}}],[\"一些简单的快速上手是有的\",{\"1\":{\"192\":1}}],[\"一些题目可能会在数据范围上作文章\",{\"1\":{\"109\":1}}],[\"一些提示\",{\"1\":{\"8\":1}}],[\"一些注意点\",{\"1\":{\"5\":2}}],[\"一年中的月份\",{\"1\":{\"5\":1}}],[\"一一对应的给出\",{\"1\":{\"2\":1}}],[\"能够让\",{\"1\":{\"164\":1}}],[\"能被\",{\"1\":{\"134\":1}}],[\"能被用来表示小数\",{\"1\":{\"5\":1}}],[\"能让\",{\"1\":{\"108\":1}}],[\"能让你获得最舒适的游戏体验\",{\"1\":{\"61\":1}}],[\"能让你的程序看上去更加清晰\",{\"1\":{\"5\":1}}],[\"能用来表示数字的只有\",{\"1\":{\"108\":1}}],[\"能用这种穷举来解决的问题\",{\"1\":{\"20\":1}}],[\"能做坐标系上的变换\",{\"1\":{\"73\":1}}],[\"能表示更多的小数位\",{\"1\":{\"5\":1}}],[\"fetch\",{\"1\":{\"202\":3}}],[\"f12\",{\"1\":{\"182\":1}}],[\"f2f3f5\",{\"1\":{\"178\":1}}],[\"found\",{\"1\":{\"206\":1}}],[\"focus\",{\"1\":{\"195\":1}}],[\"footer>\",{\"1\":{\"189\":1}}],[\"font\",{\"1\":{\"177\":1,\"195\":5}}],[\"format\",{\"1\":{\"120\":3,\"121\":2}}],[\"formatter\",{\"1\":{\"85\":1}}],[\"for\",{\"0\":{\"8\":1,\"11\":1},\"1\":{\"5\":1,\"8\":14,\"11\":2,\"20\":3,\"34\":4,\"37\":1,\"55\":1,\"85\":1,\"133\":1,\"137\":6,\"138\":2,\"139\":3,\"140\":1,\"142\":2,\"149\":4,\"150\":1}}],[\"f0f0f0\",{\"1\":{\"177\":1,\"195\":1}}],[\"ffffff\",{\"1\":{\"178\":1}}],[\"fff\",{\"1\":{\"175\":18}}],[\"fpnumber\",{\"1\":{\"102\":1}}],[\"favicon\",{\"1\":{\"198\":2}}],[\"fatal\",{\"1\":{\"86\":1,\"87\":1}}],[\"fast\",{\"1\":{\"61\":1}}],[\"false\",{\"1\":{\"20\":4,\"118\":2}}],[\"fc对文件的判断要求可能比oj要求更高\",{\"1\":{\"52\":1}}],[\"fc\",{\"1\":{\"52\":2}}],[\"from\",{\"1\":{\"198\":6}}],[\"free\",{\"1\":{\"27\":1,\"31\":1,\"34\":2,\"43\":7,\"158\":7,\"165\":2}}],[\"friday\",{\"1\":{\"5\":1}}],[\"filter\",{\"1\":{\"195\":1}}],[\"files\",{\"1\":{\"58\":1,\"86\":1,\"87\":1}}],[\"file\",{\"1\":{\"52\":1}}],[\"fixed\",{\"1\":{\"195\":2}}],[\"fib\",{\"1\":{\"23\":4}}],[\"first\",{\"1\":{\"20\":1}}],[\"functiondotoj\",{\"1\":{\"151\":1}}],[\"function\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"203\":8}}],[\"f\",{\"1\":{\"5\":1,\"23\":19,\"91\":1,\"120\":3,\"121\":4,\"148\":12,\"150\":12,\"195\":1}}],[\"flex\",{\"1\":{\"175\":27,\"177\":3,\"195\":8}}],[\"flag\",{\"1\":{\"5\":1,\"118\":1}}],[\"float\",{\"0\":{\"112\":1},\"1\":{\"5\":6,\"37\":1,\"99\":1,\"101\":1,\"102\":1,\"103\":1,\"112\":1,\"120\":1,\"121\":1,\"164\":1}}],[\"溢出是未定义行为\",{\"1\":{\"5\":1}}],[\"当前实例的拦截器\",{\"1\":{\"202\":2}}],[\"当一个指针指向的内存被释放后\",{\"1\":{\"166\":1}}],[\"当一个\",{\"1\":{\"133\":1}}],[\"当一个函数有了返回值\",{\"1\":{\"17\":1}}],[\"当这个整数不为零\",{\"1\":{\"133\":1}}],[\"当这个函数结束\",{\"1\":{\"43\":1,\"158\":1}}],[\"当符号位为\",{\"1\":{\"106\":3}}],[\"当游戏画面渲染的时候\",{\"1\":{\"79\":1}}],[\"当某\",{\"1\":{\"52\":1}}],[\"当输入数据一切正常的时候\",{\"1\":{\"46\":1}}],[\"当输入不确定数量的数据时\",{\"1\":{\"11\":1}}],[\"当中已经讲的差不多了\",{\"1\":{\"37\":1}}],[\"当中有它\",{\"1\":{\"34\":1}}],[\"当起始柱子上只有一个盘子的时候\",{\"1\":{\"23\":1,\"148\":1}}],[\"当返回的时候\",{\"1\":{\"20\":1}}],[\"当返回前一位的时候\",{\"1\":{\"20\":1}}],[\"当所有的位置都填好了\",{\"1\":{\"20\":1}}],[\"当填好这一位\",{\"1\":{\"20\":1}}],[\"当同学们使用\",{\"1\":{\"8\":1}}],[\"当\",{\"1\":{\"8\":1}}],[\"当你运行这段内容时\",{\"1\":{\"202\":1}}],[\"当你使用类似\",{\"1\":{\"202\":1}}],[\"当你使用完了之后\",{\"1\":{\"43\":1,\"158\":1}}],[\"当你到手这个需求的时候\",{\"1\":{\"133\":1}}],[\"当你取\",{\"1\":{\"106\":1}}],[\"当你结束游戏\",{\"1\":{\"79\":1}}],[\"当你选择开始游玩\",{\"1\":{\"79\":1}}],[\"当你启动游戏的时候\",{\"1\":{\"79\":1}}],[\"当你每次将某一个序列分割的时候\",{\"1\":{\"55\":1}}],[\"当你想好你将会怎么来做这道题之后\",{\"1\":{\"55\":1}}],[\"当你想根据输入的值来确定你的数组大小时\",{\"1\":{\"43\":1,\"158\":1}}],[\"当你将系统时间设置为随机数种子的时候\",{\"1\":{\"52\":1}}],[\"当你将函数定义在这些变量后面的时候\",{\"1\":{\"17\":1}}],[\"当你在点\",{\"1\":{\"20\":1}}],[\"当你在很多地方都要做同一种操作\",{\"1\":{\"17\":1}}],[\"当你的函数已经得出结论\",{\"1\":{\"17\":1}}],[\"当你\",{\"1\":{\"5\":1}}],[\"当你超过一个整形变量能够表示的范围时\",{\"1\":{\"5\":1}}],[\"当你拿不到完全分的时候\",{\"1\":{\"5\":1}}],[\"当然如果你在\",{\"1\":{\"174\":1}}],[\"当然还要算上其它的一些变量函数啥的也会占内存\",{\"1\":{\"55\":1}}],[\"当然还有第一题我们需要提到的指针问题\",{\"1\":{\"37\":1}}],[\"当然printf也有点点慢\",{\"1\":{\"46\":1}}],[\"当然都需要是\",{\"1\":{\"37\":1}}],[\"当然这只是解决那道题其中的一种方法\",{\"1\":{\"23\":1}}],[\"当然可以啊\",{\"1\":{\"17\":1}}],[\"当然\",{\"1\":{\"5\":2,\"37\":1,\"55\":1,\"91\":1,\"94\":1,\"119\":1,\"182\":1,\"202\":1}}],[\"当我们得到的结果超过\",{\"1\":{\"108\":1}}],[\"当我们定义整型类型时\",{\"1\":{\"105\":1}}],[\"当我们运行一个\",{\"1\":{\"91\":1}}],[\"当我们使用\",{\"1\":{\"91\":1}}],[\"当我们的做法受到限制的时候\",{\"1\":{\"55\":1}}],[\"当我们想要获取某个变量的地址\",{\"1\":{\"43\":1,\"156\":1}}],[\"当我们想要合并两个序列的时候\",{\"1\":{\"23\":1}}],[\"当我们用不同变量类型的指针指向同一个\",{\"1\":{\"37\":1}}],[\"当我们搞好这个\",{\"1\":{\"37\":1}}],[\"当我们需要交换两个相邻的数时\",{\"1\":{\"23\":1}}],[\"当我们到达终点或者没有路走了\",{\"1\":{\"20\":1}}],[\"当我们思考一道题如何去做的时候\",{\"1\":{\"5\":1}}],[\"当我们在定义过\",{\"1\":{\"43\":1,\"158\":1}}],[\"当我们在做题的时候\",{\"1\":{\"5\":1}}],[\"当我们在\",{\"1\":{\"2\":1}}],[\"meta\",{\"1\":{\"198\":9}}],[\"meow~\",{\"1\":{\"165\":1}}],[\"mount\",{\"1\":{\"198\":2}}],[\"module\",{\"1\":{\"198\":1}}],[\"month\",{\"1\":{\"5\":6}}],[\"monday\",{\"1\":{\"5\":2}}],[\"mp4\",{\"1\":{\"187\":1}}],[\"mp3\",{\"1\":{\"187\":1}}],[\"myclass\",{\"1\":{\"174\":3}}],[\"my\",{\"1\":{\"174\":4}}],[\"music打开方式的特殊性\",{\"1\":{\"67\":1}}],[\"multimedia\",{\"1\":{\"61\":1}}],[\"msvc\",{\"1\":{\"58\":1}}],[\"mirror\",{\"1\":{\"58\":1}}],[\"mingw\",{\"1\":{\"86\":2}}],[\"min\",{\"1\":{\"27\":3,\"195\":1}}],[\"m+2ll\",{\"1\":{\"5\":1}}],[\"m\",{\"1\":{\"5\":3,\"20\":10,\"149\":11}}],[\"mb\",{\"1\":{\"5\":1,\"55\":5}}],[\"margin\",{\"0\":{\"177\":1},\"1\":{\"177\":8,\"195\":5}}],[\"martinstorsjo\",{\"1\":{\"86\":1}}],[\"maze\",{\"1\":{\"149\":1}}],[\"mac\",{\"1\":{\"87\":1}}],[\"macos\",{\"0\":{\"87\":1},\"1\":{\"61\":1,\"85\":1,\"87\":1}}],[\"material\",{\"1\":{\"85\":1}}],[\"math\",{\"1\":{\"5\":3}}],[\"malloc\",{\"1\":{\"27\":1,\"31\":2,\"34\":1,\"37\":1,\"43\":7,\"158\":7,\"165\":2}}],[\"max\",{\"1\":{\"27\":3}}],[\"main>\",{\"1\":{\"189\":1,\"195\":1}}],[\"main\",{\"1\":{\"2\":2,\"5\":2,\"17\":4,\"23\":1,\"31\":1,\"34\":1,\"52\":1,\"91\":5,\"92\":1,\"93\":8,\"100\":2,\"133\":1,\"134\":1,\"135\":2,\"136\":1,\"137\":1,\"138\":2,\"139\":2,\"141\":1,\"146\":1,\"147\":1,\"149\":1,\"150\":1,\"159\":1,\"165\":1,\"195\":2,\"198\":8}}],[\"个人信息\",{\"1\":{\"198\":1}}],[\"个整数\",{\"1\":{\"149\":1}}],[\"个二进制位\",{\"1\":{\"118\":1}}],[\"个二进制位来表示的整数\",{\"1\":{\"5\":1}}],[\"个值\",{\"1\":{\"116\":1}}],[\"个\",{\"1\":{\"55\":1}}],[\"个字节是\",{\"1\":{\"55\":1}}],[\"个字节\",{\"1\":{\"5\":1,\"55\":3,\"105\":1,\"109\":1,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"116\":1,\"118\":1}}],[\"个位成一个字节\",{\"1\":{\"5\":1}}],[\"8rem\",{\"1\":{\"195\":1}}],[\"8px\",{\"1\":{\"176\":1,\"177\":3,\"195\":8}}],[\"80px\",{\"1\":{\"175\":4,\"177\":1,\"195\":1}}],[\"80\",{\"1\":{\"46\":1,\"114\":1,\"195\":1}}],[\"8\",{\"0\":{\"31\":1,\"34\":1,\"37\":1},\"1\":{\"5\":3,\"20\":3,\"31\":1,\"34\":1,\"37\":1,\"110\":1,\"113\":1,\"116\":1,\"118\":1,\"149\":1,\"176\":1,\"177\":3,\"195\":2,\"198\":1}}],[\"希望各位同学自己去写一写\",{\"1\":{\"23\":1}}],[\"希望各位佬们能够帮助某\",{\"1\":{\"2\":1}}],[\"希望同学们能够掌握这种用空间换时间的优化方法\",{\"1\":{\"23\":1}}],[\"希望同学们在题单的习题中能够练习掌握这些基本结构\",{\"1\":{\"8\":1}}],[\"希望通过函数将它限制在\",{\"1\":{\"17\":1}}],[\"希望大家无论语句多少都加上大括号\",{\"1\":{\"8\":1}}],[\"希望给出更多的一些小技巧\",{\"1\":{\"5\":1}}],[\"其余位取反\",{\"1\":{\"106\":1}}],[\"其他的位置已经由主角决定好\",{\"1\":{\"73\":1}}],[\"其次也并不知道你错在哪里\",{\"1\":{\"52\":1}}],[\"其次\",{\"1\":{\"20\":1}}],[\"其实十分的简单\",{\"1\":{\"55\":1}}],[\"其实上面那道图上寻路就可以进行剪枝优化\",{\"1\":{\"20\":1}}],[\"其实这章题目还是挺水的\",{\"1\":{\"17\":1}}],[\"其实在大部分情况下\",{\"1\":{\"5\":1}}],[\"其它动画效果可以自行查阅如何编写\",{\"1\":{\"178\":1}}],[\"其它类型\",{\"1\":{\"103\":1}}],[\"其它情况下\",{\"1\":{\"46\":1}}],[\"其它的一些用法会在之后提到\",{\"1\":{\"120\":1}}],[\"其它的命名规则会在说到对应的语法时提到\",{\"1\":{\"102\":1}}],[\"其它的搜索也许在形式上略有不同\",{\"1\":{\"20\":1}}],[\"其它的也不太容易错\",{\"1\":{\"8\":1}}],[\"其它的逻辑判断符号除了相等\",{\"1\":{\"8\":1}}],[\"其它内容个人根据需求自己看\",{\"1\":{\"5\":1}}],[\"其中塞的就是这个文件\",{\"1\":{\"198\":1}}],[\"其中分为\",{\"1\":{\"198\":1}}],[\"其中的按钮就是使用\",{\"1\":{\"177\":1}}],[\"其中用取模来限制\",{\"1\":{\"52\":1}}],[\"其中未定义的数组元素会被赋值成\",{\"1\":{\"34\":1}}],[\"其中包含内部所有字段的空间\",{\"1\":{\"27\":1}}],[\"其中\",{\"1\":{\"2\":1,\"58\":1,\"93\":1,\"94\":2,\"120\":2,\"121\":4,\"133\":1,\"146\":1,\"147\":1,\"149\":1,\"159\":1,\"198\":2}}],[\"很简单吧\",{\"1\":{\"149\":1}}],[\"很多同学遇到了自己检查不出来却实际上超出了变量可存储范围的运算\",{\"1\":{\"11\":1}}],[\"很多同学反映\",{\"1\":{\"2\":1}}],[\"很好用\",{\"1\":{\"5\":1}}],[\"大致了解这些内容之后\",{\"1\":{\"177\":1}}],[\"大于等于\",{\"1\":{\"134\":2}}],[\"大于\",{\"1\":{\"134\":2}}],[\"大多围绕\",{\"1\":{\"109\":1}}],[\"大大地提高了各位的做题体验\",{\"1\":{\"46\":1}}],[\"大小可以由你自己指定\",{\"1\":{\"43\":1,\"158\":1}}],[\"大问题好像也就这么简简单单的解决了\",{\"1\":{\"23\":1,\"148\":1}}],[\"大部分c语言老师实际上已经讲过递归了\",{\"1\":{\"23\":1}}],[\"大家都很熟\",{\"1\":{\"52\":1}}],[\"大家可以去算一算到底调用了多少次\",{\"1\":{\"23\":1}}],[\"大家可能在做\",{\"1\":{\"46\":1}}],[\"大家可能会问\",{\"1\":{\"5\":1}}],[\"大家可能知道\",{\"1\":{\"5\":1}}],[\"大家一定要多加练习\",{\"1\":{\"17\":1}}],[\"大家应该都会\",{\"1\":{\"17\":1}}],[\"大家好啊\",{\"1\":{\"17\":1}}],[\"大家需要用到的还是整型变量\",{\"1\":{\"5\":1}}],[\"大得多\",{\"1\":{\"5\":1}}],[\"大体格式如下\",{\"1\":{\"2\":1}}],[\"比起冒泡排序和选择排序的\",{\"1\":{\"23\":1}}],[\"比较麻烦\",{\"1\":{\"14\":1}}],[\"比如需要掌握的\",{\"1\":{\"201\":1}}],[\"比如选择器\",{\"1\":{\"198\":1}}],[\"比如标签\",{\"1\":{\"198\":1}}],[\"比如数据\",{\"1\":{\"198\":1}}],[\"比如端口\",{\"1\":{\"198\":1}}],[\"比如游戏暂停的时候\",{\"1\":{\"79\":1}}],[\"比如某游戏中主角有一个闪电球始终环绕着旋转\",{\"1\":{\"73\":1}}],[\"比如交换两个数\",{\"1\":{\"43\":1,\"158\":1}}],[\"比如动态内存分配\",{\"1\":{\"43\":1,\"155\":1}}],[\"比如我们想要排序下标从1到n的一个数组\",{\"1\":{\"23\":1}}],[\"比如说你开了一些数组\",{\"1\":{\"55\":1}}],[\"比如说你需要在创建时初始化一些字段值\",{\"1\":{\"27\":1}}],[\"比如说\",{\"1\":{\"43\":1,\"55\":1,\"134\":1,\"158\":1}}],[\"比如说我们想要输出这个字符数组\",{\"1\":{\"37\":1}}],[\"比如说某些非逼你需要动态维护数组大小的\",{\"1\":{\"31\":1}}],[\"比如说两层的时候\",{\"1\":{\"23\":1,\"148\":1}}],[\"比如说要想知道\",{\"1\":{\"23\":1}}],[\"比如说大家可能已经尝试通过在主函数里直接\",{\"1\":{\"17\":1}}],[\"比如说上面那个长式子\",{\"1\":{\"5\":1}}],[\"比如将除法提前\",{\"1\":{\"11\":1}}],[\"比如开根\",{\"1\":{\"5\":1}}],[\"比如\",{\"1\":{\"5\":5,\"8\":2,\"27\":1,\"28\":1,\"55\":1,\"177\":1,\"178\":1,\"183\":1}}],[\"比如一周的星期几\",{\"1\":{\"5\":1}}],[\"比如一个\",{\"1\":{\"5\":1}}],[\"比如你可以使用\",{\"1\":{\"5\":1}}],[\"比\",{\"1\":{\"5\":1,\"46\":2}}],[\"user\",{\"1\":{\"198\":3,\"202\":4}}],[\"use\",{\"1\":{\"198\":2,\"202\":2}}],[\"utf\",{\"1\":{\"198\":1}}],[\"utils\",{\"1\":{\"27\":16}}],[\"ul>\",{\"1\":{\"189\":1}}],[\"upper\",{\"1\":{\"102\":1}}],[\"update\",{\"1\":{\"79\":1,\"137\":3}}],[\"upd\",{\"1\":{\"20\":1,\"23\":1}}],[\"ucrt\",{\"1\":{\"86\":1}}],[\"ubuntu为例\",{\"1\":{\"61\":1}}],[\"ui命令\",{\"1\":{\"58\":1}}],[\"undefined\",{\"1\":{\"203\":1}}],[\"unix\",{\"1\":{\"85\":1}}],[\"union\",{\"0\":{\"28\":1},\"1\":{\"28\":4}}],[\"unsigned\",{\"1\":{\"5\":4,\"37\":4,\"103\":1,\"105\":2,\"116\":1}}],[\"u\",{\"1\":{\"5\":1}}],[\"来将其设置为弹性盒子包装\",{\"1\":{\"175\":1}}],[\"来降低时间复杂度\",{\"1\":{\"149\":1}}],[\"来写一个简单的循环\",{\"1\":{\"141\":1}}],[\"来给变量赋值\",{\"1\":{\"99\":1}}],[\"来从镜像源安装和替换\",{\"1\":{\"87\":1}}],[\"来安装\",{\"1\":{\"87\":1}}],[\"来创建并编译一个新的sdl2项目吧\",{\"1\":{\"58\":1}}],[\"来优化整数的读入过程\",{\"1\":{\"46\":1}}],[\"来指定输入的格式\",{\"1\":{\"46\":1}}],[\"来向编译器申请一段内存空间\",{\"1\":{\"43\":1,\"158\":1}}],[\"来新建一个指向\",{\"1\":{\"43\":1,\"157\":1}}],[\"来调用s数组的第i位了\",{\"1\":{\"37\":1}}],[\"来调用数组的某一位\",{\"1\":{\"37\":1}}],[\"来存放一些工具函数\",{\"1\":{\"27\":1}}],[\"来看一下展示具体做法的代码\",{\"1\":{\"20\":1}}],[\"来看下面一个例子\",{\"1\":{\"17\":1}}],[\"来告诉你们一个使用实例\",{\"1\":{\"17\":1}}],[\"来直接跳出循环\",{\"1\":{\"137\":1}}],[\"来直接进入下一次循环过程\",{\"1\":{\"137\":1}}],[\"来直接退出\",{\"1\":{\"17\":1}}],[\"来直接表示字符0代表的值\",{\"1\":{\"5\":1}}],[\"来提前结束主函数\",{\"1\":{\"17\":1}}],[\"来解释一下函数的结构\",{\"1\":{\"17\":1}}],[\"来简单提一下这两种循环\",{\"1\":{\"11\":1}}],[\"来获取\",{\"1\":{\"8\":1}}],[\"来连接多个判断\",{\"1\":{\"8\":1}}],[\"来作为判断条件\",{\"1\":{\"8\":1}}],[\"来对某个值进行分类\",{\"1\":{\"8\":1}}],[\"来表示一个反斜杠\",{\"1\":{\"121\":1}}],[\"来表示换行\",{\"1\":{\"46\":2}}],[\"来表示\",{\"1\":{\"5\":1}}],[\"来表示星期二\",{\"1\":{\"5\":1}}],[\"来表示星期一\",{\"1\":{\"5\":1}}],[\"来充分利用这\",{\"1\":{\"5\":1}}],[\"来帮助大家完成课程的开发任务\",{\"1\":{\"192\":1}}],[\"来帮助大家理解当周的课程\",{\"1\":{\"2\":1}}],[\"来帮助我们打包项目\",{\"1\":{\"58\":1}}],[\"来帮助我们绕过这个\",{\"1\":{\"46\":1}}],[\"来帮你\",{\"1\":{\"2\":1}}],[\"之前\",{\"1\":{\"148\":1,\"198\":1}}],[\"之类的呢\",{\"1\":{\"61\":1}}],[\"之所以负数能到\",{\"1\":{\"5\":1}}],[\"之后使用了\",{\"1\":{\"198\":1}}],[\"之后加上了\",{\"1\":{\"198\":1}}],[\"之后得到的结果还是\",{\"1\":{\"108\":1}}],[\"之后得到的结果\",{\"1\":{\"108\":1}}],[\"之后名称每个单词首字母大写\",{\"1\":{\"102\":1}}],[\"之后的\",{\"1\":{\"133\":1}}],[\"之后的就不详细讲解了\",{\"1\":{\"105\":1}}],[\"之后的整型类型只在存储空间上有区别\",{\"1\":{\"105\":1}}],[\"之后的问题是否对前面的问题有影响\",{\"1\":{\"20\":1}}],[\"之后的语句并不能执行\",{\"1\":{\"8\":1}}],[\"之后我们就可以通过在方括号里填数组下标的形式来访问某一个特定的元素\",{\"1\":{\"8\":1}}],[\"之后大括号里面的内容\",{\"1\":{\"8\":1}}],[\"之后\",{\"1\":{\"2\":1}}],[\"之后跟上\",{\"1\":{\"2\":1}}],[\"~~\",{\"1\":{\"198\":1}}],[\"~\",{\"1\":{\"5\":1,\"116\":1,\"126\":1,\"150\":1}}],[\"位运算的速度比算术运算快很多\",{\"1\":{\"126\":1}}],[\"位运算的速度比正常运算要快\",{\"1\":{\"8\":1}}],[\"位运算符的优先级较低\",{\"1\":{\"126\":1}}],[\"位运算符用于对整数进行位操作\",{\"1\":{\"126\":1}}],[\"位运算符\",{\"0\":{\"126\":1}}],[\"位时\",{\"1\":{\"108\":1}}],[\"位二进制数能够表示的最大值是\",{\"1\":{\"105\":1}}],[\"位来表示数值\",{\"1\":{\"105\":2}}],[\"位置\",{\"1\":{\"86\":1}}],[\"位内存\",{\"1\":{\"37\":1}}],[\"位存储的变量\",{\"1\":{\"37\":1}}],[\"位呢\",{\"1\":{\"37\":1}}],[\"位元素\",{\"1\":{\"34\":2}}],[\"位插入一个元素\",{\"1\":{\"34\":1}}],[\"位移运算\",{\"1\":{\"8\":1}}],[\"位的临时寄存器来记录进位\",{\"1\":{\"107\":1}}],[\"位的空间\",{\"1\":{\"105\":1}}],[\"位的\",{\"1\":{\"5\":1}}],[\"位\",{\"1\":{\"5\":3,\"8\":1,\"37\":1,\"105\":1,\"108\":1,\"109\":1,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"116\":1,\"118\":1}}],[\"位带符号整数\",{\"1\":{\"5\":1}}],[\"3<\",{\"1\":{\"189\":1}}],[\"3s\",{\"1\":{\"178\":3,\"195\":2}}],[\"3d\",{\"1\":{\"82\":1}}],[\"3时\",{\"1\":{\"23\":1}}],[\"3\",{\"0\":{\"11\":1,\"67\":1,\"131\":1,\"173\":1},\"1\":{\"11\":1,\"23\":1,\"27\":1,\"28\":1,\"46\":2,\"99\":1,\"100\":1,\"101\":1,\"108\":6,\"121\":1,\"125\":1,\"140\":2,\"142\":1,\"149\":2,\"150\":2,\"164\":1}}],[\"365ll\",{\"1\":{\"5\":2}}],[\"3ll\",{\"1\":{\"5\":1}}],[\"31\",{\"1\":{\"5\":1}}],[\"32768\",{\"1\":{\"105\":1,\"106\":2}}],[\"32767\",{\"1\":{\"105\":1,\"106\":1}}],[\"32045\",{\"1\":{\"5\":3}}],[\"32\",{\"1\":{\"5\":3,\"37\":4,\"109\":1,\"112\":1}}],[\"lang=\",{\"1\":{\"198\":2}}],[\"language\",{\"0\":{\"91\":1},\"2\":{\"89\":1,\"97\":1,\"130\":1,\"144\":1,\"153\":1,\"162\":1,\"169\":1,\"172\":1}}],[\"label>\",{\"1\":{\"195\":2}}],[\"label\",{\"1\":{\"141\":2,\"195\":3}}],[\"let\",{\"1\":{\"202\":3}}],[\"letter\",{\"1\":{\"99\":1,\"116\":1}}],[\"left\",{\"1\":{\"177\":1,\"195\":4}}],[\"len\",{\"1\":{\"37\":2}}],[\"lua\",{\"1\":{\"58\":5}}],[\"luogu\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1}}],[\"li>\",{\"1\":{\"189\":3}}],[\"libsfml\",{\"1\":{\"61\":1}}],[\"library\",{\"1\":{\"61\":1}}],[\"linux\",{\"1\":{\"46\":2,\"52\":2,\"61\":1,\"85\":1}}],[\"list\",{\"1\":{\"31\":14}}],[\"l\",{\"1\":{\"17\":5,\"52\":4}}],[\"lock\",{\"1\":{\"198\":2}}],[\"location\",{\"1\":{\"86\":1}}],[\"load函数的实现\",{\"1\":{\"67\":1}}],[\"loops\",{\"1\":{\"14\":1}}],[\"loop\",{\"0\":{\"14\":1},\"1\":{\"52\":6,\"141\":2,\"142\":1}}],[\"login\",{\"1\":{\"195\":6,\"198\":5}}],[\"logo\",{\"1\":{\"177\":2,\"195\":2}}],[\"log2​n\",{\"1\":{\"55\":1}}],[\"log2\",{\"1\":{\"23\":2}}],[\"log\",{\"1\":{\"5\":1,\"202\":6}}],[\"long\",{\"0\":{\"110\":2,\"114\":1},\"1\":{\"5\":34,\"23\":4,\"52\":2,\"55\":2,\"103\":3,\"110\":2,\"114\":2}}],[\"lf\",{\"0\":{\"46\":1},\"1\":{\"5\":1,\"46\":5}}],[\"llvm\",{\"1\":{\"86\":1}}],[\"llu\",{\"1\":{\"5\":1}}],[\"lld\",{\"1\":{\"5\":5,\"23\":1}}],[\"ico\",{\"1\":{\"198\":2}}],[\"icon72x72\",{\"1\":{\"177\":1}}],[\"icon\",{\"1\":{\"85\":1,\"195\":1,\"198\":1}}],[\"item\",{\"1\":{\"195\":3}}],[\"items\",{\"1\":{\"175\":7,\"177\":1,\"195\":5}}],[\"import\",{\"1\":{\"198\":12}}],[\"img\",{\"1\":{\"195\":2}}],[\"image\",{\"1\":{\"187\":2,\"195\":1}}],[\"images\",{\"1\":{\"177\":1}}],[\"ii\",{\"1\":{\"192\":1,\"198\":1}}],[\"i++\",{\"1\":{\"137\":1,\"138\":2,\"139\":2,\"140\":1,\"141\":1,\"149\":3,\"150\":1}}],[\"ieee\",{\"1\":{\"114\":1}}],[\"iage\",{\"1\":{\"102\":1}}],[\"id=\",{\"1\":{\"185\":3,\"198\":4}}],[\"id\",{\"0\":{\"185\":1},\"1\":{\"86\":1,\"174\":3,\"183\":1,\"185\":2}}],[\"is\",{\"1\":{\"184\":1,\"185\":1,\"186\":1}}],[\"islowerstatevisible\",{\"1\":{\"79\":1}}],[\"isdigit\",{\"1\":{\"46\":4}}],[\"i\",{\"1\":{\"8\":6,\"20\":13,\"23\":3,\"34\":17,\"37\":5,\"55\":1,\"137\":3,\"138\":6,\"139\":6,\"140\":3,\"141\":3,\"149\":11,\"150\":5}}],[\"if\",{\"0\":{\"8\":1,\"133\":1},\"1\":{\"5\":1,\"8\":20,\"14\":1,\"17\":2,\"20\":13,\"23\":3,\"31\":3,\"34\":6,\"43\":2,\"46\":1,\"52\":2,\"133\":14,\"134\":1,\"139\":1,\"141\":1,\"142\":1,\"148\":3,\"149\":7,\"158\":2,\"198\":6,\"202\":2}}],[\"io就这些\",{\"1\":{\"5\":1}}],[\"io\",{\"0\":{\"5\":1},\"1\":{\"5\":3,\"128\":1}}],[\"initial\",{\"1\":{\"198\":1}}],[\"initialization\",{\"1\":{\"137\":3}}],[\"initialize\",{\"1\":{\"34\":2}}],[\"index\",{\"1\":{\"198\":6}}],[\"inline\",{\"1\":{\"186\":1}}],[\"info\",{\"1\":{\"164\":2}}],[\"input\",{\"1\":{\"86\":1,\"87\":1,\"195\":10}}],[\"instance\",{\"1\":{\"202\":3}}],[\"install\",{\"1\":{\"61\":1,\"86\":3,\"87\":1}}],[\"insert\",{\"1\":{\"34\":2}}],[\"in\",{\"1\":{\"2\":1,\"52\":4,\"178\":3,\"195\":1}}],[\"interceptors\",{\"1\":{\"202\":2}}],[\"integer\",{\"1\":{\"5\":2}}],[\"int\",{\"0\":{\"109\":1},\"1\":{\"2\":8,\"5\":20,\"8\":4,\"14\":1,\"17\":10,\"20\":19,\"23\":6,\"27\":20,\"28\":1,\"31\":3,\"34\":28,\"37\":10,\"43\":19,\"46\":3,\"52\":7,\"55\":5,\"91\":2,\"92\":1,\"93\":1,\"99\":2,\"100\":4,\"101\":3,\"102\":1,\"103\":1,\"109\":5,\"116\":1,\"120\":2,\"121\":1,\"122\":1,\"123\":2,\"125\":3,\"133\":2,\"134\":2,\"135\":5,\"136\":2,\"137\":2,\"138\":4,\"139\":4,\"140\":2,\"141\":2,\"147\":12,\"148\":3,\"149\":15,\"150\":4,\"157\":2,\"158\":17,\"159\":15,\"164\":2,\"165\":5}}],[\"introdotoj\",{\"1\":{\"128\":1}}],[\"intro\",{\"0\":{\"2\":1},\"1\":{\"2\":2}}],[\"includes\",{\"1\":{\"198\":1}}],[\"includepath\",{\"1\":{\"58\":1}}],[\"include<stdlib\",{\"1\":{\"52\":1}}],[\"include<stdio\",{\"1\":{\"52\":1}}],[\"include\",{\"1\":{\"2\":3,\"5\":1,\"31\":2,\"34\":3,\"58\":3,\"91\":6,\"92\":1,\"93\":1,\"133\":1}}],[\"||\",{\"1\":{\"8\":2,\"20\":6,\"23\":1,\"134\":2,\"148\":2,\"149\":8}}],[\"|\",{\"1\":{\"2\":1,\"5\":1,\"8\":6,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1,\"126\":1,\"198\":2}}],[\"洛谷\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1}}],[\"快来试试吧\",{\"1\":{\"2\":1}}],[\"++a\",{\"1\":{\"125\":1}}],[\"++\",{\"1\":{\"125\":2}}],[\"++j\",{\"1\":{\"55\":1}}],[\"++vec\",{\"1\":{\"34\":2}}],[\"++l\",{\"1\":{\"17\":1}}],[\"++i\",{\"1\":{\"8\":2,\"20\":3,\"34\":2,\"37\":1}}],[\"+=\",{\"1\":{\"17\":1,\"27\":1,\"127\":1}}],[\"+365ll\",{\"1\":{\"5\":1}}],[\"+1\",{\"1\":{\"5\":1}}],[\"+\",{\"1\":{\"2\":1,\"5\":12,\"11\":1,\"17\":1,\"20\":9,\"23\":5,\"34\":10,\"37\":1,\"43\":1,\"46\":3,\"52\":2,\"55\":2,\"58\":2,\"91\":1,\"101\":1,\"106\":1,\"108\":1,\"125\":1,\"127\":1,\"147\":2,\"148\":2,\"149\":7,\"150\":1,\"158\":1,\"159\":1,\"165\":1,\"203\":2}}],[\"2rem\",{\"1\":{\"195\":2}}],[\"2vw\",{\"1\":{\"195\":1}}],[\"2<\",{\"1\":{\"189\":1}}],[\"28px\",{\"1\":{\"177\":1,\"195\":1}}],[\"2x\",{\"1\":{\"177\":1}}],[\"2px\",{\"1\":{\"176\":1,\"177\":3,\"195\":10}}],[\"24px\",{\"1\":{\"175\":40}}],[\"231−1\",{\"1\":{\"109\":1}}],[\"216\",{\"1\":{\"108\":1}}],[\"2147483647\",{\"1\":{\"5\":2,\"20\":2,\"109\":1,\"149\":2}}],[\"2147483648\",{\"1\":{\"5\":4,\"109\":1}}],[\"2d\",{\"1\":{\"82\":1}}],[\"20px\",{\"1\":{\"175\":3,\"177\":5}}],[\"200px\",{\"1\":{\"176\":2,\"177\":4}}],[\"200x200\",{\"1\":{\"176\":1}}],[\"200\",{\"1\":{\"55\":1,\"202\":1}}],[\"2023\",{\"1\":{\"20\":1}}],[\"2022\",{\"0\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"26\":1,\"31\":1,\"34\":1,\"37\":1},\"1\":{\"128\":2,\"142\":3,\"151\":3,\"167\":1}}],[\"256\",{\"1\":{\"55\":3}}],[\"255\",{\"1\":{\"5\":2,\"116\":1,\"177\":6,\"195\":9}}],[\"2ll\",{\"1\":{\"5\":2}}],[\"2\",{\"0\":{\"8\":1,\"64\":1,\"98\":1,\"181\":1},\"1\":{\"2\":1,\"8\":3,\"11\":1,\"20\":2,\"23\":12,\"34\":1,\"43\":4,\"46\":1,\"105\":1,\"108\":7,\"125\":3,\"140\":3,\"142\":1,\"147\":2,\"148\":6,\"149\":1,\"150\":3,\"158\":4,\"159\":1,\"165\":1}}],[\"blur\",{\"1\":{\"195\":1}}],[\"bg\",{\"1\":{\"195\":2}}],[\"button>\",{\"1\":{\"177\":1,\"195\":1}}],[\"btn\",{\"1\":{\"177\":2,\"195\":4}}],[\"body\",{\"1\":{\"198\":1}}],[\"body>\",{\"1\":{\"198\":1}}],[\"bottom\",{\"1\":{\"177\":2,\"195\":2}}],[\"box\",{\"1\":{\"176\":1,\"177\":3,\"178\":2,\"195\":6}}],[\"border\",{\"1\":{\"176\":2,\"177\":7,\"178\":2,\"195\":7}}],[\"bool\",{\"0\":{\"118\":1},\"1\":{\"5\":6,\"20\":3,\"79\":1,\"103\":1,\"118\":4}}],[\"beforeeach\",{\"1\":{\"198\":2}}],[\"best\",{\"1\":{\"149\":10}}],[\"begin\",{\"1\":{\"34\":21}}],[\"brew\",{\"1\":{\"87\":1}}],[\"break\",{\"1\":{\"8\":1,\"11\":1,\"14\":1,\"136\":6,\"137\":1,\"139\":1}}],[\"bin\",{\"1\":{\"86\":1}}],[\"baseurl\",{\"1\":{\"202\":1}}],[\"base\",{\"1\":{\"198\":2}}],[\"bat\",{\"1\":{\"52\":1}}],[\"backdrop\",{\"1\":{\"195\":1}}],[\"background\",{\"1\":{\"175\":24,\"176\":1,\"177\":4,\"178\":3,\"195\":7}}],[\"back\",{\"1\":{\"34\":5}}],[\"byte\",{\"1\":{\"5\":3,\"43\":1,\"158\":1}}],[\"b\",{\"1\":{\"2\":2,\"5\":3,\"11\":2,\"23\":5,\"27\":9,\"43\":6,\"52\":2,\"55\":2,\"91\":1,\"99\":1,\"120\":5,\"121\":3,\"125\":2,\"147\":5,\"148\":4,\"158\":6,\"159\":2,\"164\":1,\"203\":4}}],[\"131313\",{\"1\":{\"195\":1}}],[\"1rem\",{\"1\":{\"195\":2}}],[\"1<\",{\"1\":{\"189\":1}}],[\"1px\",{\"1\":{\"176\":1,\"177\":2,\"178\":1,\"195\":5}}],[\"127\",{\"1\":{\"116\":1}}],[\"128\",{\"1\":{\"114\":1,\"116\":2}}],[\"12ll\",{\"1\":{\"5\":2}}],[\"15\",{\"1\":{\"105\":2}}],[\"153ll\",{\"1\":{\"5\":3}}],[\"16rem\",{\"1\":{\"195\":1}}],[\"16px\",{\"1\":{\"195\":1}}],[\"16\",{\"1\":{\"105\":3,\"108\":2,\"114\":1,\"195\":1}}],[\"1972\",{\"1\":{\"85\":1}}],[\"1e10\",{\"1\":{\"55\":1}}],[\"1亿\",{\"1\":{\"55\":5}}],[\"14f\",{\"1\":{\"164\":1}}],[\"14159\",{\"1\":{\"99\":1,\"100\":1,\"101\":1}}],[\"14\",{\"1\":{\"27\":1,\"28\":1,\"121\":1}}],[\"14ll\",{\"1\":{\"5\":1}}],[\"111\",{\"1\":{\"177\":1,\"195\":1}}],[\"114514\",{\"1\":{\"31\":1}}],[\"11\",{\"1\":{\"20\":1}}],[\"10px\",{\"1\":{\"177\":2,\"195\":3}}],[\"10^8\",{\"1\":{\"149\":1}}],[\"10\",{\"1\":{\"8\":1,\"17\":1,\"46\":1,\"86\":1,\"99\":1,\"100\":1,\"114\":1,\"121\":1,\"140\":4,\"141\":1}}],[\"100vw\",{\"1\":{\"195\":3}}],[\"1005\",{\"1\":{\"150\":1}}],[\"100∗1024∗1024\",{\"1\":{\"55\":1}}],[\"1000\",{\"1\":{\"202\":1,\"203\":2}}],[\"10005\",{\"1\":{\"17\":1,\"23\":1}}],[\"10000\",{\"1\":{\"52\":3}}],[\"100000\",{\"1\":{\"8\":1,\"37\":2}}],[\"100005\",{\"1\":{\"8\":1}}],[\"100\",{\"1\":{\"8\":2,\"55\":1,\"134\":2,\"137\":3,\"138\":3,\"139\":3,\"149\":1}}],[\"100ll+y\",{\"1\":{\"5\":1}}],[\"100ll\",{\"1\":{\"5\":2}}],[\"1024\",{\"1\":{\"5\":2,\"55\":4}}],[\"1\",{\"0\":{\"5\":1,\"61\":1,\"90\":1,\"106\":1,\"198\":1},\"1\":{\"2\":1,\"5\":15,\"8\":23,\"11\":1,\"17\":6,\"20\":21,\"23\":23,\"27\":3,\"28\":1,\"34\":4,\"37\":1,\"43\":2,\"46\":5,\"52\":9,\"55\":4,\"101\":3,\"106\":5,\"107\":1,\"108\":8,\"116\":2,\"118\":3,\"125\":7,\"127\":2,\"128\":1,\"135\":2,\"136\":1,\"137\":3,\"138\":3,\"139\":3,\"140\":4,\"147\":2,\"148\":16,\"149\":24,\"150\":5,\"158\":2,\"159\":1,\"164\":2,\"165\":2}}],[\"它没有函数名\",{\"1\":{\"203\":1}}],[\"它没有对象的概念\",{\"1\":{\"27\":1}}],[\"它有函数名\",{\"1\":{\"203\":1}}],[\"它有十分充足的仓库\",{\"1\":{\"58\":1}}],[\"它总是会丢失\",{\"1\":{\"202\":1}}],[\"它应当长这样\",{\"1\":{\"198\":1}}],[\"它通过\",{\"1\":{\"198\":1}}],[\"它基于标准html\",{\"1\":{\"198\":1}}],[\"它基本上都考虑到了\",{\"1\":{\"61\":1}}],[\"它什么设计都没有\",{\"1\":{\"176\":1}}],[\"它描述了对象的行为\",{\"1\":{\"165\":1}}],[\"它描述了对象的状态\",{\"1\":{\"165\":1}}],[\"它封装了数据和操作数据的方法\",{\"1\":{\"165\":1}}],[\"它具有状态和行为\",{\"1\":{\"165\":1}}],[\"它能将不同类型的数据组合成一个整体\",{\"1\":{\"164\":1}}],[\"它接受两个\",{\"1\":{\"159\":1}}],[\"它接受两个整数作为参数\",{\"1\":{\"147\":1}}],[\"它指向的是一个函数的入口地址\",{\"1\":{\"159\":1}}],[\"它也可以用递归解决\",{\"1\":{\"149\":1}}],[\"它允许我们将代码模块化\",{\"1\":{\"146\":1}}],[\"它就像一个抽屉\",{\"1\":{\"140\":1}}],[\"它就会一直执行\",{\"1\":{\"11\":1}}],[\"它可以用来解决很多复杂的问题\",{\"1\":{\"149\":1}}],[\"它可以存储多个相同类型的值\",{\"1\":{\"140\":1}}],[\"它可能是整数\",{\"1\":{\"28\":1}}],[\"它和\",{\"1\":{\"139\":1}}],[\"它表示\",{\"1\":{\"133\":1}}],[\"它默认是\",{\"1\":{\"105\":1}}],[\"它还有不少进阶用法\",{\"1\":{\"91\":1}}],[\"它与你认知当中的顺序执行不太一样\",{\"1\":{\"201\":1}}],[\"它与\",{\"1\":{\"85\":1}}],[\"它只需要负责所有实体都会做的事情\",{\"1\":{\"73\":1}}],[\"它在各大平台上都能顺利地运行\",{\"1\":{\"61\":1}}],[\"它最稳定\",{\"1\":{\"58\":1}}],[\"它实际上是以这个被围绕的实体为参照的相对位置\",{\"1\":{\"73\":1}}],[\"它实际上是\",{\"1\":{\"46\":1}}],[\"它不会受限于当前作用域\",{\"1\":{\"43\":1,\"158\":1}}],[\"它会等待\",{\"1\":{\"202\":1}}],[\"它会立即返回一个\",{\"1\":{\"202\":2}}],[\"它会告诉你的\",{\"1\":{\"178\":1}}],[\"它会找到离自己最近的\",{\"1\":{\"133\":1}}],[\"它会将包含该内容的匹配全部列出来\",{\"1\":{\"86\":1}}],[\"它会将一段空间分配给你\",{\"1\":{\"43\":1,\"158\":1}}],[\"它会在当前路径下创建一个名为\",{\"1\":{\"58\":1}}],[\"它会比较两个文件之间有什么区别\",{\"1\":{\"52\":1}}],[\"它会动态返回一个不同的\",{\"1\":{\"52\":1}}],[\"它会从它能表示范围的另一端重新开始\",{\"1\":{\"5\":1}}],[\"它本质上是一个存储地址的变量\",{\"1\":{\"43\":1,\"157\":1}}],[\"它很实在不会骗你\",{\"1\":{\"37\":1}}],[\"它很像一个从根开始不断分叉的树\",{\"1\":{\"20\":1}}],[\"它虽然优化了空间\",{\"1\":{\"34\":1}}],[\"它将自动根据你浏览器中输入的地址路由来选择展示的内容\",{\"1\":{\"198\":1}}],[\"它将根据情况自行决定外边距的大小\",{\"1\":{\"177\":1}}],[\"它将链接库也一起带了进去\",{\"1\":{\"58\":1}}],[\"它将作为匿名结构体\",{\"1\":{\"27\":1,\"164\":1}}],[\"它将多个不同类型的变量组合在一起\",{\"1\":{\"27\":1}}],[\"它又到底快在哪里呢\",{\"1\":{\"23\":1}}],[\"它们在语法和功能上都有一些区别\",{\"1\":{\"203\":1}}],[\"它们在整个程序中都可以被访问\",{\"1\":{\"100\":1}}],[\"它们分别对应了\",{\"1\":{\"198\":1}}],[\"它们分别控制着元素的外边距和内边距\",{\"1\":{\"177\":1}}],[\"它们被\",{\"1\":{\"182\":1}}],[\"它们各有优缺点\",{\"1\":{\"150\":1}}],[\"它们可以放在操作数的前面\",{\"1\":{\"125\":1}}],[\"它们俩合在一起表示一个字符\",{\"1\":{\"121\":1}}],[\"它们只能在当前大括号内被访问\",{\"1\":{\"100\":1}}],[\"它们理解内存的方式不同\",{\"1\":{\"37\":1}}],[\"它们应该被称作起始柱子\",{\"1\":{\"23\":1,\"148\":1}}],[\"它们的行号和列号相加是相等的\",{\"1\":{\"20\":1}}],[\"它们也正是搜索要注意的内容\",{\"1\":{\"20\":1}}],[\"它才能给你算出答案来\",{\"1\":{\"17\":1}}],[\"它才好将读入的值存过去\",{\"1\":{\"2\":1}}],[\"它来自于汇编语言\",{\"1\":{\"14\":1}}],[\"它是\",{\"1\":{\"177\":1}}],[\"它是一个包含数据和行为的实体\",{\"1\":{\"165\":1}}],[\"它是一种通过迭代的方式\",{\"1\":{\"150\":1}}],[\"它是来想办法将减法转换为加法的\",{\"1\":{\"107\":1}}],[\"它是在屏幕上输出\",{\"1\":{\"91\":1}}],[\"它是紧接着向后读一个字符\",{\"1\":{\"5\":1}}],[\"它是用\",{\"1\":{\"5\":1}}],[\"它的\",{\"1\":{\"203\":1}}],[\"它的模板部分将会被渲染到\",{\"1\":{\"198\":1}}],[\"它的逻辑性更好\",{\"1\":{\"198\":1}}],[\"它的项目结构大致如下\",{\"1\":{\"198\":1}}],[\"它的边缘似乎有些太尖锐了\",{\"1\":{\"176\":1}}],[\"它的形式如下\",{\"1\":{\"135\":1,\"136\":1,\"141\":1}}],[\"它的最终结果可以是任意整数\",{\"1\":{\"133\":1}}],[\"它的最大值是\",{\"1\":{\"105\":1}}],[\"它的最高位用来表示符号\",{\"1\":{\"5\":1}}],[\"它的作用是重复执行一段代码\",{\"1\":{\"137\":1}}],[\"它的作用是\",{\"1\":{\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"141\":1}}],[\"它的作用是让代码更加易读\",{\"1\":{\"92\":1,\"93\":1}}],[\"它的作用是使函数返回\",{\"1\":{\"91\":1}}],[\"它的作用是将后面的字符串输出到屏幕上\",{\"1\":{\"91\":1}}],[\"它的加载函数为openfromfile\",{\"1\":{\"67\":1}}],[\"它的默认内容如下\",{\"1\":{\"58\":1}}],[\"它的含义就发生了改变\",{\"1\":{\"43\":1,\"158\":1}}],[\"它的特点就是能够动态分配数组的内存\",{\"1\":{\"34\":1}}],[\"它的具体表现取决于编译器\",{\"1\":{\"5\":1}}],[\"它的能力是将它右侧的值赋给左侧的变量\",{\"1\":{\"2\":1}}],[\"=>\",{\"1\":{\"198\":6,\"202\":13,\"203\":2}}],[\"===\",{\"1\":{\"198\":2,\"202\":1}}],[\"==\",{\"1\":{\"8\":4,\"14\":1,\"20\":6,\"23\":3,\"34\":3,\"43\":1,\"46\":1,\"134\":4,\"148\":5,\"149\":8,\"158\":1}}],[\"=\",{\"1\":{\"2\":4,\"5\":7,\"8\":18,\"11\":3,\"14\":2,\"17\":5,\"20\":23,\"23\":4,\"27\":11,\"28\":3,\"31\":15,\"34\":20,\"37\":3,\"43\":12,\"46\":8,\"52\":2,\"55\":1,\"91\":1,\"99\":5,\"100\":2,\"101\":4,\"105\":1,\"108\":3,\"116\":2,\"118\":3,\"121\":2,\"122\":1,\"123\":1,\"125\":7,\"127\":1,\"134\":3,\"135\":3,\"137\":1,\"138\":2,\"139\":2,\"140\":4,\"141\":1,\"147\":2,\"149\":13,\"150\":4,\"158\":12,\"159\":2,\"164\":2,\"165\":9,\"198\":5,\"202\":11,\"203\":5}}],[\"就好了\",{\"1\":{\"198\":1}}],[\"就回到上一步\",{\"1\":{\"149\":1}}],[\"就那种一个方格里到处都是\",{\"1\":{\"149\":1}}],[\"就长这样\",{\"1\":{\"133\":1}}],[\"就可以得到补码了\",{\"1\":{\"108\":1}}],[\"就可以运行了\",{\"1\":{\"94\":1}}],[\"就被解释为\",{\"1\":{\"106\":1}}],[\"就拥有\",{\"1\":{\"105\":1}}],[\"就像是代码在此处进入了岔路口\",{\"1\":{\"133\":1}}],[\"就像我们之前提到的\",{\"1\":{\"91\":1}}],[\"就像斐波那契数列的第一和第二项一样\",{\"1\":{\"23\":1}}],[\"就相当于将原来的数字减去\",{\"1\":{\"108\":1}}],[\"就相当于\",{\"1\":{\"73\":1}}],[\"就相当于告诉\",{\"1\":{\"2\":1}}],[\"就会感到十分痛苦\",{\"1\":{\"192\":1}}],[\"就会立刻被销毁\",{\"1\":{\"100\":1}}],[\"就会在屏幕上输出\",{\"1\":{\"91\":1}}],[\"就会发现\",{\"1\":{\"58\":1}}],[\"就会输出对应的东西\",{\"1\":{\"2\":1}}],[\"就不放了\",{\"1\":{\"73\":1}}],[\"就不在这里多写了\",{\"1\":{\"58\":1}}],[\"就不需要写\",{\"1\":{\"27\":1}}],[\"就停下来让你去\",{\"1\":{\"52\":1}}],[\"就在这里给大家介绍介绍\",{\"1\":{\"52\":1}}],[\"就行了\",{\"1\":{\"23\":1,\"61\":1,\"175\":1}}],[\"就行了哦\",{\"1\":{\"17\":1}}],[\"就没必要求下去了\",{\"1\":{\"20\":1}}],[\"就能得到\",{\"1\":{\"20\":1}}],[\"就需要将其中我们不需要的一些分支尽可能的去掉\",{\"1\":{\"20\":1}}],[\"就够了\",{\"1\":{\"20\":1}}],[\"就显得不那么优秀了\",{\"1\":{\"20\":1}}],[\"就是\",{\"1\":{\"202\":1}}],[\"就是指水平方向上的对齐方式\",{\"1\":{\"175\":1}}],[\"就是指垂直方向上的对齐方式\",{\"1\":{\"175\":1}}],[\"就是递归\",{\"1\":{\"148\":1}}],[\"就是在说\",{\"1\":{\"91\":1}}],[\"就是用来做类似的事情的\",{\"1\":{\"91\":1}}],[\"就是取一个范围是\",{\"1\":{\"52\":1}}],[\"就是告诉函数它需要知道这些值\",{\"1\":{\"17\":1}}],[\"就是一个特殊的函数\",{\"1\":{\"17\":1}}],[\"就只能借助这个库了\",{\"1\":{\"5\":1}}],[\"就变成了\",{\"1\":{\"5\":1}}],[\"npm\",{\"1\":{\"198\":1}}],[\"nav>\",{\"1\":{\"189\":1,\"195\":1}}],[\"name=\",{\"1\":{\"198\":1}}],[\"name\",{\"1\":{\"165\":4,\"198\":2}}],[\"nju\",{\"1\":{\"87\":1,\"177\":2,\"195\":2}}],[\"nlog2​n\",{\"1\":{\"55\":1}}],[\"n的数据范围是1到100000\",{\"1\":{\"55\":1}}],[\"new\",{\"1\":{\"203\":2}}],[\"newcapacity\",{\"1\":{\"34\":2}}],[\"next\",{\"1\":{\"31\":1,\"198\":7}}],[\"null\",{\"1\":{\"31\":5,\"34\":1,\"43\":2,\"158\":2,\"165\":4,\"198\":2,\"202\":5}}],[\"number\",{\"1\":{\"99\":1}}],[\"numa\",{\"1\":{\"5\":2}}],[\"num\",{\"1\":{\"5\":4}}],[\"none\",{\"1\":{\"177\":1,\"195\":1}}],[\"no\",{\"1\":{\"86\":1,\"87\":1,\"149\":1}}],[\"notfound\",{\"1\":{\"198\":1}}],[\"not\",{\"1\":{\"52\":2,\"206\":1}}],[\"node\",{\"1\":{\"31\":16,\"198\":2}}],[\"now\",{\"1\":{\"20\":3}}],[\"ny\",{\"1\":{\"20\":4}}],[\"nx\",{\"1\":{\"20\":4}}],[\"n\",{\"1\":{\"2\":1,\"5\":1,\"8\":6,\"11\":1,\"14\":5,\"17\":8,\"20\":21,\"23\":50,\"34\":11,\"37\":1,\"43\":3,\"46\":14,\"52\":1,\"55\":3,\"121\":3,\"133\":7,\"134\":2,\"135\":9,\"136\":6,\"137\":1,\"138\":2,\"139\":2,\"140\":1,\"141\":1,\"148\":32,\"149\":13,\"150\":5,\"158\":3,\"159\":1,\"165\":2}}],[\"输出结果\",{\"1\":{\"149\":3}}],[\"输出样例\",{\"1\":{\"149\":1}}],[\"输出格式\",{\"1\":{\"149\":1}}],[\"输出一条路径\",{\"1\":{\"149\":1}}],[\"输出一个浮点数\",{\"1\":{\"121\":1}}],[\"输出一个整数\",{\"1\":{\"121\":3}}],[\"输出到标准输出\",{\"1\":{\"121\":1,\"123\":1}}],[\"输出的一些奇技淫巧在此并不赘述\",{\"1\":{\"5\":1}}],[\"输出\",{\"1\":{\"2\":1,\"116\":1,\"165\":1}}],[\"输入迷宫\",{\"1\":{\"149\":1}}],[\"输入迷宫大小\",{\"1\":{\"149\":1}}],[\"输入样例\",{\"1\":{\"149\":1}}],[\"输入格式\",{\"1\":{\"149\":1}}],[\"输入输出是使用\",{\"1\":{\"119\":1}}],[\"输入输出\",{\"0\":{\"119\":1}}],[\"输入\",{\"1\":{\"2\":1,\"58\":1}}],[\"输入和输出\",{\"1\":{\"2\":1}}],[\"那是因为它的外边距决定了它距离左边的距离\",{\"1\":{\"177\":1}}],[\"那加上一个边框吧\",{\"1\":{\"176\":1}}],[\"那终点可以从哪里来呢\",{\"1\":{\"149\":1}}],[\"那同理推断\",{\"1\":{\"108\":1}}],[\"那有没有另外一个数字\",{\"1\":{\"108\":1}}],[\"那显然它是\",{\"1\":{\"108\":1}}],[\"那这里可以说人话\",{\"1\":{\"203\":1}}],[\"那这两格又从哪里来呢\",{\"1\":{\"149\":1}}],[\"那这样的话\",{\"1\":{\"108\":1}}],[\"那这个时候它本身就是有序的\",{\"1\":{\"23\":1}}],[\"那不对啊\",{\"1\":{\"108\":1}}],[\"那一列\",{\"1\":{\"86\":1}}],[\"那就是对应的包名\",{\"1\":{\"86\":1}}],[\"那就是第二个元素\",{\"1\":{\"37\":1}}],[\"那就是第一个元素\",{\"1\":{\"37\":1}}],[\"那就大概说一下\",{\"1\":{\"85\":1}}],[\"那想法就很简单了\",{\"1\":{\"79\":1}}],[\"那太麻烦了\",{\"1\":{\"76\":1}}],[\"那也就是每个数组有\",{\"1\":{\"55\":1}}],[\"那肯定没问题\",{\"1\":{\"55\":1}}],[\"那它肯定不会让你的空间超过这个限制\",{\"1\":{\"55\":1}}],[\"那你应该已经理解了函数的基本结构了\",{\"1\":{\"146\":1}}],[\"那你可以在安装时指定安装路径\",{\"1\":{\"86\":1}}],[\"那你可以尝试输出\",{\"1\":{\"55\":1}}],[\"那你大概一定是在做错事罢\",{\"1\":{\"182\":1}}],[\"那你大概需要更换镜像源\",{\"1\":{\"86\":1}}],[\"那你大概也不太需要学习如何配置\",{\"1\":{\"85\":1}}],[\"那你只能用老办法\",{\"1\":{\"86\":1}}],[\"那你肯定就寄了\",{\"1\":{\"55\":1}}],[\"那你完全不用担心超时\",{\"1\":{\"55\":1}}],[\"那你也来看看吧\",{\"1\":{\"49\":1}}],[\"那往往是死循环导致的\",{\"1\":{\"55\":1}}],[\"那我如果想把函数也打包进来\",{\"1\":{\"164\":1}}],[\"那我只需要知道终点可以从哪些地方到达就可以咯\",{\"1\":{\"149\":1}}],[\"那我用我自己的程序跑出结果我也不知道对不对啊\",{\"1\":{\"52\":1}}],[\"那我们能在函数中调用它自己吗\",{\"1\":{\"148\":1}}],[\"那我们现在来分别介绍一下每句话做了什么\",{\"1\":{\"91\":1}}],[\"那我们要在引言当中干的事其实是先把编程环境配一下\",{\"1\":{\"85\":1}}],[\"那我们就以\",{\"1\":{\"55\":1}}],[\"那我们可以利用\",{\"1\":{\"46\":1}}],[\"那我们面临的将是无穷无尽的鄙视链\",{\"1\":{\"23\":1}}],[\"那可真是太巧了\",{\"1\":{\"49\":1}}],[\"那用\",{\"1\":{\"46\":1}}],[\"那在\",{\"1\":{\"46\":1}}],[\"那他之后怎么走都不会比答案更好了\",{\"1\":{\"20\":1}}],[\"那怎么办呢\",{\"1\":{\"20\":1}}],[\"那该多好啊\",{\"1\":{\"17\":1}}],[\"那自然写出来的代码是十分臃肿的\",{\"1\":{\"17\":1}}],[\"那样只会导致更大的混乱\",{\"1\":{\"5\":1}}],[\"那么毫无基础的突然让你实践\",{\"1\":{\"192\":1}}],[\"那么他会选择\",{\"1\":{\"174\":1}}],[\"那么是不是可以得到\",{\"1\":{\"108\":1}}],[\"那么它最大能是多少呢\",{\"1\":{\"105\":1}}],[\"那么它的数组名就是指向它第一个元素的地址\",{\"1\":{\"43\":1,\"156\":1}}],[\"那么在同时除以三的基础上\",{\"1\":{\"108\":1}}],[\"那么在返回之后剩余的所有步骤都不会再被执行\",{\"1\":{\"91\":1}}],[\"那么在\",{\"1\":{\"91\":1}}],[\"那么安装起来也非常简单\",{\"1\":{\"87\":1}}],[\"那么你可以使用\",{\"1\":{\"133\":1}}],[\"那么你的\",{\"1\":{\"86\":1}}],[\"那么你会发现\",{\"1\":{\"55\":1}}],[\"那么说明有问题\",{\"1\":{\"52\":1}}],[\"那么这两个文件之间并没有差异\",{\"1\":{\"52\":1}}],[\"那么这次的oj作业对你来说仍然十分煎熬磨人\",{\"1\":{\"17\":1}}],[\"那么借助指针的这个性质\",{\"1\":{\"43\":1,\"158\":1}}],[\"那么恭喜你犯了除编译错误以外第二傻的问题\",{\"1\":{\"55\":1}}],[\"那么恭喜你\",{\"1\":{\"43\":1,\"156\":1}}],[\"那么数组到底是什么意思呢\",{\"1\":{\"37\":1,\"43\":1,\"158\":1}}],[\"那么就没有必要继续搜索了\",{\"1\":{\"149\":2}}],[\"那么就\",{\"1\":{\"133\":1}}],[\"那么就可以使用联合体来存储\",{\"1\":{\"28\":1}}],[\"那么就走过去\",{\"1\":{\"20\":1}}],[\"那么我们回到除\",{\"1\":{\"108\":1}}],[\"那么我们就需要将它们再缩进一层\",{\"1\":{\"93\":1}}],[\"那么我们到底该怎么样控制我们程序的时空复杂度呢\",{\"1\":{\"55\":1}}],[\"那么我们怎么能更高效的获得可能使你程序出错的数据呢\",{\"1\":{\"52\":1}}],[\"那么我们可以这样写\",{\"1\":{\"43\":1,\"134\":1,\"158\":1}}],[\"那么我们为什么不用不同的指针指向同一个\",{\"1\":{\"37\":1}}],[\"那么我们实际上需要排序下标\",{\"1\":{\"23\":1}}],[\"那么我们能怎么解决重复求解的问题呢\",{\"1\":{\"23\":1}}],[\"那么我们只要枚举每一行的皇后的列坐标就行\",{\"1\":{\"20\":1}}],[\"那么答案初始值应该是最大的\",{\"1\":{\"20\":1}}],[\"那么可以跳过求解步骤直接输出答案\",{\"1\":{\"14\":1}}],[\"那么\",{\"1\":{\"2\":1,\"17\":1,\"27\":1,\"58\":1,\"91\":1,\"94\":1,\"114\":1,\"164\":1,\"175\":1,\"202\":3,\"203\":1}}],[\"那\",{\"1\":{\"2\":1,\"106\":1}}],[\"号表示法用于指定输入输出的格式\",{\"1\":{\"120\":1}}],[\"号表示法\",{\"1\":{\"120\":1}}],[\"号表示这个变量的地址\",{\"1\":{\"2\":1}}],[\"号\",{\"1\":{\"43\":1,\"158\":1}}],[\"号指的是你告诉编译器你新建的变量是一个指针类型\",{\"1\":{\"43\":1,\"157\":1}}],[\"号和我们想要存入这个数据的变量名\",{\"1\":{\"2\":1}}],[\"await\",{\"1\":{\"202\":4}}],[\"axios\",{\"0\":{\"201\":1,\"202\":1},\"1\":{\"201\":1,\"202\":15}}],[\"async\",{\"1\":{\"202\":3}}],[\"assets\",{\"1\":{\"195\":2,\"198\":3}}],[\"ascii\",{\"1\":{\"5\":1,\"116\":2,\"122\":1,\"123\":1}}],[\"audio>\",{\"1\":{\"187\":1}}],[\"audio\",{\"1\":{\"187\":1}}],[\"auto\",{\"1\":{\"177\":5,\"195\":3}}],[\"all\",{\"1\":{\"195\":2}}],[\"alt=\",{\"1\":{\"187\":1}}],[\"align\",{\"1\":{\"175\":7,\"177\":1,\"195\":6}}],[\"a8abb2\",{\"1\":{\"178\":1}}],[\"a>\",{\"1\":{\"177\":1,\"188\":1,\"195\":1}}],[\"api\",{\"1\":{\"198\":4,\"202\":5}}],[\"app\",{\"1\":{\"177\":1,\"198\":18}}],[\"apt\",{\"1\":{\"61\":1}}],[\"active\",{\"1\":{\"174\":1,\"195\":1}}],[\"a++\",{\"1\":{\"125\":1}}],[\"a+b\",{\"1\":{\"52\":1}}],[\"anyscript\",{\"1\":{\"198\":1}}],[\"any\",{\"1\":{\"198\":1}}],[\"and\",{\"1\":{\"61\":1}}],[\"ans=day+\",{\"1\":{\"5\":1}}],[\"ans\",{\"1\":{\"5\":2,\"14\":3,\"20\":9,\"149\":1}}],[\"add\",{\"1\":{\"31\":1,\"58\":1,\"147\":6,\"159\":5,\"203\":2}}],[\"age++\",{\"1\":{\"203\":2}}],[\"age\",{\"1\":{\"27\":1,\"99\":1,\"165\":10,\"203\":3}}],[\"arraydotoj\",{\"1\":{\"142\":1}}],[\"array\",{\"0\":{\"8\":1},\"1\":{\"8\":3}}],[\"argv\",{\"1\":{\"5\":1,\"34\":1}}],[\"argc\",{\"1\":{\"5\":1,\"34\":1}}],[\"abs\",{\"1\":{\"5\":1,\"135\":1}}],[\"a\",{\"0\":{\"11\":1},\"1\":{\"2\":6,\"5\":5,\"8\":6,\"11\":7,\"17\":5,\"20\":1,\"23\":7,\"27\":10,\"28\":1,\"43\":12,\"52\":2,\"55\":2,\"99\":2,\"100\":4,\"105\":1,\"116\":4,\"120\":5,\"121\":3,\"123\":1,\"125\":3,\"140\":5,\"142\":1,\"147\":5,\"148\":6,\"156\":3,\"158\":9,\"159\":2,\"164\":2,\"174\":1,\"184\":1,\"185\":1,\"186\":1,\"203\":4}}],[\"dcdfe6\",{\"1\":{\"176\":1,\"177\":2}}],[\"direction\",{\"1\":{\"175\":11,\"177\":1,\"195\":3}}],[\"display\",{\"1\":{\"175\":11,\"177\":2,\"195\":5}}],[\"distance\",{\"1\":{\"116\":1}}],[\"div>\",{\"1\":{\"175\":27,\"176\":1,\"177\":4,\"184\":1,\"185\":1,\"186\":1,\"195\":4,\"198\":1}}],[\"div\",{\"1\":{\"174\":6,\"175\":2,\"176\":1,\"178\":2,\"182\":4,\"186\":1,\"189\":1,\"198\":3}}],[\"draw\",{\"1\":{\"79\":1}}],[\"deepseek\",{\"1\":{\"178\":1}}],[\"default\",{\"1\":{\"136\":3}}],[\"define\",{\"1\":{\"46\":1}}],[\"development\",{\"1\":{\"82\":1}}],[\"dev\",{\"1\":{\"61\":2}}],[\"del\",{\"1\":{\"31\":1}}],[\"destroy\",{\"1\":{\"27\":1,\"34\":2,\"165\":2}}],[\"depth\",{\"1\":{\"20\":1}}],[\"dashboard\",{\"1\":{\"198\":7}}],[\"dark\",{\"1\":{\"198\":1}}],[\"dangling\",{\"1\":{\"166\":1}}],[\"data3\",{\"1\":{\"27\":3,\"28\":4,\"164\":1}}],[\"data2\",{\"1\":{\"27\":3,\"28\":4,\"164\":1}}],[\"data1\",{\"1\":{\"27\":4,\"28\":4,\"164\":2}}],[\"data\",{\"0\":{\"26\":1},\"1\":{\"26\":1,\"27\":13,\"28\":7,\"31\":3,\"52\":4,\"164\":9,\"167\":1,\"202\":3}}],[\"day\",{\"1\":{\"5\":6}}],[\"dfs\",{\"1\":{\"20\":5,\"149\":5}}],[\"dfs指的是深度优先搜索\",{\"1\":{\"20\":1}}],[\"dy\",{\"1\":{\"20\":4,\"149\":3}}],[\"dx\",{\"1\":{\"20\":4,\"149\":3}}],[\"dot\",{\"0\":{\"207\":1}}],[\"dotoj\",{\"1\":{\"37\":1,\"85\":1,\"128\":1,\"142\":1,\"151\":1,\"160\":1,\"167\":1},\"2\":{\"3\":1,\"4\":1,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"15\":1,\"16\":1,\"18\":1,\"19\":1,\"21\":1,\"22\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"41\":1,\"42\":1,\"44\":1,\"45\":1}}],[\"dotoj补完计划\",{\"1\":{\"2\":1,\"17\":1}}],[\"domain\",{\"1\":{\"202\":1}}],[\"document\",{\"1\":{\"198\":1}}],[\"doctype\",{\"1\":{\"198\":1}}],[\"dog\",{\"1\":{\"27\":8}}],[\"do\",{\"0\":{\"139\":1},\"1\":{\"11\":3,\"43\":1,\"133\":6,\"136\":3,\"137\":4,\"138\":2,\"139\":10,\"158\":1}}],[\"double\",{\"0\":{\"113\":1,\"114\":1},\"1\":{\"5\":6,\"27\":2,\"28\":1,\"103\":2,\"113\":1,\"114\":4,\"164\":1}}],[\"d\",{\"1\":{\"2\":5,\"5\":1,\"11\":1,\"14\":2,\"17\":1,\"23\":3,\"34\":1,\"52\":2,\"86\":1,\"120\":3,\"121\":4,\"133\":1,\"134\":1,\"136\":1,\"137\":1,\"138\":2,\"139\":2,\"140\":1,\"141\":1,\"148\":2,\"149\":4,\"150\":1,\"159\":1}}],[\"scoped\",{\"1\":{\"198\":1}}],[\"scoped>\",{\"1\":{\"198\":3}}],[\"script\",{\"0\":{\"201\":1},\"1\":{\"198\":3,\"201\":1}}],[\"script>\",{\"1\":{\"198\":4}}],[\"scale=1\",{\"1\":{\"198\":1}}],[\"scanf读入整数好慢好慢\",{\"1\":{\"46\":1}}],[\"scanf\",{\"0\":{\"120\":1},\"1\":{\"2\":3,\"5\":9,\"11\":1,\"14\":1,\"23\":1,\"34\":1,\"43\":1,\"46\":8,\"119\":1,\"120\":8,\"133\":1,\"134\":1,\"136\":1,\"149\":2,\"150\":1,\"156\":1}}],[\"speak\",{\"1\":{\"165\":3}}],[\"sessionstorage\",{\"1\":{\"198\":2,\"202\":1}}],[\"setinterval\",{\"1\":{\"203\":2}}],[\"setup\",{\"1\":{\"198\":2}}],[\"setup>\",{\"1\":{\"198\":3}}],[\"set\",{\"1\":{\"165\":3}}],[\"search\",{\"1\":{\"20\":1,\"86\":1}}],[\"switch\",{\"0\":{\"136\":1},\"1\":{\"136\":6}}],[\"swap\",{\"1\":{\"27\":3,\"43\":2,\"158\":2}}],[\"snake\",{\"1\":{\"102\":1,\"146\":1,\"164\":1}}],[\"shadow\",{\"1\":{\"176\":1,\"177\":3,\"178\":2,\"195\":8}}],[\"shader的加载方式为\",{\"1\":{\"67\":1}}],[\"short\",{\"0\":{\"105\":1},\"1\":{\"103\":1,\"105\":5,\"106\":1,\"108\":2}}],[\"shift\",{\"1\":{\"58\":1}}],[\"sfml\",{\"0\":{\"61\":1,\"209\":1},\"1\":{\"61\":4,\"82\":1},\"2\":{\"62\":1,\"63\":1,\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"71\":1,\"72\":1,\"74\":1,\"75\":1,\"77\":1,\"78\":1,\"80\":1,\"81\":1,\"83\":1,\"84\":1}}],[\"src=\",{\"1\":{\"187\":3,\"195\":2,\"198\":1}}],[\"src\",{\"0\":{\"187\":1},\"1\":{\"58\":2,\"183\":1,\"187\":1,\"198\":5}}],[\"srand\",{\"1\":{\"52\":2}}],[\"sdl\",{\"1\":{\"61\":2}}],[\"sdltest\",{\"1\":{\"58\":5}}],[\"sdl2\",{\"0\":{\"58\":1},\"1\":{\"58\":4}}],[\"simple\",{\"1\":{\"61\":1}}],[\"signed\",{\"1\":{\"103\":1,\"105\":1,\"116\":2}}],[\"sign\",{\"1\":{\"46\":3}}],[\"size\",{\"1\":{\"34\":9,\"177\":1,\"195\":5}}],[\"sizeof\",{\"1\":{\"27\":1,\"31\":2,\"34\":2,\"37\":1,\"43\":3,\"55\":4,\"158\":3,\"165\":2}}],[\"some\",{\"1\":{\"202\":1}}],[\"something\",{\"1\":{\"43\":1,\"133\":6,\"136\":3,\"137\":3,\"138\":2,\"139\":3,\"158\":1}}],[\"solid\",{\"1\":{\"176\":1,\"177\":2,\"178\":1,\"195\":2}}],[\"solution\",{\"1\":{\"149\":1}}],[\"solve\",{\"1\":{\"5\":2}}],[\"software\",{\"1\":{\"86\":1}}],[\"soundplayer\",{\"1\":{\"82\":1}}],[\"s\",{\"1\":{\"37\":3,\"46\":2,\"120\":1,\"165\":1}}],[\"sz\",{\"1\":{\"34\":3}}],[\"sqrt\",{\"1\":{\"5\":1}}],[\"sudo\",{\"1\":{\"61\":1}}],[\"sunday\",{\"1\":{\"5\":1}}],[\"sum\",{\"1\":{\"2\":1}}],[\"saturday\",{\"1\":{\"5\":1}}],[\"style>\",{\"1\":{\"195\":2,\"198\":2}}],[\"style\",{\"0\":{\"186\":1},\"1\":{\"183\":1,\"186\":2,\"198\":4}}],[\"style=\",{\"1\":{\"175\":27,\"176\":1,\"177\":3,\"186\":1}}],[\"stc=\",{\"1\":{\"177\":1}}],[\"status\",{\"1\":{\"202\":1}}],[\"static\",{\"1\":{\"101\":4}}],[\"state\",{\"1\":{\"79\":2}}],[\"statestack\",{\"0\":{\"79\":1},\"1\":{\"79\":1}}],[\"standard\",{\"1\":{\"2\":1}}],[\"string\",{\"1\":{\"198\":2}}],[\"strcpy\",{\"1\":{\"165\":1}}],[\"strlen\",{\"1\":{\"37\":1,\"165\":1}}],[\"struct\",{\"0\":{\"27\":1},\"1\":{\"27\":13,\"28\":1,\"31\":2,\"34\":1,\"164\":7,\"165\":2}}],[\"steps\",{\"1\":{\"149\":19}}],[\"step\",{\"1\":{\"20\":9}}],[\"std\",{\"1\":{\"52\":4}}],[\"stdlib\",{\"1\":{\"52\":1}}],[\"stdbool\",{\"1\":{\"5\":1,\"103\":1}}],[\"stdio\",{\"1\":{\"2\":2,\"91\":1,\"119\":1}}],[\"是标准的函数定义方式\",{\"1\":{\"203\":1}}],[\"是两种不同的函数定义方式\",{\"1\":{\"203\":1}}],[\"是两个非常常用的属性\",{\"1\":{\"177\":1}}],[\"是最好的学习方式\",{\"1\":{\"201\":1}}],[\"是最难的题\",{\"1\":{\"20\":1}}],[\"是目前生产环境中使用最广泛的javascript框架之一\",{\"1\":{\"198\":1}}],[\"是页面设计中最重要的部分\",{\"1\":{\"173\":1}}],[\"是指向已释放内存的指针\",{\"1\":{\"166\":1}}],[\"是指使编译器包含\",{\"1\":{\"2\":1}}],[\"是迷宫的大小\",{\"1\":{\"149\":1}}],[\"是否成立\",{\"1\":{\"137\":2,\"138\":1,\"139\":1}}],[\"是不同的\",{\"1\":{\"134\":1}}],[\"是不是相等的\",{\"1\":{\"108\":1}}],[\"是不是有\",{\"1\":{\"108\":1}}],[\"是不是一个计算结果的式子\",{\"1\":{\"91\":1}}],[\"是不是感觉比不用函数的思路简单许多\",{\"1\":{\"17\":1}}],[\"是转义符号\",{\"1\":{\"121\":1}}],[\"是你的可执行文件名\",{\"1\":{\"94\":1}}],[\"是你的代码文件名\",{\"1\":{\"94\":1}}],[\"是你希望输出的文件名\",{\"1\":{\"94\":1}}],[\"是一款非常火爆的前端项目框架\",{\"1\":{\"198\":1}}],[\"是一款非常好用的图形界面库\",{\"1\":{\"61\":1}}],[\"是一个条件表达式\",{\"1\":{\"133\":1}}],[\"是一个字符串\",{\"1\":{\"120\":1,\"121\":1}}],[\"是一个选项\",{\"1\":{\"94\":1}}],[\"是一种正向的过程\",{\"1\":{\"150\":1}}],[\"是一种二元类型\",{\"1\":{\"118\":1}}],[\"是一种字符类型\",{\"1\":{\"116\":1}}],[\"是一种扩展精度浮点数类型\",{\"1\":{\"114\":1}}],[\"是一种双精度浮点数类型\",{\"1\":{\"113\":1}}],[\"是一种单精度浮点数类型\",{\"1\":{\"112\":1}}],[\"是一种非常暴力的设计方式\",{\"1\":{\"175\":1}}],[\"是一种非常大的整数类型\",{\"1\":{\"110\":1}}],[\"是一种非常好的做法\",{\"1\":{\"46\":1}}],[\"是一种标准的整数类型\",{\"1\":{\"109\":1}}],[\"是一种较小的整数类型\",{\"1\":{\"105\":1}}],[\"是由国人开发的基于\",{\"1\":{\"58\":1}}],[\"是按照字节来计算的\",{\"1\":{\"55\":1}}],[\"是\",{\"1\":{\"52\":1,\"55\":1,\"91\":2,\"99\":1,\"101\":1,\"141\":1,\"164\":1,\"175\":1,\"203\":1}}],[\"是数字\",{\"1\":{\"46\":1}}],[\"是负数\",{\"1\":{\"46\":1}}],[\"是无法通过的\",{\"1\":{\"46\":1}}],[\"是用时间来换的\",{\"1\":{\"46\":1}}],[\"是这样的\",{\"1\":{\"46\":2}}],[\"是非常优秀的数据结构\",{\"1\":{\"31\":1}}],[\"是我们建的数组的名字\",{\"1\":{\"8\":1}}],[\"是我们常用的小数变量类型\",{\"1\":{\"5\":1}}],[\"是个整十数的年份\",{\"1\":{\"8\":1}}],[\"是闰年\",{\"1\":{\"8\":1,\"134\":1}}],[\"是因为在计算机中\",{\"1\":{\"5\":1}}],[\"是它的文件名后缀\",{\"1\":{\"2\":1}}],[\"oop\",{\"1\":{\"165\":1}}],[\"org\",{\"1\":{\"61\":1}}],[\"off\",{\"1\":{\"52\":1}}],[\"o\",{\"1\":{\"49\":1,\"94\":2}}],[\"oj\",{\"0\":{\"207\":1},\"1\":{\"37\":1,\"46\":2}}],[\"output\",{\"1\":{\"20\":1}}],[\"out\",{\"1\":{\"2\":1,\"52\":4,\"178\":3,\"195\":1}}],[\"otz\",{\"1\":{\"2\":1,\"46\":1}}],[\"hastoken\",{\"1\":{\"202\":1}}],[\"handleevent\",{\"1\":{\"79\":1}}],[\"hanoi\",{\"1\":{\"23\":3,\"148\":3}}],[\"history\",{\"1\":{\"198\":1}}],[\"h1>\",{\"1\":{\"184\":1,\"185\":1,\"189\":1}}],[\"href\",{\"0\":{\"188\":1},\"1\":{\"183\":1,\"188\":1}}],[\"href=\",{\"1\":{\"177\":1,\"188\":1,\"195\":1,\"198\":1}}],[\"html>\",{\"1\":{\"198\":2}}],[\"html\",{\"0\":{\"181\":1},\"1\":{\"177\":1,\"181\":3,\"182\":2,\"183\":1,\"189\":1,\"195\":2,\"198\":5},\"2\":{\"191\":1,\"194\":1,\"197\":1,\"200\":1}}],[\"https\",{\"1\":{\"61\":1,\"177\":2,\"188\":1,\"195\":1,\"202\":1}}],[\"head>\",{\"1\":{\"198\":1}}],[\"headers\",{\"1\":{\"202\":1}}],[\"header>\",{\"1\":{\"189\":1}}],[\"header\",{\"1\":{\"177\":8,\"195\":10,\"198\":7}}],[\"height\",{\"1\":{\"175\":24,\"176\":1,\"177\":4,\"195\":6}}],[\"hello\",{\"1\":{\"91\":5,\"92\":2,\"93\":1}}],[\"home\",{\"1\":{\"198\":6}}],[\"homebrew\",{\"1\":{\"87\":5}}],[\"hover\",{\"1\":{\"174\":1,\"178\":2,\"195\":1}}],[\"h当中有定义\",{\"1\":{\"46\":1}}],[\"h\",{\"1\":{\"2\":3,\"5\":4,\"37\":1,\"52\":1,\"91\":1,\"103\":1,\"119\":1}}],[\"h>\",{\"1\":{\"2\":2,\"5\":1,\"31\":2,\"34\":3,\"52\":2,\"91\":3,\"92\":1,\"93\":1,\"133\":1}}],[\"而非\",{\"1\":{\"203\":1}}],[\"而在箭头函数中\",{\"1\":{\"203\":1}}],[\"而在函数定义之前\",{\"1\":{\"148\":1}}],[\"而无需关注如何展示\",{\"1\":{\"198\":1}}],[\"而忽略没有被\",{\"1\":{\"174\":1}}],[\"而递推在处理一些具有迭代性质的问题时\",{\"1\":{\"150\":1}}],[\"而递推是将小问题合并为大问题\",{\"1\":{\"150\":1}}],[\"而计算机在\",{\"1\":{\"149\":1}}],[\"而这种在自己的函数体求解过程中使用自己得出的结果的方法\",{\"1\":{\"148\":1}}],[\"而函数在声明后就可以被使用\",{\"1\":{\"147\":1}}],[\"而负数的表示方式是补码表示法\",{\"1\":{\"106\":1}}],[\"而对于大括号\",{\"1\":{\"100\":1}}],[\"而数字\",{\"1\":{\"91\":1}}],[\"而双引号文件\",{\"1\":{\"91\":1}}],[\"而已\",{\"1\":{\"79\":1}}],[\"而借助空间限制我们可以了解到\",{\"1\":{\"55\":1}}],[\"而是会等待网络请求完成之后\",{\"1\":{\"202\":1}}],[\"而是针对\",{\"1\":{\"181\":1}}],[\"而是根据音乐播放的进度选取文件当中的某一段读入\",{\"1\":{\"82\":1}}],[\"而是不断读入直到读入到我们需要的东西再进行处理\",{\"1\":{\"46\":1}}],[\"而是只会被在其前面的子问题影响\",{\"1\":{\"20\":1}}],[\"而不会影响到其他组件\",{\"1\":{\"198\":1}}],[\"而不设置的情况下\",{\"1\":{\"177\":1}}],[\"而不去在意输入格式的具体情况\",{\"1\":{\"46\":1}}],[\"而不是仅仅为了布局和样式\",{\"1\":{\"189\":1}}],[\"而不是\",{\"1\":{\"140\":1,\"203\":1}}],[\"而不是每次都返回\",{\"1\":{\"101\":1}}],[\"而不是loadfromfile\",{\"1\":{\"67\":1}}],[\"而不是指针本身\",{\"1\":{\"43\":1,\"158\":1}}],[\"而不是终点柱上\",{\"1\":{\"23\":1,\"148\":1}}],[\"而不是和原来那句并排写\",{\"1\":{\"5\":1}}],[\"而将一个长度为n的序列分割至最小需要\",{\"1\":{\"55\":1}}],[\"而将一个数组变为有序数组\",{\"1\":{\"23\":1}}],[\"而将这个数组二分我们只需要分\",{\"1\":{\"23\":1}}],[\"而时间有的时候很难看出来有没有超\",{\"1\":{\"23\":1}}],[\"而我们如何去写递归\",{\"1\":{\"23\":1}}],[\"而当n\",{\"1\":{\"23\":1}}],[\"而当我们写入\",{\"1\":{\"2\":1}}],[\"而仅仅是作为一个操作存在\",{\"1\":{\"17\":1}}],[\"而如果你不需要符号\",{\"1\":{\"105\":1}}],[\"而如果是\",{\"1\":{\"93\":1}}],[\"而如果使用\",{\"1\":{\"8\":1}}],[\"而如果没有加大括号\",{\"1\":{\"8\":1}}],[\"而且ddl非常的短\",{\"1\":{\"192\":1}}],[\"而且支持生态非常好\",{\"1\":{\"85\":1}}],[\"而且\",{\"1\":{\"76\":1}}],[\"而且它具有非常良好的跨平台能力\",{\"1\":{\"61\":1}}],[\"而且它实际上指向了数组的第一个元素\",{\"1\":{\"37\":1}}],[\"而且找到我想要的数据就算运气好也要花不少时间\",{\"1\":{\"52\":1}}],[\"而且这样手动生成数据\",{\"1\":{\"52\":1}}],[\"而且题目也解释的很清楚\",{\"1\":{\"37\":1}}],[\"而且从头到尾顺序访问并不受影响\",{\"1\":{\"31\":1}}],[\"而且所有字段共享同一块内存空间\",{\"1\":{\"28\":1}}],[\"而且当前路径之前并没有走过\",{\"1\":{\"20\":1}}],[\"而且别人看了至少也会觉着蛮清爽的\",{\"1\":{\"5\":1}}],[\"而且你想追求更大一些的表示范围的话\",{\"1\":{\"5\":1}}],[\"而且我们能用上面的输入输出来对这个变量进行操作\",{\"1\":{\"2\":1}}],[\"而且我们并不需要知道这是什么意思\",{\"1\":{\"2\":1}}],[\"而之后的给出的变量必须与按照前面字符串中出现的\",{\"1\":{\"2\":1}}],[\"而要想写入数据\",{\"1\":{\"2\":1}}],[\"而io指的是输入输出\",{\"1\":{\"2\":1}}],[\"而\",{\"1\":{\"2\":1,\"5\":2,\"8\":1,\"52\":1,\"58\":1,\"91\":1,\"93\":1,\"105\":1,\"116\":1,\"133\":1,\"137\":1,\"148\":1,\"149\":1}}],[\"只挑比较重要的部分说\",{\"1\":{\"198\":1}}],[\"只会给你一个需求和一个示例项目\",{\"1\":{\"192\":1}}],[\"只有当两个条件都成立时\",{\"1\":{\"134\":1}}],[\"只有判断条件成立\",{\"1\":{\"8\":1}}],[\"只是它的静态语法属性更强\",{\"1\":{\"198\":1}}],[\"只是命令不同而已\",{\"1\":{\"52\":1}}],[\"只是一味的写\",{\"1\":{\"120\":1}}],[\"只是一种辅助手段\",{\"1\":{\"28\":1}}],[\"只是一个想为大家着想的菜菜oier\",{\"1\":{\"2\":1}}],[\"只不过位运算和加法都比乘法快\",{\"1\":{\"46\":1}}],[\"只不过人家是\",{\"1\":{\"5\":1}}],[\"只能接受参数\",{\"1\":{\"203\":1}}],[\"只能用\",{\"1\":{\"107\":1}}],[\"只能拿到\",{\"1\":{\"46\":1}}],[\"只能朝上下左右四个方向走\",{\"1\":{\"20\":1}}],[\"只需要自行再调试修改一下就好了\",{\"1\":{\"178\":1}}],[\"只需要将原本的数字取反\",{\"1\":{\"108\":1}}],[\"只需要使用\",{\"1\":{\"86\":1}}],[\"只需要去\",{\"1\":{\"85\":1}}],[\"只需要配置好编译命令或者\",{\"1\":{\"61\":1}}],[\"只需要分配一块内存空间即可\",{\"1\":{\"28\":1}}],[\"只需要知道\",{\"1\":{\"23\":1}}],[\"只需要知道一个程序不能少了上面代码的任何一个东西\",{\"1\":{\"2\":1}}],[\"只需要在这三个数都符合条件的情况下\",{\"1\":{\"17\":1}}],[\"只多了一个\",{\"1\":{\"14\":1}}],[\"只要加上\",{\"1\":{\"175\":1}}],[\"只要有一个条件成立\",{\"1\":{\"134\":1}}],[\"只要返回空的不就行了嘛\",{\"1\":{\"17\":1}}],[\"只要括号里的条件成立\",{\"1\":{\"11\":1}}],[\"只要你的思路没有错误\",{\"1\":{\"8\":1}}],[\"的结果\",{\"1\":{\"202\":1}}],[\"的结构体类型\",{\"1\":{\"164\":1}}],[\"的结构来解决这个问题\",{\"1\":{\"73\":1}}],[\"的方法时\",{\"1\":{\"202\":1}}],[\"的组件样式和用法查询\",{\"1\":{\"201\":1}}],[\"的页面中\",{\"1\":{\"198\":1}}],[\"的实例项目就是使用的组合式\",{\"1\":{\"198\":1}}],[\"的包管理器\",{\"1\":{\"198\":1}}],[\"的行为\",{\"1\":{\"198\":1}}],[\"的使用方式与\",{\"1\":{\"198\":1}}],[\"的官方文档实际上也非常不错\",{\"1\":{\"198\":1}}],[\"的基本概念\",{\"1\":{\"195\":1}}],[\"的基本概念和用法\",{\"1\":{\"173\":1}}],[\"的基本结构\",{\"1\":{\"182\":1}}],[\"的基础知识\",{\"1\":{\"181\":1}}],[\"的感觉\",{\"1\":{\"176\":1}}],[\"的元素\",{\"1\":{\"174\":1}}],[\"的作用是\",{\"1\":{\"149\":2}}],[\"的情况\",{\"1\":{\"149\":1}}],[\"的情景\",{\"1\":{\"108\":1}}],[\"的那种\",{\"1\":{\"149\":1}}],[\"的判断条件非零即真\",{\"1\":{\"133\":1}}],[\"的输出格式还能有更多花样\",{\"1\":{\"121\":1}}],[\"的类型目前尚未解锁\",{\"1\":{\"120\":1}}],[\"的字符时\",{\"1\":{\"116\":1}}],[\"的字符数组\",{\"1\":{\"37\":1}}],[\"的范围来出题\",{\"1\":{\"109\":1}}],[\"的范围内\",{\"1\":{\"17\":2}}],[\"的最大值是\",{\"1\":{\"109\":1}}],[\"的最大可以到多少\",{\"1\":{\"55\":1}}],[\"的变量\",{\"1\":{\"108\":1}}],[\"的变量类型是一样的\",{\"1\":{\"43\":1,\"158\":1}}],[\"的补码\",{\"1\":{\"108\":1}}],[\"的补码就是\",{\"1\":{\"5\":1}}],[\"的余数\",{\"1\":{\"108\":1}}],[\"的二进制表示中\",{\"1\":{\"106\":1}}],[\"的可执行文件\",{\"1\":{\"94\":1}}],[\"的相关插件吗\",{\"1\":{\"94\":1}}],[\"的概念\",{\"1\":{\"91\":1,\"108\":1,\"202\":1}}],[\"的文件\",{\"1\":{\"91\":1}}],[\"的文件夹\",{\"1\":{\"58\":1}}],[\"的软件仓库\",{\"1\":{\"87\":1}}],[\"的配置文件\",{\"1\":{\"198\":2}}],[\"的配置\",{\"1\":{\"85\":1}}],[\"的安装路径\",{\"1\":{\"58\":1}}],[\"的大小也够用\",{\"1\":{\"114\":1}}],[\"的大小范围建议牢记\",{\"1\":{\"109\":1}}],[\"的大部分同学都使用了\",{\"1\":{\"58\":1}}],[\"的大致内容\",{\"1\":{\"8\":1}}],[\"的新项目\",{\"1\":{\"58\":1}}],[\"的循环次数\",{\"1\":{\"55\":1}}],[\"的程序返回值\",{\"1\":{\"52\":1}}],[\"的指向就会始终指向\",{\"1\":{\"203\":1}}],[\"的指向是固定的\",{\"1\":{\"203\":1}}],[\"的指向取决于函数的调用方式\",{\"1\":{\"203\":1}}],[\"的指向\",{\"1\":{\"203\":1}}],[\"的指令\",{\"1\":{\"52\":1}}],[\"的指针变量\",{\"1\":{\"43\":1,\"157\":1}}],[\"的随机整数值\",{\"1\":{\"52\":1}}],[\"的意思\",{\"1\":{\"46\":1,\"133\":1,\"134\":9}}],[\"的问题拆分成更小的同时又能方便解决的问题\",{\"1\":{\"148\":1}}],[\"的问题拆分成更小的同时又是方便解决的问题\",{\"1\":{\"23\":1}}],[\"的问题的了吗\",{\"1\":{\"46\":1}}],[\"的问题\",{\"1\":{\"46\":1,\"201\":1}}],[\"的地址\",{\"1\":{\"43\":1,\"158\":1}}],[\"的地图\",{\"1\":{\"20\":1}}],[\"的符号位可能会让你很头疼\",{\"1\":{\"37\":1}}],[\"的值始终是\",{\"1\":{\"203\":1}}],[\"的值仍然是\",{\"1\":{\"202\":1}}],[\"的值都不匹配\",{\"1\":{\"136\":1}}],[\"的值都会增加\",{\"1\":{\"101\":1}}],[\"的值与任何一个\",{\"1\":{\"136\":1}}],[\"的值\",{\"1\":{\"136\":1}}],[\"的值的范围\",{\"1\":{\"52\":1}}],[\"的值也会随之发生改变\",{\"1\":{\"43\":1,\"158\":1}}],[\"的值将不可预测\",{\"1\":{\"28\":3}}],[\"的值成功的限制在了\",{\"1\":{\"17\":1}}],[\"的数据的随机数程序\",{\"1\":{\"52\":1}}],[\"的数组\",{\"1\":{\"23\":1}}],[\"的数组和\",{\"1\":{\"23\":1}}],[\"的数字按某种顺序排好\",{\"1\":{\"20\":1}}],[\"的数字\",{\"1\":{\"5\":1}}],[\"的全排列问题\",{\"1\":{\"20\":1}}],[\"的乘积等于十进制下的\",{\"1\":{\"17\":1}}],[\"的语句\",{\"1\":{\"14\":1}}],[\"的内容\",{\"1\":{\"5\":1}}],[\"的内存空间\",{\"1\":{\"5\":1,\"105\":1,\"109\":1,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"116\":1,\"118\":1}}],[\"的内存空间是因为\",{\"1\":{\"5\":1}}],[\"的整数数组\",{\"1\":{\"140\":1}}],[\"的整数倍\",{\"1\":{\"5\":1}}],[\"的整型变量\",{\"1\":{\"2\":1}}],[\"的库\",{\"1\":{\"5\":1}}],[\"的ascii值\",{\"1\":{\"5\":1}}],[\"的\",{\"1\":{\"5\":1,\"8\":1,\"43\":1,\"58\":3,\"158\":1,\"176\":1,\"198\":4,\"201\":1}}],[\"的题目\",{\"1\":{\"5\":1}}],[\"的练习题单~\",{\"1\":{\"5\":1}}],[\"的时候要特别注意这点\",{\"1\":{\"82\":1}}],[\"的时候发现利用\",{\"1\":{\"46\":1}}],[\"的时候\",{\"1\":{\"2\":1,\"8\":1}}],[\"的具体意思\",{\"1\":{\"2\":1}}],[\"的其它课程成绩并不是很好\",{\"1\":{\"2\":1}}],[\"和变量命名一样\",{\"1\":{\"146\":1}}],[\"和等于符号\",{\"1\":{\"134\":1}}],[\"和上一个同理\",{\"1\":{\"121\":2}}],[\"和浮点数\",{\"1\":{\"121\":1}}],[\"和一个数加上\",{\"1\":{\"108\":1}}],[\"和静态变量\",{\"1\":{\"101\":1}}],[\"和超时爆空间说拜拜\",{\"0\":{\"55\":1}}],[\"和f\",{\"1\":{\"23\":1}}],[\"和\",{\"0\":{\"46\":1,\"203\":1},\"1\":{\"2\":1,\"5\":9,\"11\":1,\"17\":1,\"23\":2,\"28\":3,\"43\":2,\"46\":2,\"52\":1,\"79\":1,\"85\":1,\"94\":1,\"103\":1,\"108\":1,\"119\":1,\"120\":3,\"125\":1,\"137\":2,\"148\":2,\"149\":4,\"150\":1,\"158\":2,\"175\":1,\"177\":1,\"198\":1,\"202\":2,\"203\":1}}],[\"这应当怎么办呢\",{\"1\":{\"202\":1}}],[\"这说明你定义的样式是作用域的\",{\"1\":{\"198\":1}}],[\"这证明你想要使用\",{\"1\":{\"198\":1}}],[\"这门课程\",{\"1\":{\"192\":1}}],[\"这太难看了\",{\"1\":{\"176\":1}}],[\"这看似无用\",{\"1\":{\"165\":1}}],[\"这显然是不合适的\",{\"1\":{\"149\":1}}],[\"这道题该怎么解决呢\",{\"1\":{\"149\":1}}],[\"这道题会被选在题单里面\",{\"1\":{\"20\":1}}],[\"这把数组中的第一个元素赋值为\",{\"1\":{\"140\":1}}],[\"这创建了一个大小为\",{\"1\":{\"140\":1}}],[\"这两个判断条件可以大大削减搜索空间\",{\"1\":{\"149\":1}}],[\"这两个运算符有说法\",{\"1\":{\"125\":1}}],[\"这两种文件的区别在于\",{\"1\":{\"91\":1}}],[\"这两种函数是我们经常可能要用到的\",{\"1\":{\"43\":1,\"158\":1}}],[\"这会导致它浪费了\",{\"1\":{\"116\":1}}],[\"这种情况使用\",{\"1\":{\"139\":1}}],[\"这种赋值方法\",{\"1\":{\"127\":2}}],[\"这种更加原始的方法\",{\"1\":{\"119\":1}}],[\"这种变量被称为局部变量\",{\"1\":{\"100\":1}}],[\"这种表达方式\",{\"1\":{\"91\":1}}],[\"这句话会在屏幕上输出\",{\"1\":{\"92\":1}}],[\"这句话\",{\"1\":{\"91\":2}}],[\"这意味着读取的字符也包含换行符\",{\"1\":{\"122\":1}}],[\"这意味着右键你的文件并选择在集成终端中打开\",{\"1\":{\"94\":1}}],[\"这意味着编写的时候\",{\"1\":{\"91\":1}}],[\"这意味着你的\",{\"1\":{\"86\":1}}],[\"这意味着换行符和空格也包括在内\",{\"1\":{\"5\":1}}],[\"这本书为我们提供了非常合适的常量\",{\"1\":{\"82\":1}}],[\"这几样东西一摆\",{\"1\":{\"76\":1}}],[\"这只是第一步\",{\"1\":{\"64\":1}}],[\"这并不是很好看\",{\"1\":{\"64\":1}}],[\"这件事做起来很轻松\",{\"1\":{\"64\":1}}],[\"这还用配环境\",{\"1\":{\"61\":1}}],[\"这东西不要太简单\",{\"1\":{\"55\":1}}],[\"这你不超时谁超时\",{\"1\":{\"55\":1}}],[\"这可怎么办呢\",{\"1\":{\"52\":1}}],[\"这可能会导致一些意料之外的结果\",{\"1\":{\"8\":1}}],[\"这么强大的工具\",{\"1\":{\"46\":1}}],[\"这么好用\",{\"1\":{\"34\":1}}],[\"这到底是什么情况\",{\"1\":{\"46\":1}}],[\"这到底是什么意思呢\",{\"1\":{\"23\":1}}],[\"这在平时\",{\"1\":{\"46\":1}}],[\"这在一些题目里面\",{\"1\":{\"20\":1}}],[\"这是项目的根组件\",{\"1\":{\"198\":1}}],[\"这是在一次学术分享活动中\",{\"1\":{\"195\":1}}],[\"这是因为\",{\"1\":{\"93\":1}}],[\"这是\",{\"1\":{\"85\":1,\"198\":5}}],[\"这是对课程\",{\"1\":{\"49\":1}}],[\"这是好习惯\",{\"1\":{\"43\":1,\"158\":1}}],[\"这是一种还算很常用的用来避免重复求解子问题的优化方法\",{\"1\":{\"23\":1}}],[\"这段空间来自堆空间\",{\"1\":{\"43\":1,\"158\":1}}],[\"这点要注意\",{\"1\":{\"43\":1,\"157\":1}}],[\"这就要说到我们的\",{\"1\":{\"94\":1}}],[\"这就过不去时间限制了\",{\"1\":{\"55\":1}}],[\"这就告诉你们\",{\"1\":{\"37\":1}}],[\"这就是你认为的那个\",{\"1\":{\"198\":1}}],[\"这就是\",{\"1\":{\"182\":1}}],[\"这就是归并排序在时间上的复杂度\",{\"1\":{\"55\":1}}],[\"这就是第一题想考察的地方\",{\"1\":{\"37\":1}}],[\"这就是抽象为两层的汉诺塔问题的处理方法\",{\"1\":{\"23\":1,\"148\":1}}],[\"这就是函数的用途所在\",{\"1\":{\"17\":1}}],[\"这怎么能忍\",{\"1\":{\"37\":1}}],[\"这时你又会重新看到原来的那个标题画面\",{\"1\":{\"79\":1}}],[\"这时\",{\"1\":{\"73\":1}}],[\"这时我们既要考虑主角的运动情况\",{\"1\":{\"73\":1}}],[\"这时我们称\",{\"1\":{\"23\":1}}],[\"这时候\",{\"1\":{\"14\":1,\"79\":1}}],[\"这之后我们将最底下的那一层移到终点柱子上\",{\"1\":{\"23\":1,\"148\":1}}],[\"这三个变量的表示的柱子实际上会不断变化\",{\"1\":{\"23\":1,\"148\":1}}],[\"这实际上并不在我们的关心范围内\",{\"1\":{\"23\":1}}],[\"这其实十分重要\",{\"1\":{\"20\":1}}],[\"这\",{\"1\":{\"20\":1}}],[\"这也意味着你的数组在新建时就受限于当前作用域\",{\"1\":{\"43\":1,\"158\":1}}],[\"这也正导致了链表需要更多的内存用来记录与某一个节点相连的其他节点\",{\"1\":{\"31\":1}}],[\"这也正是某\",{\"1\":{\"17\":1}}],[\"这也是为什么\",{\"1\":{\"43\":1,\"106\":1,\"156\":1}}],[\"这也是一个优化的小技巧\",{\"1\":{\"17\":1}}],[\"这也是某\",{\"1\":{\"17\":1}}],[\"这也就直接决定了\",{\"1\":{\"5\":1}}],[\"这有什么用呢\",{\"1\":{\"17\":1}}],[\"这代码当然是个死循环\",{\"1\":{\"17\":1}}],[\"这章主要是要求我们通过函数将代码分块\",{\"1\":{\"17\":1}}],[\"这章主要是考察各位同学对变量类型的把控并使用变量类型及四则运算以及\",{\"1\":{\"5\":1}}],[\"这次还是没有题目做\",{\"1\":{\"34\":1}}],[\"这次依旧没有经过检查\",{\"1\":{\"34\":1}}],[\"这次我们介绍一个很方便但是在\",{\"1\":{\"34\":1}}],[\"这次我们将从全排列问题开始讲起\",{\"1\":{\"20\":1}}],[\"这次只有三道题\",{\"1\":{\"28\":1}}],[\"这次题目的难度可能浮动有点大\",{\"1\":{\"23\":1}}],[\"这次题目选炸了\",{\"1\":{\"23\":1}}],[\"这次题单里面更多的会出现二维数组的题目\",{\"1\":{\"14\":1}}],[\"这次的题单提前\",{\"1\":{\"23\":1}}],[\"这次的题单也许会出现之前题单中出现的题目\",{\"1\":{\"17\":1}}],[\"这次希望大家使用函数的方法来解决这些题目\",{\"1\":{\"17\":1}}],[\"这次是第一次准时推出的c\",{\"1\":{\"17\":1}}],[\"这很有可能是运算过程中产生的结果可能过大\",{\"1\":{\"11\":1}}],[\"这便是递归的原理\",{\"1\":{\"23\":1}}],[\"这便是最基本也是最常见的两种搜索\",{\"1\":{\"20\":1}}],[\"这便是\",{\"1\":{\"8\":1}}],[\"这使得我们开始有能力处理大量的数据\",{\"1\":{\"8\":1}}],[\"这些小方块就是\",{\"1\":{\"182\":1}}],[\"这些元素好像都歪在一边\",{\"1\":{\"175\":1}}],[\"这些参数是要输出的数据\",{\"1\":{\"121\":1}}],[\"这些参数是用于存储输入数据的变量\",{\"1\":{\"120\":1}}],[\"这些操作步骤会被依次执行\",{\"1\":{\"91\":1}}],[\"这些编辑器有\",{\"1\":{\"58\":1}}],[\"这些东西都在\",{\"1\":{\"52\":1}}],[\"这些方法不会与实例进行交互\",{\"1\":{\"27\":1}}],[\"这些if条件之后的语句可以执行\",{\"1\":{\"8\":1}}],[\"这些\",{\"1\":{\"5\":1}}],[\"这样编写\",{\"1\":{\"198\":1}}],[\"这样它就会自动调整外边距\",{\"1\":{\"177\":1}}],[\"这样能更快地找到最短路径\",{\"1\":{\"149\":1}}],[\"这样会继续执行下一个\",{\"1\":{\"136\":1}}],[\"这样代码的可读性会大大提高\",{\"1\":{\"133\":1}}],[\"这样看上去就好多了\",{\"1\":{\"176\":1}}],[\"这样看上去更美观一些\",{\"1\":{\"133\":1}}],[\"这样看上去麻烦\",{\"1\":{\"27\":1}}],[\"这样的语句才行\",{\"1\":{\"133\":1}}],[\"这样的写法对于大部分的二目运算符都可以使用\",{\"1\":{\"127\":1}}],[\"这样写的好处是代码更加简洁\",{\"1\":{\"127\":1}}],[\"这样写就会很好改动\",{\"1\":{\"27\":1}}],[\"这样我们就也可以很轻松地借助相对位置得到绝对位置了\",{\"1\":{\"70\":1}}],[\"这样我们便通过将已经求解过的答案存到一个数组里来避免同一个子问题的重复求解\",{\"1\":{\"23\":1}}],[\"这样既能保证文件只被加载一次\",{\"1\":{\"67\":1}}],[\"这样如何\",{\"1\":{\"64\":1}}],[\"这样种子就会在不断的变化\",{\"1\":{\"52\":1}}],[\"这样做的原理是什么呢\",{\"1\":{\"37\":1}}],[\"这样做在时间上并不合理\",{\"1\":{\"23\":1}}],[\"这样在读入的过程中就自然而然地略过了无关的字符\",{\"1\":{\"46\":1}}],[\"这样在存储时\",{\"1\":{\"28\":1}}],[\"这样在定义变量时\",{\"1\":{\"27\":1}}],[\"这样层层缩小\",{\"1\":{\"23\":1,\"148\":1}}],[\"这样才能保证答案最短\",{\"1\":{\"20\":1}}],[\"这样就完成了对音乐和音效的播放的类的编写\",{\"1\":{\"82\":1}}],[\"这样就造出了一个全自动的判别机\",{\"1\":{\"52\":1}}],[\"这样就写好了一个生成\",{\"1\":{\"52\":1}}],[\"这样就可以实现类似的方法功能了\",{\"1\":{\"27\":1}}],[\"这样就不会走上去了\",{\"1\":{\"20\":1}}],[\"这样就大致讲解了函数的使用方法\",{\"1\":{\"17\":1}}],[\"这样可以更快地提高打字速度\",{\"1\":{\"5\":1}}],[\"这样\",{\"1\":{\"5\":2,\"23\":1,\"86\":1,\"94\":2,\"105\":1,\"120\":1,\"198\":1,\"202\":1}}],[\"这俩货其实根本没必要知道\",{\"1\":{\"5\":1}}],[\"这里仅举例\",{\"1\":{\"202\":1}}],[\"这里还有高手进阶用法\",{\"1\":{\"198\":1}}],[\"这里还有一个更难的例子\",{\"1\":{\"148\":1}}],[\"这里就是编写你的页面和组件的地方\",{\"1\":{\"198\":1}}],[\"这里就不赘述了\",{\"1\":{\"86\":1}}],[\"这里就不介绍\",{\"1\":{\"52\":1}}],[\"这里默认你创建项目时选择了使用\",{\"1\":{\"198\":1}}],[\"这里其实没多少好说的\",{\"1\":{\"181\":1}}],[\"这里不重复叙述了\",{\"1\":{\"198\":1}}],[\"这里不准备提供最基础的\",{\"1\":{\"181\":1}}],[\"这里不可以访问\",{\"1\":{\"100\":1}}],[\"这里\",{\"1\":{\"175\":1}}],[\"这里需要传入指针的指针\",{\"1\":{\"165\":1}}],[\"这里需要输出一个变量\",{\"1\":{\"2\":1}}],[\"这里挑几个比较好用的\",{\"1\":{\"121\":1}}],[\"这里访问不到\",{\"1\":{\"100\":1}}],[\"这里也访问不到\",{\"1\":{\"100\":1}}],[\"这里可以访问到\",{\"1\":{\"100\":1}}],[\"这里可以访问\",{\"1\":{\"100\":2}}],[\"这里暂且不提\",{\"1\":{\"67\":1}}],[\"这里要注意的是\",{\"1\":{\"52\":1}}],[\"这里要特别注意\",{\"1\":{\"52\":1}}],[\"这里了\",{\"1\":{\"49\":1}}],[\"这里假定你没有引用\",{\"1\":{\"46\":1}}],[\"这里举个例子可能会更清楚一点\",{\"1\":{\"46\":1}}],[\"这里我们又要用到\",{\"1\":{\"43\":1,\"158\":1}}],[\"这里的\",{\"1\":{\"43\":2,\"46\":1,\"91\":1,\"120\":1,\"157\":1,\"158\":1,\"203\":2}}],[\"这里演示的是两个方向都能查找的链表\",{\"1\":{\"31\":1}}],[\"这里为了方便\",{\"1\":{\"20\":2}}],[\"这里有一个小技巧就是如果是障碍物\",{\"1\":{\"20\":1}}],[\"这里到处都是重点\",{\"1\":{\"20\":1}}],[\"这里面的操作都会进行一次\",{\"1\":{\"8\":1}}],[\"这里是随便命名\",{\"1\":{\"5\":1}}],[\"这里是某\",{\"1\":{\"2\":1,\"5\":1,\"17\":1,\"23\":1}}],[\"这个概念在操作系统中也有学到\",{\"1\":{\"202\":1}}],[\"这个时候我们将它与\",{\"1\":{\"198\":1}}],[\"这个时候你需要检查你所有的while循环有没有出现恒为真的情况\",{\"1\":{\"55\":1}}],[\"这个时候你可以盯着题目给定的数据范围看\",{\"1\":{\"55\":1}}],[\"这个代码的时间复杂度是指数级的\",{\"1\":{\"149\":1}}],[\"这个数怎么办呢\",{\"1\":{\"106\":1}}],[\"这个数字不用了\",{\"1\":{\"20\":1}}],[\"这个整数\",{\"1\":{\"91\":1}}],[\"这个我们在之后会用到\",{\"1\":{\"91\":1}}],[\"这个文件里有一些我需要用到的函数和变量\",{\"1\":{\"91\":1}}],[\"这个主题颜色很好看\",{\"1\":{\"85\":1}}],[\"这个变量\",{\"1\":{\"55\":1}}],[\"这个变量的地址\",{\"1\":{\"43\":1,\"156\":1}}],[\"这个函数的名称应当加上这个结构体的名称作为前缀\",{\"1\":{\"165\":1}}],[\"这个函数指针指向一个有两个\",{\"1\":{\"159\":1}}],[\"这个函数\",{\"1\":{\"43\":1,\"158\":1}}],[\"这个函数和\",{\"1\":{\"43\":1,\"158\":1}}],[\"这个函数就会直接结束\",{\"1\":{\"17\":1}}],[\"这个操作在某些问题中很常用\",{\"1\":{\"43\":1,\"158\":1}}],[\"这个指针指向的变量\",{\"1\":{\"43\":1,\"158\":1}}],[\"这个指针变量里面\",{\"1\":{\"43\":1,\"158\":1}}],[\"这个动态数组还是很推荐学一学\",{\"1\":{\"34\":1}}],[\"这个就给个提示\",{\"1\":{\"23\":1}}],[\"这个就不给代码了\",{\"1\":{\"23\":1}}],[\"这个二元组为这个数列的一个逆序对\",{\"1\":{\"23\":1}}],[\"这个实际上比汉诺塔问题更加好理解\",{\"1\":{\"23\":1}}],[\"这个可太经典了\",{\"1\":{\"23\":1}}],[\"这个输出自己写\",{\"1\":{\"20\":1}}],[\"这个区间反转\",{\"1\":{\"17\":1}}],[\"这个非常的重要\",{\"1\":{\"17\":1}}],[\"这个不必说\",{\"1\":{\"17\":1}}],[\"这个\",{\"1\":{\"8\":1,\"52\":1}}],[\"这个是值得注意的\",{\"1\":{\"5\":1}}],[\"这个传奇的符号\",{\"1\":{\"2\":1}}],[\"这个很好理解啊\",{\"1\":{\"2\":1}}],[\"这个库来头可不小\",{\"1\":{\"2\":1}}],[\"这一步其实很容易\",{\"1\":{\"58\":1}}],[\"这一步可以直接输出\",{\"1\":{\"23\":1,\"148\":1}}],[\"这一位上原本填的数字不要了\",{\"1\":{\"20\":1}}],[\"这一位具体能填哪些数字由前面已经填过的位置决定\",{\"1\":{\"20\":1}}],[\"这一章的内容实际上在题单\",{\"1\":{\"37\":1}}],[\"这一章的内容貌似确实就该这么多\",{\"1\":{\"2\":1}}],[\"这一章仍然在与上两章内容重复\",{\"1\":{\"14\":1}}],[\"这一章实际上和上一章并没有区别\",{\"1\":{\"11\":1}}],[\"这一\",{\"1\":{\"2\":1}}],[\"这一部分是需要同学们记住的\",{\"1\":{\"2\":1}}],[\"也更易读\",{\"1\":{\"198\":1}}],[\"也是一种非常良好的代码编写规范\",{\"1\":{\"133\":1}}],[\"也会用到\",{\"1\":{\"91\":1}}],[\"也会在你的环境中探测使用它认为最合适的工具链\",{\"1\":{\"58\":1}}],[\"也会在题单的介绍中\",{\"1\":{\"2\":1}}],[\"也太麻烦了吧\",{\"1\":{\"52\":1}}],[\"也即用\",{\"1\":{\"46\":1}}],[\"也能够媲美对象\",{\"1\":{\"27\":1}}],[\"也去听了课\",{\"1\":{\"23\":1}}],[\"也不能走\",{\"1\":{\"20\":1}}],[\"也不要忘了去算一算自己到底用掉了多少空间\",{\"1\":{\"5\":1}}],[\"也就只有把整段代码的逻辑重新过一遍才有可能解决了\",{\"1\":{\"20\":1}}],[\"也就是我们之前提到的那个\",{\"1\":{\"198\":1}}],[\"也就是靠最右边\",{\"1\":{\"177\":1}}],[\"也就是原本要被整除的那个数\",{\"1\":{\"108\":1}}],[\"也就是大家平时碰到的\",{\"1\":{\"46\":1}}],[\"也就是分别用一个\",{\"1\":{\"37\":1}}],[\"也就是使用数组下标那种方式快速访问其中的任意一个元素\",{\"1\":{\"31\":1}}],[\"也就是循环了\",{\"1\":{\"23\":1}}],[\"也就是确定进制那道题\",{\"1\":{\"17\":1}}],[\"也就是说这个音乐播放时需要保证文件一直能够访问到\",{\"1\":{\"82\":1}}],[\"也就是说你每次将序列分成两半\",{\"1\":{\"55\":1}}],[\"也就是说\",{\"1\":{\"17\":1,\"43\":2,\"46\":2,\"52\":1,\"55\":1,\"91\":2,\"158\":2,\"198\":2}}],[\"也就是一个可执行文件\",{\"1\":{\"94\":1}}],[\"也就是一个\",{\"1\":{\"17\":1}}],[\"也就是内存地址是\",{\"1\":{\"5\":1}}],[\"也就是\",{\"1\":{\"5\":2,\"108\":1,\"201\":1,\"202\":1}}],[\"也就是把正数的二进制取反再加\",{\"1\":{\"5\":1}}],[\"也就是2的31次方减去1\",{\"1\":{\"5\":1}}],[\"也可能是字符\",{\"1\":{\"28\":1}}],[\"也可能是浮点数\",{\"1\":{\"28\":1}}],[\"也可能不知道\",{\"1\":{\"5\":1}}],[\"也可以在\",{\"1\":{\"186\":1}}],[\"也可以把函数作为参数传递给另一个函数\",{\"1\":{\"159\":1}}],[\"也可以放在操作数的后面\",{\"1\":{\"125\":1}}],[\"也可以用来控制元素的交互行为\",{\"1\":{\"184\":1}}],[\"也可以用来输入\",{\"1\":{\"121\":1}}],[\"也可以用来填充图上的连通块\",{\"1\":{\"20\":1}}],[\"也可以指定这个函数需要有多少个输入参数\",{\"1\":{\"91\":1}}],[\"也可以前往阅读\",{\"1\":{\"85\":1}}],[\"也可以使用匈牙利命名法\",{\"1\":{\"102\":1}}],[\"也可以使用\",{\"1\":{\"61\":1,\"94\":1}}],[\"也可以不填\",{\"1\":{\"8\":1}}],[\"也可以直接给某个变量附上初值\",{\"1\":{\"8\":1}}],[\"也许也可以让你更有耐心地去debug\",{\"1\":{\"5\":1}}],[\"也有\",{\"1\":{\"5\":1,\"119\":1}}],[\"也学到了基本的interger类型变量的定义\",{\"1\":{\"2\":1}}],[\"cx\",{\"1\":{\"192\":1}}],[\"cursor\",{\"1\":{\"178\":1,\"195\":1}}],[\"center\",{\"1\":{\"175\":10,\"177\":1,\"195\":7}}],[\"class=\",{\"1\":{\"177\":4,\"184\":3,\"195\":15,\"198\":1}}],[\"class\",{\"0\":{\"184\":1},\"1\":{\"174\":3,\"183\":1,\"184\":1}}],[\"clion\",{\"1\":{\"61\":1}}],[\"css和javascript构建\",{\"1\":{\"198\":1}}],[\"css\",{\"0\":{\"173\":1},\"1\":{\"173\":3,\"174\":1,\"177\":2,\"178\":1,\"186\":1,\"195\":2,\"198\":7},\"2\":{\"180\":1,\"194\":1,\"197\":1,\"200\":1}}],[\"calc\",{\"1\":{\"195\":1}}],[\"catch\",{\"1\":{\"202\":6}}],[\"catchall\",{\"1\":{\"198\":1}}],[\"cat\",{\"1\":{\"165\":38}}],[\"catppuccin\",{\"1\":{\"85\":1}}],[\"case\",{\"0\":{\"136\":1},\"1\":{\"102\":2,\"136\":8,\"146\":1,\"164\":1}}],[\"capacity\",{\"1\":{\"34\":5}}],[\"cmakelists\",{\"1\":{\"61\":1}}],[\"ctrl\",{\"1\":{\"58\":1}}],[\"c题的早期版本\",{\"1\":{\"46\":1}}],[\"crlf\",{\"0\":{\"46\":1},\"1\":{\"46\":6}}],[\"createwebhashhistory\",{\"1\":{\"198\":2}}],[\"createrouter\",{\"1\":{\"198\":2}}],[\"createapp\",{\"1\":{\"198\":4}}],[\"create\",{\"1\":{\"27\":1,\"58\":1,\"165\":2,\"202\":2}}],[\"c++stl\",{\"1\":{\"34\":1}}],[\"c++\",{\"0\":{\"170\":1},\"1\":{\"27\":1,\"34\":1,\"46\":1,\"58\":5,\"61\":1,\"85\":4},\"2\":{\"62\":1,\"63\":1,\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"71\":1,\"72\":1,\"74\":1,\"75\":1,\"77\":1,\"78\":1,\"80\":1,\"81\":1,\"83\":1,\"84\":1}}],[\"cycle\",{\"1\":{\"17\":6}}],[\"cookie\",{\"1\":{\"202\":2}}],[\"color\",{\"1\":{\"175\":24,\"176\":1,\"177\":5,\"178\":3,\"186\":1,\"195\":10}}],[\"column\",{\"1\":{\"175\":5,\"195\":3}}],[\"count\",{\"1\":{\"101\":5}}],[\"counter\",{\"1\":{\"101\":3}}],[\"cocos2d\",{\"1\":{\"61\":1}}],[\"code\",{\"1\":{\"52\":4,\"85\":2,\"94\":1}}],[\"console\",{\"1\":{\"202\":10}}],[\"const\",{\"1\":{\"20\":4,\"101\":3,\"120\":1,\"121\":1,\"149\":2,\"165\":1,\"198\":4,\"202\":4,\"203\":3}}],[\"config\",{\"1\":{\"198\":2,\"202\":3}}],[\"controls><\",{\"1\":{\"187\":2}}],[\"container\",{\"1\":{\"184\":1,\"185\":1,\"195\":2}}],[\"content=\",{\"1\":{\"198\":1}}],[\"content<\",{\"1\":{\"189\":1}}],[\"content\",{\"1\":{\"175\":7,\"184\":1,\"185\":1,\"195\":5}}],[\"continue\",{\"1\":{\"8\":1,\"11\":1,\"137\":1}}],[\"condition2\",{\"1\":{\"133\":1}}],[\"condition1\",{\"1\":{\"133\":1}}],[\"condition\",{\"1\":{\"133\":3,\"135\":2,\"137\":6,\"138\":3,\"139\":3}}],[\"com<\",{\"1\":{\"188\":1}}],[\"combo\",{\"1\":{\"133\":1}}],[\"component\",{\"1\":{\"198\":5}}],[\"components\",{\"1\":{\"198\":5}}],[\"compiler\",{\"0\":{\"94\":1}}],[\"compilation\",{\"1\":{\"86\":1,\"87\":1}}],[\"compare\",{\"1\":{\"52\":1}}],[\"com\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1,\"188\":1,\"202\":1}}],[\"cbrt\",{\"1\":{\"5\":1}}],[\"c语言是认识这些东西的\",{\"1\":{\"5\":1}}],[\"children\",{\"1\":{\"198\":2}}],[\"check\",{\"1\":{\"52\":1}}],[\"challenge\",{\"1\":{\"46\":2}}],[\"charset=\",{\"1\":{\"198\":1}}],[\"char\",{\"0\":{\"116\":1},\"1\":{\"5\":7,\"23\":3,\"27\":2,\"28\":1,\"34\":1,\"37\":3,\"46\":1,\"55\":1,\"99\":1,\"103\":1,\"116\":8,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"148\":3,\"164\":2,\"165\":3}}],[\"ch\",{\"1\":{\"5\":2,\"46\":10}}],[\"cpl\",{\"0\":{\"85\":1,\"207\":1,\"210\":1},\"1\":{\"85\":1},\"2\":{\"3\":1,\"4\":1,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"15\":1,\"16\":1,\"18\":1,\"19\":1,\"21\":1,\"22\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"41\":1,\"42\":1,\"44\":1,\"45\":1,\"48\":1,\"51\":1,\"54\":1,\"57\":1,\"60\":1,\"88\":1,\"96\":1,\"129\":1,\"143\":1,\"152\":1,\"161\":1,\"168\":1,\"171\":1}}],[\"cn\",{\"1\":{\"2\":1,\"5\":1,\"8\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"23\":1,\"28\":1,\"31\":1,\"34\":1,\"37\":1,\"40\":1,\"43\":1,\"177\":2,\"195\":1}}],[\"c\",{\"0\":{\"91\":1,\"94\":1,\"208\":1,\"209\":1},\"1\":{\"2\":2,\"5\":5,\"8\":1,\"17\":2,\"23\":10,\"27\":2,\"34\":1,\"43\":3,\"46\":1,\"52\":1,\"55\":2,\"58\":4,\"85\":10,\"86\":3,\"91\":13,\"92\":2,\"93\":1,\"94\":2,\"95\":1,\"99\":3,\"101\":1,\"102\":1,\"103\":3,\"114\":1,\"116\":1,\"119\":1,\"120\":1,\"122\":3,\"123\":5,\"125\":2,\"133\":2,\"134\":1,\"135\":1,\"137\":2,\"141\":1,\"146\":1,\"148\":10,\"155\":2,\"158\":1,\"164\":3,\"165\":1},\"2\":{\"47\":1,\"50\":1,\"53\":1,\"56\":1,\"59\":1,\"89\":1,\"97\":1,\"130\":1,\"144\":1,\"153\":1,\"162\":1,\"169\":1,\"172\":1}}],[\"cq\",{\"0\":{\"40\":1},\"1\":{\"2\":7,\"5\":7,\"8\":2,\"11\":2,\"17\":6,\"20\":2,\"23\":10,\"26\":1,\"46\":3,\"52\":4,\"55\":2}}],[\"在普通函数中\",{\"1\":{\"203\":1}}],[\"在其它地方都不使用\",{\"1\":{\"202\":1}}],[\"在其中加入token\",{\"1\":{\"202\":1}}],[\"在其中我们可以看到\",{\"1\":{\"23\":1}}],[\"在其中可以直接定义一个变量\",{\"1\":{\"8\":1}}],[\"在需要等待响应或者等待其他协程的时候\",{\"1\":{\"202\":1}}],[\"在浏览器中\",{\"1\":{\"202\":1}}],[\"在路由跳转之前添加了拦截器\",{\"1\":{\"198\":1}}],[\"在不同的路由下\",{\"1\":{\"198\":1}}],[\"在经过\",{\"1\":{\"192\":1}}],[\"在面向对象编程中\",{\"1\":{\"165\":1}}],[\"在上面的代码中\",{\"1\":{\"159\":1}}],[\"在上面的例子中\",{\"1\":{\"148\":2,\"203\":1}}],[\"在上一次介绍中我们在文末说到了这样一段话\",{\"1\":{\"37\":1}}],[\"在编写逻辑判断语句的时候\",{\"1\":{\"133\":1}}],[\"在执行顺序看上去\",{\"1\":{\"133\":1}}],[\"在一个协程中\",{\"1\":{\"202\":1}}],[\"在一个数列中\",{\"1\":{\"23\":1}}],[\"在一些可以用位运算符替代算术运算的地方\",{\"1\":{\"126\":1}}],[\"在字符串中\",{\"1\":{\"121\":1}}],[\"在整除\",{\"1\":{\"108\":1}}],[\"在同时整除三之后\",{\"1\":{\"108\":1}}],[\"在二进制上\",{\"1\":{\"108\":1}}],[\"在二维图上的路径搜索\",{\"1\":{\"20\":1}}],[\"在声明静态变量时\",{\"1\":{\"101\":1}}],[\"在声明常量时\",{\"1\":{\"101\":1}}],[\"在计算机中\",{\"1\":{\"99\":1}}],[\"在右上角点击\",{\"1\":{\"94\":1}}],[\"在你代码所在的文件夹打开终端\",{\"1\":{\"94\":1}}],[\"在你的代码中使用缩进\",{\"0\":{\"93\":1}}],[\"在你的代码中使用注释\",{\"0\":{\"92\":1}}],[\"在你想用的时候\",{\"1\":{\"17\":1}}],[\"在我们的印象里\",{\"1\":{\"91\":1}}],[\"在高中\",{\"1\":{\"91\":1}}],[\"在高级语言中不建议使用\",{\"1\":{\"14\":1}}],[\"在命令行中输入\",{\"1\":{\"86\":1,\"87\":1}}],[\"在命令行中运行以下命令来使用\",{\"1\":{\"58\":1}}],[\"在左侧选择\",{\"1\":{\"86\":1}}],[\"在搜索栏中搜索\",{\"1\":{\"86\":1}}],[\"在之后销毁掉换成另一段\",{\"1\":{\"82\":1}}],[\"在之后的\",{\"1\":{\"34\":1}}],[\"在游戏每帧的更新过程中对所有不同类型的实体\",{\"1\":{\"76\":1}}],[\"在游戏中我们时常能见到某个实体围绕另一个实体做运动\",{\"1\":{\"73\":1}}],[\"在此不多说\",{\"1\":{\"58\":1}}],[\"在数据都是非负整数的情况下甚至可以舍去这条判断\",{\"1\":{\"46\":1}}],[\"在数组的第\",{\"1\":{\"34\":1}}],[\"在数组尾部删除一个元素\",{\"1\":{\"34\":1}}],[\"在数组尾部添加一个元素\",{\"1\":{\"34\":1}}],[\"在捣鬼\",{\"1\":{\"46\":1}}],[\"在main函数中↓\",{\"1\":{\"43\":1,\"158\":1}}],[\"在第二题当中\",{\"1\":{\"37\":1}}],[\"在pos指向的元素之后添加一个新的元素\",{\"1\":{\"31\":1}}],[\"在销毁时做一些清理工作\",{\"1\":{\"27\":1}}],[\"在创建结构体变量实例时\",{\"1\":{\"27\":1}}],[\"在具体使用的时候\",{\"1\":{\"27\":1}}],[\"在递归的过程中\",{\"1\":{\"23\":1,\"148\":1}}],[\"在与同学观看的时候发现了代码中的错误\",{\"1\":{\"20\":1}}],[\"在全排列这一代码的基础上稍加修改\",{\"1\":{\"20\":1}}],[\"在求解下一个子问题之前一定要把当前子问题对之后子问题求解造成的影响记下来\",{\"1\":{\"20\":1}}],[\"在每个递归的子问题当中\",{\"1\":{\"20\":1}}],[\"在每次循环结束并完成\",{\"1\":{\"8\":1}}],[\"在每次循环结束的时候\",{\"1\":{\"8\":1}}],[\"在函数被调用的时候\",{\"1\":{\"91\":1}}],[\"在函数的使用过程中\",{\"1\":{\"17\":1}}],[\"在函数中没有变量与之重名的情况下\",{\"1\":{\"17\":1}}],[\"在主函数中可以直接调用这个函数来实现这个操作\",{\"1\":{\"17\":1}}],[\"在运算过程中随时取模\",{\"1\":{\"11\":1}}],[\"在使用过后也指定销毁方法\",{\"1\":{\"27\":1}}],[\"在使用时\",{\"1\":{\"27\":1}}],[\"在使用\",{\"1\":{\"8\":1,\"116\":1}}],[\"在使用之前\",{\"1\":{\"5\":1}}],[\"在这道题的数据范围可以达到\",{\"1\":{\"149\":1}}],[\"在这个例子中\",{\"1\":{\"202\":1}}],[\"在这个时候\",{\"1\":{\"106\":1}}],[\"在这个平面上不同位置发出的声音\",{\"1\":{\"82\":1}}],[\"在这之后我们将造出一系列轮子\",{\"1\":{\"64\":1}}],[\"在这里首先放上了\",{\"1\":{\"198\":1}}],[\"在这里以\",{\"1\":{\"198\":1}}],[\"在这里就可以看作是\",{\"1\":{\"108\":1}}],[\"在这里就不重复放这道题的具体解法了\",{\"1\":{\"20\":1}}],[\"在这里\",{\"1\":{\"91\":1}}],[\"在这里又是一种特殊的函数\",{\"1\":{\"91\":1}}],[\"在这里特别需要注意的是\",{\"1\":{\"82\":1}}],[\"在这里需要注意的是\",{\"1\":{\"82\":1}}],[\"在这里我们仅对一些易错点介绍\",{\"1\":{\"201\":1}}],[\"在这里我们不接触这个部分\",{\"1\":{\"198\":1}}],[\"在这里我们只说最简单的方法\",{\"1\":{\"86\":1}}],[\"在这里我们实际上还没有准备任何的音乐\",{\"1\":{\"82\":1}}],[\"在这里我们以\",{\"1\":{\"58\":1}}],[\"在这里我们假定数据范围是\",{\"1\":{\"52\":1}}],[\"在这里我们注意到几个问题\",{\"1\":{\"20\":1}}],[\"在这里提一嘴\",{\"1\":{\"52\":1}}],[\"在这里某\",{\"1\":{\"26\":1}}],[\"在这周的\",{\"1\":{\"17\":1}}],[\"在这周的课程中\",{\"1\":{\"2\":1}}],[\"在这一章中我们学会了\",{\"1\":{\"8\":1}}],[\"在答疑中发现有人尝试用字符存大于\",{\"1\":{\"5\":1}}],[\"在\",{\"1\":{\"5\":1,\"17\":2,\"34\":1,\"46\":1,\"55\":1,\"58\":1,\"86\":2,\"87\":1,\"91\":1,\"92\":1,\"94\":2,\"99\":1,\"102\":1,\"103\":1,\"116\":1,\"119\":1,\"137\":1,\"198\":4,\"203\":1}}],[\"在学完语言开始将算法之后会详细讲解\",{\"1\":{\"150\":1}}],[\"在学完\",{\"1\":{\"2\":1}}],[\"在课程中\",{\"1\":{\"2\":1}}],[\"在某\",{\"1\":{\"2\":1}}],[\"仍然会当天课程的情况下\",{\"1\":{\"2\":1}}],[\"某cqの奇妙冒险\",{\"1\":{\"40\":1}}],[\"某个子问题的求解不会被之后求解的另一个子问题所影响\",{\"1\":{\"20\":1}}],[\"某\",{\"0\":{\"40\":1},\"1\":{\"2\":4,\"5\":2,\"8\":2,\"17\":3,\"20\":1,\"23\":8,\"46\":1,\"52\":2,\"55\":2}}],[\"我分享的\",{\"1\":{\"195\":1}}],[\"我决定写一个系列的文章\",{\"1\":{\"192\":1}}],[\"我如果想实现一个面板一样的\",{\"1\":{\"176\":1}}],[\"我现在有一个\",{\"1\":{\"176\":1}}],[\"我一个一个输出啊\",{\"1\":{\"137\":1}}],[\"我要引入一个叫做\",{\"1\":{\"91\":1}}],[\"我就想用这个\",{\"1\":{\"61\":1}}],[\"我可不管\",{\"1\":{\"61\":1}}],[\"我在\",{\"1\":{\"58\":1}}],[\"我把项目放在\",{\"1\":{\"49\":1}}],[\"我将代码都留了下来\",{\"1\":{\"49\":1}}],[\"我这恰好一不小心花了点时间写了一个小项目\",{\"1\":{\"49\":1}}],[\"我来助你\",{\"0\":{\"49\":1}}],[\"我真的错了\",{\"1\":{\"46\":1}}],[\"我相信大家都不想到处花上好几行的代码来实现它\",{\"1\":{\"43\":1,\"158\":1}}],[\"我警告过你了\",{\"1\":{\"34\":1,\"85\":1}}],[\"我每次求解出其中一个子问题就把它存到一个数组里边\",{\"1\":{\"23\":1}}],[\"我不会\",{\"1\":{\"61\":1}}],[\"我不知道\",{\"1\":{\"61\":1}}],[\"我不说是谁\",{\"1\":{\"34\":1}}],[\"我不说是哪道题\",{\"1\":{\"31\":1}}],[\"我不到啊\",{\"1\":{\"23\":1}}],[\"我不是佬\",{\"1\":{\"2\":1}}],[\"我是多少\",{\"1\":{\"23\":1}}],[\"我们再来看项目的主体内容\",{\"1\":{\"198\":1}}],[\"我们软工\",{\"1\":{\"198\":1}}],[\"我们首先先需要了解\",{\"1\":{\"198\":1}}],[\"我们应当怎样编写页面呢\",{\"1\":{\"198\":1}}],[\"我们已经将\",{\"1\":{\"198\":1}}],[\"我们已经准备好编译运行我们的\",{\"1\":{\"58\":1}}],[\"我们使用\",{\"1\":{\"175\":1}}],[\"我们使用malloc来申请内存\",{\"1\":{\"37\":1}}],[\"我们建议使用\",{\"1\":{\"165\":1}}],[\"我们建立的是指针变量\",{\"1\":{\"43\":1,\"157\":1}}],[\"我们通过函数指针\",{\"1\":{\"159\":1}}],[\"我们定义了一个\",{\"1\":{\"159\":1}}],[\"我们定义了一个函数\",{\"1\":{\"147\":1}}],[\"我们要求解斐波那契数列的第\",{\"1\":{\"150\":1}}],[\"我们要找到最短路径\",{\"1\":{\"20\":1}}],[\"我们添加了两个判断条件\",{\"1\":{\"149\":1}}],[\"我们设置了\",{\"1\":{\"148\":1}}],[\"我们这里再回顾一下\",{\"1\":{\"146\":1}}],[\"我们之前已经提过\",{\"1\":{\"146\":1}}],[\"我们找到最小的一个正整数\",{\"1\":{\"108\":1}}],[\"我们学过\",{\"1\":{\"91\":1}}],[\"我们学会了\",{\"1\":{\"2\":1}}],[\"我们能够很轻松地看懂\",{\"1\":{\"91\":1}}],[\"我们能像说话一样很清晰地表达自己的意思\",{\"1\":{\"91\":1}}],[\"我们直接使用\",{\"1\":{\"86\":1}}],[\"我们直接用上\",{\"1\":{\"82\":1}}],[\"我们直接输出移动方式就行了\",{\"1\":{\"23\":1,\"148\":1}}],[\"我们有必要写两个类来分别处理音乐和音效\",{\"1\":{\"82\":1}}],[\"我们有时想要让下层的界面也要显示出来\",{\"1\":{\"79\":1}}],[\"我们想要达成这个简单的压入弹出\",{\"1\":{\"79\":1}}],[\"我们想要优化搜索\",{\"1\":{\"20\":1}}],[\"我们游戏的场景之间的切换\",{\"1\":{\"79\":1}}],[\"我们引入指令系统\",{\"1\":{\"76\":1}}],[\"我们借着scenenode顺便实现一下实体类\",{\"1\":{\"73\":1}}],[\"我们甚至能为这个闪电球再添加围绕它的别的什么球\",{\"1\":{\"73\":1}}],[\"我们甚至可以利用空间限制来另辟蹊径\",{\"1\":{\"55\":1}}],[\"我们把闪电球作为子节点连接到主角上\",{\"1\":{\"73\":1}}],[\"我们把它想象成一个有限长的数列\",{\"1\":{\"8\":1}}],[\"我们显然需要一个单独的东西来处理游戏音乐和音效的\",{\"1\":{\"67\":1}}],[\"我们尽量把这些过程都拆开\",{\"1\":{\"64\":1}}],[\"我们为什么不把它重新包装一下\",{\"1\":{\"64\":1}}],[\"我们以\",{\"1\":{\"58\":1}}],[\"我们以上面的\",{\"1\":{\"17\":1}}],[\"我们来具体解析几个陌生的东西\",{\"1\":{\"52\":1}}],[\"我们来分析一下函数的定义方法\",{\"1\":{\"17\":1}}],[\"我们都知道\",{\"1\":{\"79\":1}}],[\"我们都非常清楚\",{\"1\":{\"46\":1}}],[\"我们都清楚这次的\",{\"1\":{\"37\":1}}],[\"我们并无法确定出题人用的是\",{\"1\":{\"46\":1}}],[\"我们用\",{\"1\":{\"43\":1,\"158\":1}}],[\"我们用不同数据类型的指针指向这个变量\",{\"1\":{\"37\":1}}],[\"我们怎么来使用\",{\"1\":{\"43\":1,\"158\":1}}],[\"我们现在得到了变量\",{\"1\":{\"43\":1,\"158\":1}}],[\"我们现在还无法理解\",{\"1\":{\"2\":1}}],[\"我们假设它是\",{\"1\":{\"43\":1,\"156\":1}}],[\"我们注意到上面的malloc申请的实际上是一段连续的内存\",{\"1\":{\"37\":1}}],[\"我们创建一个\",{\"1\":{\"27\":1}}],[\"我们知道一个\",{\"1\":{\"55\":1}}],[\"我们知道数组的名字就是指向它第一个元素的指针\",{\"1\":{\"37\":1,\"43\":1,\"158\":1}}],[\"我们知道\",{\"1\":{\"27\":1,\"43\":1,\"158\":1}}],[\"我们知道自己是1\",{\"1\":{\"23\":1}}],[\"我们不是碰到无关的就跳过\",{\"1\":{\"46\":1}}],[\"我们不想用它\",{\"1\":{\"23\":1}}],[\"我们不知道它是多少\",{\"1\":{\"23\":1}}],[\"我们一定要解决所有的逆序对才行\",{\"1\":{\"23\":1}}],[\"我们一直在写的\",{\"1\":{\"17\":1}}],[\"我们实际上等价于对整个数组循环一边\",{\"1\":{\"23\":1}}],[\"我们得先清楚我们要从哪里开始画\",{\"1\":{\"79\":1}}],[\"我们得先把上面那个盘子移到中间柱子上面\",{\"1\":{\"23\":1,\"148\":1}}],[\"我们得有最小的问题的答案\",{\"1\":{\"23\":1}}],[\"我们先给出答案\",{\"1\":{\"149\":1}}],[\"我们先不管这段代码的语法结构等\",{\"1\":{\"91\":1}}],[\"我们先写出类似学习sdl时的游戏结构\",{\"1\":{\"64\":1}}],[\"我们先解释一下归并排序的具体原理\",{\"1\":{\"23\":1}}],[\"我们先将\",{\"1\":{\"23\":1,\"148\":1}}],[\"我们先来找边界条件\",{\"1\":{\"23\":1,\"148\":1}}],[\"我们先用递归的思路来考虑这个问题\",{\"1\":{\"20\":1}}],[\"我们还是得好好理解为什么可以这样写\",{\"1\":{\"37\":1}}],[\"我们还是用斐波那契数列来举例子\",{\"1\":{\"23\":1}}],[\"我们还学习了数组\",{\"1\":{\"8\":1}}],[\"我们该怎么处理\",{\"1\":{\"23\":1}}],[\"我们肯定少不了前两项\",{\"1\":{\"23\":1}}],[\"我们肯定得从斐波那契数列讲起\",{\"1\":{\"23\":1}}],[\"我们去掉了一些没必要的搜索\",{\"1\":{\"20\":1}}],[\"我们去填下一位\",{\"1\":{\"20\":1}}],[\"我们稍微修改一下上面的代码\",{\"1\":{\"20\":1}}],[\"我们按照\",{\"1\":{\"20\":1}}],[\"我们便只需要考虑球的旋转就行\",{\"1\":{\"73\":1}}],[\"我们便实现了一个简单的操作\",{\"1\":{\"17\":1}}],[\"我们便能对大量的数据进行处理\",{\"1\":{\"8\":1}}],[\"我们将选择最力大砖飞的设计方式\",{\"1\":{\"175\":1}}],[\"我们将n层的问题\",{\"1\":{\"23\":1}}],[\"我们将\",{\"1\":{\"17\":1,\"148\":2}}],[\"我们可以实现一个简单的动画效果\",{\"1\":{\"178\":1}}],[\"我们可以实现很多高级功能\",{\"1\":{\"43\":1,\"155\":1}}],[\"我们可以让之前设计的那个卡片在鼠标悬浮时改变一些状态\",{\"1\":{\"178\":1}}],[\"我们可以使用\",{\"1\":{\"175\":1,\"202\":1}}],[\"我们可以使用函数指针来申明一些结构体成员\",{\"1\":{\"27\":1}}],[\"我们可以调用函数\",{\"1\":{\"159\":1}}],[\"我们可以从\",{\"1\":{\"150\":1}}],[\"我们可以写出以下代码\",{\"1\":{\"148\":1}}],[\"我们可以写一些更方便的函数来让我们的代码更加简洁\",{\"1\":{\"43\":1,\"158\":1}}],[\"我们可以这样写\",{\"1\":{\"133\":1}}],[\"我们可以指定这个函数的结果格式\",{\"1\":{\"91\":1}}],[\"我们可以用三目运算符来写一个求绝对值的操作\",{\"1\":{\"135\":1}}],[\"我们可以用\",{\"1\":{\"73\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"141\":1}}],[\"我们可以给每一个加载的内容都带上一个特殊的id\",{\"1\":{\"67\":1}}],[\"我们可以分出大概\",{\"1\":{\"55\":1}}],[\"我们可以找到\",{\"1\":{\"43\":1,\"158\":1}}],[\"我们可以利用这个swap函数来将某个和这个函数没有半毛钱关系的变量交换值\",{\"1\":{\"43\":1,\"158\":1}}],[\"我们可以将函数赋值给这些成员\",{\"1\":{\"27\":1}}],[\"我们可以更加形象地解释一下\",{\"1\":{\"23\":1}}],[\"我们可以通过以下方式调用这个函数\",{\"1\":{\"147\":1}}],[\"我们可以通过\",{\"1\":{\"11\":1}}],[\"我们可以看出\",{\"1\":{\"5\":1}}],[\"我们在这里设计一个导航栏\",{\"1\":{\"177\":1}}],[\"我们在这里就不说如何安装\",{\"1\":{\"87\":1}}],[\"我们在环境配置中配置了\",{\"1\":{\"94\":1}}],[\"我们在大括号中指定一系列函数的操作步骤\",{\"1\":{\"91\":1}}],[\"我们在说话的时候\",{\"1\":{\"91\":1}}],[\"我们在\",{\"1\":{\"17\":1}}],[\"我们在结尾附上位运算的运算法则\",{\"1\":{\"8\":1}}],[\"我们在后面加上方括号\",{\"1\":{\"8\":1}}],[\"我们在程序中输入输出都离不开它\",{\"1\":{\"2\":1}}],[\"我们也不可能找到一条路径\",{\"1\":{\"149\":1}}],[\"我们也不可能找到更短的路径\",{\"1\":{\"149\":1}}],[\"我们也可以从起点反过来推\",{\"1\":{\"149\":1}}],[\"我们也知道\",{\"1\":{\"148\":1}}],[\"我们也能参照\",{\"1\":{\"87\":1}}],[\"我们也需要通过指定位置来调用某一个元素\",{\"1\":{\"8\":1}}],[\"我们也学到了基本的输入输出指令\",{\"1\":{\"2\":1}}],[\"我们需要找到削减搜索空间的方法\",{\"1\":{\"149\":1}}],[\"我们需要找到一个方法\",{\"1\":{\"148\":1}}],[\"我们需要在递归的过程中设置一个终止条件\",{\"1\":{\"148\":1}}],[\"我们需要计算斐波那契数列的第\",{\"1\":{\"148\":1}}],[\"我们需要使用\",{\"1\":{\"87\":1}}],[\"我们需要根据4中的树形编排方式再实现一点点东西\",{\"1\":{\"70\":1}}],[\"我们需要开一个长度为\",{\"1\":{\"37\":1}}],[\"我们需要特别注意这一点\",{\"1\":{\"17\":1}}],[\"我们需要提前指定这个数组的大小\",{\"1\":{\"8\":1}}],[\"我们需要相对于原来的语句额外缩进一个\",{\"1\":{\"5\":1}}],[\"我们就直接\",{\"1\":{\"52\":1}}],[\"我们就直接输出\",{\"1\":{\"20\":1}}],[\"我们就可以根据不同题目的输入要求来构造大量的随机数据啦\",{\"1\":{\"52\":1}}],[\"我们就可以使用\",{\"1\":{\"5\":2}}],[\"我们就拿它来举例\",{\"1\":{\"37\":1}}],[\"我们就不需要进一步考虑下一个子问题了\",{\"1\":{\"20\":1}}],[\"我们就能得出求解八皇后问题的方法\",{\"1\":{\"20\":1}}],[\"我们就能定义一个名为\",{\"1\":{\"2\":1}}],[\"我们又学了赋值语句和基本的四则运算\",{\"1\":{\"2\":1}}],[\"我们只是想不允许下一层内容更新\",{\"1\":{\"79\":1}}],[\"我们只需要在仓库中找到对应的库名\",{\"1\":{\"58\":1}}],[\"我们只需要知道\",{\"1\":{\"2\":1}}],[\"我们只要处理当前这一位我们要填什么\",{\"1\":{\"20\":1}}],[\"我们只要写出一行\",{\"1\":{\"2\":1}}],[\"我们每周的c语言课后会尽快在洛谷挑选一些适合大家练习的题目\",{\"1\":{\"2\":1}}],[\"我们的oj题目与上课内容脱节\",{\"1\":{\"2\":1}}],[\"0\",{\"0\":{\"2\":1},\"1\":{\"2\":4,\"5\":8,\"8\":24,\"14\":3,\"17\":2,\"20\":12,\"23\":1,\"31\":1,\"34\":6,\"37\":2,\"46\":3,\"52\":3,\"91\":5,\"92\":1,\"93\":1,\"101\":2,\"105\":1,\"106\":3,\"118\":1,\"128\":1,\"133\":3,\"134\":4,\"135\":2,\"136\":3,\"137\":1,\"138\":2,\"139\":2,\"140\":5,\"141\":2,\"147\":1,\"149\":22,\"159\":1,\"165\":2,\"176\":4,\"177\":10,\"195\":35,\"198\":1,\"203\":2}}]],\"version\":2}}")).map(([e,t])=>[e,jn(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:s,id:r}})=>{const o=An[n];e==="suggest"?self.postMessage([e,r,Et(t,o,s)]):e==="search"?self.postMessage([e,r,vt(t,o,s,"max")]):self.postMessage({suggestions:[e,r,Et(t,o,s)],results:[e,r,vt(t,o,s,__SLIMSEARCH_SORT_STRATEGY__)]})};
//# sourceMappingURL=index.js.map
