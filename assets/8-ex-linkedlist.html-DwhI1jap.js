import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as e}from"./app-D1XJgs_q.js";const t={};function o(l,s){return e(),a("div",null,s[0]||(s[0]=[p(`<p>链表在需要节省内存空间，同时不需要进行随机寻址操作时（也就是使用数组下标那种方式快速访问其中的任意一个元素），是非常优秀的数据结构。</p><p>要想看懂它，实际上一段代码就足够：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 链表的特点在于它占用的内存不像数组那样是连续的，</span></span>
<span class="line"><span class="token comment">// 这也正导致了链表需要更多的内存用来记录与某一个节点相连的其他节点，且不能直接调用链表当中某个元素的值</span></span>
<span class="line"><span class="token comment">// 但是链表的好处在于它的内存是动态的，而且从头到尾顺序访问并不受影响</span></span>
<span class="line"><span class="token comment">// 单独链表的应用范围，抛开没有不谈，还是有一点的</span></span>
<span class="line"><span class="token comment">// 比如说某些非逼你需要动态维护数组大小的（我不说是哪道题，自己心里清楚</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 单个链表节点，这里演示的是两个方向都能查找的链表</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token class-name">list_node_t</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">int</span> data<span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">list_node_t</span> <span class="token operator">*</span>prev<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在pos指向的元素之后添加一个新的元素</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">list_node_t</span> <span class="token operator">*</span>pos<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">list_node_t</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">list_node_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	node<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> pos<span class="token punctuation">;</span></span>
<span class="line">	node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pos<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">		pos<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">	pos<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">	node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 删除pos指向的元素</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">list_node_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">-&gt;</span>prev <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">		pos<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pos<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">		pos<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> pos<span class="token operator">-&gt;</span>prev<span class="token punctuation">;</span></span>
<span class="line">	<span class="token function">free</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 新建一个节点指向链表的开头以方便链表的遍历和添加删除。</span></span>
<span class="line">	<span class="token class-name">list_node_t</span> <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">list_node_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	list<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">	list<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">	list<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token number">114514</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 代码未经检查，如果有误自己去改，意思到了（</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>题单链接：</p><p><a href="https://www.luogu.com.cn/training/252209" target="_blank" rel="noopener noreferrer">南哪2022-8-pointer EX 手搓链表 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>然而这也没有题……</p>`,6)]))}const r=n(t,[["render",o]]),u=JSON.parse(`{"path":"/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/8-ex-linkedlist.html","title":"南哪 2022-8-pointer EX 手搓链表","lang":"zh-CN","frontmatter":{"title":"南哪 2022-8-pointer EX 手搓链表","date":"2022-11-18T00:00:00.000Z","icon":"face-grin-beam-sweat","order":13,"category":["CPL DotOJ 补完计划"],"tag":["CPL","DotOJ"],"author":"Kingcq","description":"链表在需要节省内存空间，同时不需要进行随机寻址操作时（也就是使用数组下标那种方式快速访问其中的任意一个元素），是非常优秀的数据结构。 要想看懂它，实际上一段代码就足够： 题单链接： 南哪2022-8-pointer EX 手搓链表 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) 然而这也没有题……","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"南哪 2022-8-pointer EX 手搓链表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-28T11:31:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/8-ex-linkedlist.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"南哪 2022-8-pointer EX 手搓链表"}],["meta",{"property":"og:description","content":"链表在需要节省内存空间，同时不需要进行随机寻址操作时（也就是使用数组下标那种方式快速访问其中的任意一个元素），是非常优秀的数据结构。 要想看懂它，实际上一段代码就足够： 题单链接： 南哪2022-8-pointer EX 手搓链表 - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) 然而这也没有题……"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T11:31:29.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"DotOJ"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:published_time","content":"2022-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T11:31:29.000Z"}]]},"git":{"createdTime":1738740544000,"updatedTime":1753702289000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":3,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"posts/CPL-DotOJ-补完计划/8-ex-linkedlist.md","excerpt":"<p>链表在需要节省内存空间，同时不需要进行随机寻址操作时（也就是使用数组下标那种方式快速访问其中的任意一个元素），是非常优秀的数据结构。</p>\\n<p>要想看懂它，实际上一段代码就足够：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span></span>\\n<span class=\\"line\\"><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdlib.h&gt;</span></span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 链表的特点在于它占用的内存不像数组那样是连续的，</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 这也正导致了链表需要更多的内存用来记录与某一个节点相连的其他节点，且不能直接调用链表当中某个元素的值</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 但是链表的好处在于它的内存是动态的，而且从头到尾顺序访问并不受影响</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 单独链表的应用范围，抛开没有不谈，还是有一点的</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 比如说某些非逼你需要动态维护数组大小的（我不说是哪道题，自己心里清楚</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 单个链表节点，这里演示的是两个方向都能查找的链表</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">list_node</span> <span class=\\"token class-name\\">list_node_t</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">list_node</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">int</span> data<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token class-name\\">list_node_t</span> <span class=\\"token operator\\">*</span>prev<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>next<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 在pos指向的元素之后添加一个新的元素</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">list_node_t</span> <span class=\\"token operator\\">*</span>pos<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token class-name\\">list_node_t</span> <span class=\\"token operator\\">*</span>node <span class=\\"token operator\\">=</span> <span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">list_node_t</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\tnode<span class=\\"token operator\\">-&gt;</span>prev <span class=\\"token operator\\">=</span> pos<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\tnode<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> pos<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>pos<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">!=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\t\\tpos<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token operator\\">-&gt;</span>prev <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\tpos<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\tnode<span class=\\"token operator\\">-&gt;</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 删除pos指向的元素</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">del</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">list_node_t</span> <span class=\\"token operator\\">*</span>pos<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>pos<span class=\\"token operator\\">-&gt;</span>prev <span class=\\"token operator\\">!=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\t\\tpos<span class=\\"token operator\\">-&gt;</span>prev<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> pos<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>pos<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">!=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">\\t\\tpos<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token operator\\">-&gt;</span>prev <span class=\\"token operator\\">=</span> pos<span class=\\"token operator\\">-&gt;</span>prev<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>pos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">// 新建一个节点指向链表的开头以方便链表的遍历和添加删除。</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token class-name\\">list_node_t</span> <span class=\\"token operator\\">*</span>list <span class=\\"token operator\\">=</span> <span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">list_node_t</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\tlist<span class=\\"token operator\\">-&gt;</span>prev <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\tlist<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\tlist<span class=\\"token operator\\">-&gt;</span>data <span class=\\"token operator\\">=</span> <span class=\\"token number\\">114514</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 代码未经检查，如果有误自己去改，意思到了（</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{r as comp,u as data};
