import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as i,o as a}from"./app-BGVLH4Lj.js";const c="/assets/6-1-Gi-ZglIC.jpeg",p="/assets/6-2-C55PKD8j.jpeg",n="/assets/6-3-DmrUX8GJ.jpeg",r="/assets/6-4-DtKZTYl0.jpeg",s="/assets/6-5-cFQ9Ctbq.jpeg",g={};function d(m,t){return a(),o("div",null,t[0]||(t[0]=[i('<p>我们都知道，我们游戏的场景之间的切换，都是依靠一个栈来实现。一个很简单的例子，当你启动游戏的时候，将标题画面的内容压入一个栈，当你选择开始游玩，将游戏的内容继续压入，当你结束游戏，游戏内容从栈中弹出，这时你又会重新看到原来的那个标题画面，我们想要达成这个简单的压入弹出。</p><p>那想法就很简单了，写一个栈！然后把各种界面都整成同一种通用类型的子类往里面压入不就完事了？行，开写。</p><p><code>StateStack</code> 类：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还有 <code>State</code> 类：</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>照着写就完事了。</p><p>不过有需要注意的一点：</p><p>当游戏画面渲染的时候，我们有时想要让下层的界面也要显示出来，比如游戏暂停的时候，我们只是想不允许下一层内容更新，但是在画面上我们仍想要看到下一层内容，因为我们想要的暂停效果只不过是给画面蒙上一层灰色透明的长方形，然后在正当中贴上一个 <code>PAUSE</code> 而已。</p><p>这时候 <code>State</code> 里面 <code>update</code> 和 <code>handleEvent</code> 以及 <code>isLowerStateVisible</code> 返回的 <code>bool</code> 内容就能派上用场了：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>draw</code> 确实比较麻烦，因为它需要从下往上画，我们得先清楚我们要从哪里开始画：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',14)]))}const f=e(g,[["render",d]]),_=JSON.parse(`{"path":"/posts/C__-SFML-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/6.html","title":"6. StateStack，游戏场景随便 push！","lang":"zh-CN","frontmatter":{"title":"6. StateStack，游戏场景随便 push！","date":"2024-03-21T00:00:00.000Z","icon":"cubes-stacked","order":7,"category":["C++ SFML"],"tag":["C++","SFML"],"author":"Kingcq","description":"我们都知道，我们游戏的场景之间的切换，都是依靠一个栈来实现。一个很简单的例子，当你启动游戏的时候，将标题画面的内容压入一个栈，当你选择开始游玩，将游戏的内容继续压入，当你结束游戏，游戏内容从栈中弹出，这时你又会重新看到原来的那个标题画面，我们想要达成这个简单的压入弹出。 那想法就很简单了，写一个栈！然后把各种界面都整成同一种通用类型的子类往里面压入不就...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. StateStack，游戏场景随便 push！\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-05T07:41:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/C__-SFML-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/6.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"6. StateStack，游戏场景随便 push！"}],["meta",{"property":"og:description","content":"我们都知道，我们游戏的场景之间的切换，都是依靠一个栈来实现。一个很简单的例子，当你启动游戏的时候，将标题画面的内容压入一个栈，当你选择开始游玩，将游戏的内容继续压入，当你结束游戏，游戏内容从栈中弹出，这时你又会重新看到原来的那个标题画面，我们想要达成这个简单的压入弹出。 那想法就很简单了，写一个栈！然后把各种界面都整成同一种通用类型的子类往里面压入不就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-05T07:41:30.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"SFML"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-05T07:41:30.000Z"}]]},"git":{"createdTime":1738740544000,"updatedTime":1738741290000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":2,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"posts/C++-SFML-游戏开发/6.md","excerpt":"<p>我们都知道，我们游戏的场景之间的切换，都是依靠一个栈来实现。一个很简单的例子，当你启动游戏的时候，将标题画面的内容压入一个栈，当你选择开始游玩，将游戏的内容继续压入，当你结束游戏，游戏内容从栈中弹出，这时你又会重新看到原来的那个标题画面，我们想要达成这个简单的压入弹出。</p>\\n<p>那想法就很简单了，写一个栈！然后把各种界面都整成同一种通用类型的子类往里面压入不就完事了？行，开写。</p>\\n<p><code>StateStack</code> 类：</p>\\n<figure><figcaption></figcaption></figure>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}`);export{f as comp,_ as data};
