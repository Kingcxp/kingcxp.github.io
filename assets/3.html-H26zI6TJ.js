import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as s,o as t}from"./app-DCxVFbRG.js";const p={};function o(i,n){return t(),a("div",null,n[0]||(n[0]=[s(`<p>这一章实际上和上一章并没有区别</p><p>因为 <code>while</code> 循环实际上完全可以由 <code>for</code> 循环替代，除了 <code>do-while</code> 循环</p><p>来简单提一下这两种循环：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>while</code> 循环很简单，只要括号里的条件成立，它就会一直执行。</p><p><code>do-while</code> 唯一不同的地方在于，无论条件成立与否它都会先执行一次，再进行判断。</p><p><code>continue</code> 和 <code>break</code> 语句在 <code>while</code> 循环中依旧适用。</p><p>当输入不确定数量的数据时，我们可以通过 <code>while</code> 循环来实现：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* ---- */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个重要的知识点，虽然某 CQ 并不会严格的证明，但是他告诉同学们，取模运算十分神奇，在运算过程中随时取模，最终得出的结果与只对结果取模是一样的！</p><p>以后的题目中可能会出现对某一数字取模的情况，这很有可能是运算过程中产生的结果可能过大，需要同学们及时对各个数据进行取模。</p><p>到这里就不得不提一嘴：很多同学遇到了自己检查不出来却实际上超出了变量可存储范围的运算，所以某 CQ 请各位同学们在进行变量相加或者相乘的时候，注意观察题目的数据范围思考在最坏的情况下自己的算式会不会有某个地方超出了变量的存储范围，如果是，则需要对自己的算式进行一定的修改，比如将除法提前。</p><p>题单链接：</p><p><a href="https://www.luogu.com.cn/training/242413" target="_blank" rel="noopener noreferrer">南哪2022-3-for-a-while - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>`,15)]))}const r=e(p,[["render",o],["__file","3.html.vue"]]),d=JSON.parse(`{"path":"/posts/DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/3.html","title":"南哪 2022-3-for-a-while","lang":"zh-CN","frontmatter":{"title":"南哪 2022-3-for-a-while","date":"2022-11-06T00:00:00.000Z","icon":"face-grin-beam-sweat","order":5,"category":["CPL DotOJ 补完计划"],"tag":["CPL","DotOJ"],"author":"Kingcq","description":"这一章实际上和上一章并没有区别 因为 while 循环实际上完全可以由 for 循环替代，除了 do-while 循环 来简单提一下这两种循环： while 循环很简单，只要括号里的条件成立，它就会一直执行。 do-while 唯一不同的地方在于，无论条件成立与否它都会先执行一次，再进行判断。 continue 和 break 语句在 while 循环...","head":[["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/3.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"南哪 2022-3-for-a-while"}],["meta",{"property":"og:description","content":"这一章实际上和上一章并没有区别 因为 while 循环实际上完全可以由 for 循环替代，除了 do-while 循环 来简单提一下这两种循环： while 循环很简单，只要括号里的条件成立，它就会一直执行。 do-while 唯一不同的地方在于，无论条件成立与否它都会先执行一次，再进行判断。 continue 和 break 语句在 while 循环..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-05T07:41:30.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:tag","content":"DotOJ"}],["meta",{"property":"article:published_time","content":"2022-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-05T07:41:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"南哪 2022-3-for-a-while\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-05T07:41:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"]]},"headers":[],"git":{"createdTime":1738740544000,"updatedTime":1738741290000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":2,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":1.61,"words":482},"filePathRelative":"posts/DotOJ-补完计划/3.md","localizedDate":"2022年11月6日","excerpt":"<p>这一章实际上和上一章并没有区别</p>\\n<p>因为 <code>while</code> 循环实际上完全可以由 <code>for</code> 循环替代，除了 <code>do-while</code> 循环</p>\\n<p>来简单提一下这两种循环：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\" data-title=\\"c\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">&lt;</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    a <span class=\\"token operator\\">=</span> a <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{r as comp,d as data};
