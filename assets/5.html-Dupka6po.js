import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-BGVLH4Lj.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h2><p>指针是 C 语言的核心技巧，通过指针，我们可以实现很多高级功能，比如动态内存分配、函数指针、回调函数等等。但是指针也是 C 语言中最容易出错的地方，因为指针的操作非常复杂，一不小心就会出错。本文将介绍一些指针的语法小技巧，帮助大家更好地理解和掌握指针。</p><h3 id="取地址" tabindex="-1"><a class="header-anchor" href="#取地址"><span>取地址：</span></a></h3><p>当我们想要获取某个变量的地址，首先找到这个变量的变量名，我们假设它是 a，如果你在这个变量名前面加上<code>&amp;</code>（<code>&amp;a</code>），那么恭喜你，你成功的取出了 a 这个变量的地址。</p><p>特别地，如果是一个数组，那么它的数组名就是指向它第一个元素的地址，这也是为什么 <code>scanf</code> 数组的时候不要加 <code>&amp;</code></p><h3 id="存地址" tabindex="-1"><a class="header-anchor" href="#存地址"><span>存地址：</span></a></h3><p>现在你成功的取出了某个变量的地址（假设是一个int变量），你现在想把它存下来，以方便在其它函数里面找到这个变量，怎么办呢？</p><p>你可以用 <code>int *p</code>；来新建一个指向 <code>int</code> 的指针变量。</p><p>这里的 <code>*</code> 号指的是你告诉编译器你新建的变量是一个指针类型，这点要注意，因为一会这个符号还有另一个含义。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们建立的是指针变量，它本质上是一个存储地址的变量。</p></div><h3 id="用地址" tabindex="-1"><a class="header-anchor" href="#用地址"><span>用地址：</span></a></h3><p>我们现在得到了变量 <code>a</code> 的地址，并把它存在了 <code>p1</code> 这个指针变量里面。我们怎么来使用 <code>p1</code> 呢？</p><p>这里我们又要用到 <code>*</code> 号</p><p>当我们在定义过 <code>p1</code> 指针后再次使用 <code>*p1</code>，它的含义就发生了改变。</p><p>这里的 <code>*p1</code> 指的是 <code>p1</code> 这个指针指向的变量，也就是说——</p><p><code>*p1</code> 实际上指的就是 <code>a</code> ，无论你在什么地方修改了它的值，<code>a</code> 的值也会随之发生改变。</p><p>那么借助指针的这个性质，我们可以写一些更方便的函数来让我们的代码更加简洁。</p><p>比如交换两个数，这个操作在某些问题中很常用，我相信大家都不想到处花上好几行的代码来实现它，那么我们可以这样写：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>b <span class="token operator">=</span> t<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 在main函数中↓</span></span>
<span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果：a = 2, b = 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用指针，我们可以利用这个swap函数来将某个和这个函数没有半毛钱关系的变量交换值。</p><p>开一个指定大小的连续空间（以 Byte 为单位）：</p><p>翻找 <a href="https://zh.cppreference.com/w/c/memory" target="_blank" rel="noopener noreferrer">C Reference</a> 我们可以找到 <code>malloc</code> 这个函数和 <code>free</code> 这个函数，这两种函数是我们经常可能要用到的。</p><p>为什么要用 <code>malloc</code> 和 <code>free</code> 呢？</p><p>我们知道，当你想根据输入的值来确定你的数组大小时，你必须得在确定了输入之后再新建数组，然而，这也意味着你的数组在新建时就受限于当前作用域，当这个函数结束，新建的数组就失效了。此时，如果你还在别处需要这个数组，你便没有办法再获得它了。</p><p>所以，我们用 <code>malloc</code> 来向编译器申请一段内存空间，大小可以由你自己指定，它会将一段空间分配给你，并返回这段空间的首地址。这段空间来自堆空间，它不会受限于当前作用域，除非你在别处用 <code>free</code> 释放了它，否则它会一直存在。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>申请指针必须有始有终，否则会导致内存泄露（产生了大量的无效内存占用）！如果你发现你的程序越跑越慢，还关不掉，指不定就是内存泄露了！</p></div><p>比如说，你想要申请一个 <code>int</code> 变量和一个大小为 <code>n</code> 的 <code>int</code> 数组，你可以这样写：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>malloc</code> 返回的是一个 <code>void *</code> 类型的指针，所以我们需要把它强制类型转换为 <code>int *</code> 类型的指针，否则编译器会报错。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此时 <code>p1</code> 和 <code>p2</code> 的变量类型是一样的，但 <code>p2</code> 指向的是一段内存空间的首地址，你可以把它当作数组使用，但 <code>p1</code>，虽然你也可以把它当作只有一个元素的数组使用，但实际上和单个 <code>int</code> 变量的指针没有区别。</p></div><p>当你使用完了之后，记得用 <code>free</code> 释放它：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>free</code> 释放的是指针指向的内存空间，而不是指针本身！为了避免出现野指针，你一定要记得把指针空置！这是好习惯！</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>顺带一提，我们知道数组的名字就是指向它第一个元素的指针，那么数组到底是什么意思呢？</p><p>原来，数组后面方括号里面的数字实际上指的是相对于这个数组指针在内存上的偏移值，偏移0那就是第一个元素，偏移1那就是第二个元素，以此类推。</p><p>也就是说，下面 <code>if</code> 中等号两侧这两种表达是等价的：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针"><span>函数指针</span></a></h3><p>函数指针是一种特殊的指针，它指向的是一个函数的入口地址。通过函数指针，我们可以调用函数，也可以把函数作为参数传递给另一个函数。</p><p>函数指针的定义方式如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">返回类型 <span class="token punctuation">(</span><span class="token operator">*</span>指针变量名<span class="token punctuation">)</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，返回类型是函数的返回类型，指针变量名是函数指针的名称，参数列表是函数的参数列表。</p><p>例如，下面是一个指向 <code>int</code> 类型的函数指针的定义：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个函数指针指向一个有两个 <code>int</code> 类型参数的函数，返回类型是 <code>int</code>。</p><p>要使用函数指针，需要先定义一个函数，然后将函数的地址赋值给函数指针。例如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> add<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们定义了一个 <code>add</code> 函数，它接受两个 <code>int</code> 类型的参数，返回它们的和。然后我们定义了一个函数指针 <code>p</code>，并将 <code>add</code> 函数的地址赋值给 <code>p</code>。最后，我们通过函数指针 <code>p</code> 调用了 <code>add</code> 函数，并将结果打印出来。</p><h2 id="试一试" tabindex="-1"><a class="header-anchor" href="#试一试"><span>试一试！</span></a></h2><p><a href="https://www.luogu.com.cn/training/249926#problems" target="_blank" rel="noopener noreferrer">DotOJ 补完计划 - 逃不掉的语法小技巧 指针</a></p>`,50)]))}const r=s(t,[["render",o]]),d=JSON.parse(`{"path":"/posts/CPL-Remake/5.html","title":"5. 指针","lang":"zh-CN","frontmatter":{"title":"5. 指针","date":"2025-07-28T00:00:00.000Z","icon":"hand-pointer","order":6,"category":["CPL"],"tag":["C Programming Language"],"author":"Kingcq","description":"指针 指针是 C 语言的核心技巧，通过指针，我们可以实现很多高级功能，比如动态内存分配、函数指针、回调函数等等。但是指针也是 C 语言中最容易出错的地方，因为指针的操作非常复杂，一不小心就会出错。本文将介绍一些指针的语法小技巧，帮助大家更好地理解和掌握指针。 取地址： 当我们想要获取某个变量的地址，首先找到这个变量的变量名，我们假设它是 a，如果你在这...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5. 指针\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-29T05:16:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-Remake/5.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"5. 指针"}],["meta",{"property":"og:description","content":"指针 指针是 C 语言的核心技巧，通过指针，我们可以实现很多高级功能，比如动态内存分配、函数指针、回调函数等等。但是指针也是 C 语言中最容易出错的地方，因为指针的操作非常复杂，一不小心就会出错。本文将介绍一些指针的语法小技巧，帮助大家更好地理解和掌握指针。 取地址： 当我们想要获取某个变量的地址，首先找到这个变量的变量名，我们假设它是 a，如果你在这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-29T05:16:13.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"C Programming Language"}],["meta",{"property":"article:published_time","content":"2025-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-29T05:16:13.000Z"}]]},"git":{"createdTime":1738740544000,"updatedTime":1753766173000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":4,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":5.77,"words":1732},"filePathRelative":"posts/CPL-Remake/5.md","excerpt":"<h2>指针</h2>\\n<p>指针是 C 语言的核心技巧，通过指针，我们可以实现很多高级功能，比如动态内存分配、函数指针、回调函数等等。但是指针也是 C 语言中最容易出错的地方，因为指针的操作非常复杂，一不小心就会出错。本文将介绍一些指针的语法小技巧，帮助大家更好地理解和掌握指针。</p>\\n<h3>取地址：</h3>\\n<p>当我们想要获取某个变量的地址，首先找到这个变量的变量名，我们假设它是 a，如果你在这个变量名前面加上<code>&amp;</code>（<code>&amp;a</code>），那么恭喜你，你成功的取出了 a 这个变量的地址。</p>\\n<p>特别地，如果是一个数组，那么它的数组名就是指向它第一个元素的地址，这也是为什么 <code>scanf</code> 数组的时候不要加 <code>&amp;</code></p>","autoDesc":true}`);export{r as comp,d as data};
