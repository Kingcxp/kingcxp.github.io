import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-D1XJgs_q.js";const o={};function t(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>各位好呀，这里是某 CQ！</p><p>今天给大家带来 1-types-io 的练习题单~</p><p>根据 types-io 的题目，我们可以看出，这章主要是考察各位同学对变量类型的把控并使用变量类型及四则运算以及 <code>math.h</code> 库中的一些函数来解决较为实际的问题，所以这次我们主要的关注点是变量类型以及一些要注意的点。</p><p>首先先来列一下常见的变量类型：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> Num_int<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> Num_long_long<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> Num_float<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> Num_double<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> ch<span class="token punctuation">;</span></span>
<span class="line">bool flag<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 注意，这里是随便命名，并不是某种标准的命名法，请不要参考！</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>int</code> 类型：</p><p><code>int</code> 类型被称为 32 位带符号整数，它是用 <code>32</code> 个二进制位来表示的整数，同时，它的最高位用来表示符号，如果该位是 1 则这个数是负数。所以 <code>int</code> 类型真正用来表示数据大小的只有 31 位，这也就直接决定了 <code>int</code> 类型能表示的范围是 <code>-2147483648 ~ 2147483647</code>，也就是2的31次方减去1</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>之所以负数能到 -2147483648，是因为在计算机中，负数是以补码的形式存储的，也就是把正数的二进制取反再加 1，所以 -2147483648 的补码就是 0，所以它实际上就是 0</p></div><p>如果你确定不会出现负数，而且你想追求更大一些的表示范围的话，你可以使用 <code>unsigned int</code> 来充分利用这 32 位，即使它不再能表示负数。</p><p><code>int</code> 类型在 <code>scanf</code> 和 <code>printf</code> 里面的表示是%d</p><p><code>unsigned int</code> 类型在 <code>scanf</code> 和 <code>printf</code> 里面的表示是%u</p><p><code>long long</code> 类型：</p><p>和 <code>int</code> 实际上一样，只不过人家是 64 位的，比 <code>int</code> 大得多。</p><p>也有 <code>unsigned long long</code>，很好用</p><p><code>long long</code> 类型在 <code>scanf</code> 和 <code>printf</code> 里面的表示是 <code>%lld</code></p><p><code>unsigned long long</code> 在 <code>scanf</code> 和 <code>printf</code> 里面的表示是 <code>%llu</code></p><p>关于整型变量的补充：</p><p>其实在大部分情况下，大家需要用到的还是整型变量，所以在此某 CQ 希望给出更多的一些小技巧。</p><p>关于存储空间：</p><p>大家可能知道，也可能不知道，二进制的 8 个位成一个字节，也就是 1 Byte，或者 1 B，而 1024 B = 1 KB，而 1024 KB = 1 MB</p><p>当我们在做题的时候，会看到题目给定的时空限制。</p><p>当我们思考一道题如何去做的时候，也不要忘了去算一算自己到底用掉了多少空间，或者花去了多少的时间(最简单的方式是以1亿次循环为标准，超出即危险)，以避免空间超限和时间超限的问题。</p><p>当然，当你拿不到完全分的时候，使用超时的算法拿部分分未尝不可。</p><p>关于溢出：</p><p>整型变量的溢出实际上比较好控制，当你超过一个整形变量能够表示的范围时，它会从它能表示范围的另一端重新开始，比如一个 <code>int</code> 变量存了 2147483647，加上 1 就变成了 -2147483648</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>实际上，溢出是<code>未定义行为</code>，它的具体表现取决于编译器，所以你最好还是不要去尝试溢出，除非你非常清楚你自己在做什么。</p></div><p><code>float</code> 类型：</p><p><code>float</code> 类型被称为单精度浮点数，能被用来表示小数，但是表示的精度有限。</p><p><code>float</code> 类型在 <code>scanf</code> 和 <code>printf</code> 里面的表示是 <code>%f</code></p><p><code>double</code> 类型：</p><p><code>double</code> 类型被称为双精度浮点数，是我们常用的小数变量类型，能表示更多的小数位。</p><p><code>double</code> 类型在scanf和printf里面的表示是%lf</p><p>一些注意点：</p><p><code>math.h</code> 库中的函数实际上大多数的实现都是基于 <code>double</code> 的，使用 <code>float</code> 可能会出现一些精度上的问题</p><p><code>printf</code> 输出的一些奇技淫巧在此并不赘述。</p><p><code>char</code> 类型：</p><p><code>char</code> 类型表示一个字符，ascii 码里面实际上并没有多少东西，所以实际上一个 <code>char</code> 变量只有 8 位，也就是 1 个字节，最多只能表示到 255，在答疑中发现有人尝试用字符存大于 255 的数字，这个是值得注意的。</p><p><code>char</code> 类型在 <code>scanf</code> 和 <code>printf</code> 里面的表示是 <code>%c</code></p><p>一些注意点：</p><p>可能不少同学去记&#39;0&#39;、&#39;a&#39;、&#39;A&#39;的ascii值，实际上是没有必要的，比如你可以使用&#39;0&#39;来直接表示字符0代表的值，C语言是认识这些东西的。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当你 <code>scanf</code> 一个字符的时候，它是紧接着向后读一个字符，没错，这意味着换行符和空格也包括在内，使用时需要特别注意。</p></div><p><code>bool</code> 类型：</p><p><code>bool</code> 类型只有两种状态：0 或者 1，需要用到 <code>stdbool.h</code> 的库</p><p>因为存储空间占用至少是 1 B，所以 <code>bool</code> 类型硬生生占了1B的内存，虽然它实际上只有1bit。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>至少占用 1 Byte 的内存空间是因为 C 语言的变量存储是对齐的，也就是内存地址是 8 的整数倍，所以 bool 类型实际上也会占用 1 Byte 的内存空间。</p><p><code>bool</code> 类型因为较 <code>int</code> 占用内存更加少而常被用在一些判断中。以及地图障碍的记录。</p></div><p>关于 <code>getchar()</code> 和 <code>putchar()</code>：</p><p>这俩货其实根本没必要知道，和 <code>scanf%c</code> 还有 <code>printf%c</code> 实际上是一样的</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>但是它们更快。😉</p></div><p>关于 <code>enum</code>：</p><p>枚举类型实际上也是 <code>int</code>，但可以为这个变量的特定值附上特定的名字，可以用来很方便地表示一些固定的值，比如一周的星期几，一年中的月份，等等。</p><p>比如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">enum</span> <span class="token class-name">week</span> <span class="token punctuation">{</span></span>
<span class="line">    Monday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    Tuesday<span class="token punctuation">,</span></span>
<span class="line">    Wednesday<span class="token punctuation">,</span></span>
<span class="line">    Thursday<span class="token punctuation">,</span></span>
<span class="line">    Friday<span class="token punctuation">,</span></span>
<span class="line">    Saturday<span class="token punctuation">,</span></span>
<span class="line">    Sunday</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就可以使用 <code>Monday</code> 来表示星期一，使用 <code>Tuesday</code> 来表示星期二……</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>枚举类型默认从 0 开始，你也可以为某个特定的枚举指定值，如不指定，则它的值为前一个枚举的取值 +1</p></div><p>关于 <code>typedef</code>：</p><p><code>typedef</code> 可以用来给一个类型起一个新的名字，比如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">int</span> integer<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，我们就可以使用 <code>integer</code> 来表示 <code>int</code> 类型了。</p><p>关于 <code>math.h</code></p><p>常见的数学函数，比如开根 <code>sqrt</code>，立方根 <code>cbrt</code>，乘方 <code>pow</code>，对数 <code>log</code>，绝对值 <code>abs</code>，这些，如果想用，除了自己写，就只能借助这个库了，当然，每个函数都有属于它自己的坑（比如 <code>pow</code> 难以接受负数），在使用之前，最好先查清楚怎么用。</p><p>写出更好看的代码格式（非常重要）：</p><p>一种好的代码格式，能让你的程序看上去更加清晰，检查起来好检查，也许也可以让你更有耐心地去Debug，而且别人看了至少也会觉着蛮清爽的。</p><p>下面来举一个某 CQ 喜欢的代码格式：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> year<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> month<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">14ll</span> <span class="token operator">-</span> month<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12ll</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token keyword">long</span> y <span class="token operator">=</span> year <span class="token operator">+</span> <span class="token number">4800ll</span> <span class="token operator">-</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token keyword">long</span> m <span class="token operator">=</span> month <span class="token operator">+</span> <span class="token number">12ll</span> <span class="token operator">*</span> a <span class="token operator">-</span> <span class="token number">3ll</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> day <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">153ll</span> <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token number">2ll</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5ll</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">365ll</span> <span class="token operator">*</span> y <span class="token operator">+</span> y <span class="token operator">/</span> <span class="token number">4ll</span> <span class="token operator">-</span> y <span class="token operator">/</span> <span class="token number">100ll</span> <span class="token operator">+</span> y <span class="token operator">/</span> <span class="token number">400ll</span> <span class="token operator">-</span> <span class="token number">32045</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token keyword">long</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld%lld%lld&quot;</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">solve</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写出这样的代码具体改变了什么呢？</p><ol><li>控制好语句块的缩进</li></ol><p>对于附属于某一语句（比如 <code>int main()</code>、以及之后要学到的 <code>for</code>、<code>if</code> 等）的内容，我们需要相对于原来的语句额外缩进一个 Tab，而不是和原来那句并排写，那样只会导致更大的混乱。</p><p>灵活运用 Tab 制表符来让你的程序变得更美观，比如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span>			numA<span class="token punctuation">,</span></span>
<span class="line">			numA<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span>		ch<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> 	ans<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>语句块之间可以适当空行</li></ol><p>虽然 C 语言中空行并不会影响程序，但是适当的空行可以让你的程序看起来区分步骤更加明显</p><ol start="3"><li>多加空格</li></ol><p>大家可能会问：加空格干什么用呢？</p><p>空格能让你的不少算式看上去更加分散，易于分辨哪个是哪个，同时也可以使算式看上去更加易于理解。</p><p>比如说上面那个长式子，给大家拿出来对比一下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> day <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">153ll</span> <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token number">2ll</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5ll</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">365ll</span> <span class="token operator">*</span> y <span class="token operator">+</span> y <span class="token operator">/</span> <span class="token number">4ll</span> <span class="token operator">-</span> y <span class="token operator">/</span> <span class="token number">100ll</span> <span class="token operator">+</span> y <span class="token operator">/</span> <span class="token number">400ll</span> <span class="token operator">-</span> <span class="token number">32045</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span>day<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">153ll</span><span class="token operator">*</span>m<span class="token operator">+</span><span class="token number">2ll</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5ll</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">365ll</span><span class="token operator">*</span>y<span class="token operator">+</span>y<span class="token operator">/</span><span class="token number">4ll</span><span class="token operator">-</span>y<span class="token operator">/</span><span class="token number">100ll</span><span class="token operator">+</span>y<span class="token operator">/</span><span class="token number">400ll</span><span class="token operator">-</span><span class="token number">32045</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>区别非常明显，某 CQ 表示第二行代码根本不想看。</p><p>另外某 CQ 想要提醒下各位同学，每道题有条件可把之前的代码清空了重写，这样可以更快地提高打字速度。</p><p>某 CQ 知道各位同学已经学过了if和for还有while，但某 CQ 还是建议同学们使用当周的知识点解决问题。</p><p>1-types-io就这些，其它内容个人根据需求自己看。</p><p>题单链接：</p><p><a href="https://www.luogu.com.cn/training/242380" target="_blank" rel="noopener noreferrer">南哪2022-1-types-io - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>`,82)]))}const d=s(o,[["render",t]]),r=JSON.parse(`{"path":"/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/1.html","title":"南哪 2022-1-types-io","lang":"zh-CN","frontmatter":{"title":"南哪 2022-1-types-io","date":"2022-11-06T00:00:00.000Z","icon":"face-grin-beam-sweat","order":3,"category":["CPL DotOJ 补完计划"],"tag":["CPL","DotOJ"],"author":"Kingcq","description":"各位好呀，这里是某 CQ！ 今天给大家带来 1-types-io 的练习题单~ 根据 types-io 的题目，我们可以看出，这章主要是考察各位同学对变量类型的把控并使用变量类型及四则运算以及 math.h 库中的一些函数来解决较为实际的问题，所以这次我们主要的关注点是变量类型以及一些要注意的点。 首先先来列一下常见的变量类型： int 类型： int...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"南哪 2022-1-types-io\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-28T11:31:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/1.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"南哪 2022-1-types-io"}],["meta",{"property":"og:description","content":"各位好呀，这里是某 CQ！ 今天给大家带来 1-types-io 的练习题单~ 根据 types-io 的题目，我们可以看出，这章主要是考察各位同学对变量类型的把控并使用变量类型及四则运算以及 math.h 库中的一些函数来解决较为实际的问题，所以这次我们主要的关注点是变量类型以及一些要注意的点。 首先先来列一下常见的变量类型： int 类型： int..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T11:31:29.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"DotOJ"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:published_time","content":"2022-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T11:31:29.000Z"}]]},"git":{"createdTime":1738740544000,"updatedTime":1753702289000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":3,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":7.67,"words":2301},"filePathRelative":"posts/CPL-DotOJ-补完计划/1.md","excerpt":"<p>各位好呀，这里是某 CQ！</p>\\n<p>今天给大家带来 1-types-io 的练习题单~</p>\\n<p>根据 types-io 的题目，我们可以看出，这章主要是考察各位同学对变量类型的把控并使用变量类型及四则运算以及 <code>math.h</code> 库中的一些函数来解决较为实际的问题，所以这次我们主要的关注点是变量类型以及一些要注意的点。</p>\\n<p>首先先来列一下常见的变量类型：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token keyword\\">int</span> Num_int<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">long</span> Num_long_long<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">float</span> Num_float<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">double</span> Num_double<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">char</span> ch<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">bool flag<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 注意，这里是随便命名，并不是某种标准的命名法，请不要参考！</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,r as data};
