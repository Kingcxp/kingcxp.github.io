import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-D1XJgs_q.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p>某 CQ 今天发现有不少同学会在群里面求某道题的测试数据来验证自己程序的正确性。</p><p>每个人程序的做法是不同的，错误也很可能出在五花八门的地方，也就是说，同样的数据，别人是对的你不一定对，别人是错的你也不一定就是错的。</p><p>经常在群里求数据解决问题是不可取的，首先没有那么多的测试数据来给，其次也并不知道你错在哪里，不能给出更有针对性的数据。</p><p>那么我们怎么能更高效的获得可能使你程序出错的数据呢？某 CQ 就在这里给大家介绍介绍：</p><p>首先我们需要自己写个程序来生成随机的测试数据：</p><p>C 语言怎么写随机数呢？直接上代码你就懂了！</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就写好了一个生成 <code>A+B Problem</code> 的数据的随机数程序。</p><p>我们来具体解析几个陌生的东西。这些东西都在 <code>stdlib.h</code> 里：</p><p><code>time(0)</code> 指获取当前系统时间，它会动态返回一个不同的 <code>int</code> 值。</p><p><code>srand()</code> 指的是设置随机数种子，当你将系统时间设置为随机数种子的时候，这样种子就会在不断的变化，在这里提一嘴，同样的种子出来的随机数是不会变的，内部的计算原理某 CQ 并不清楚。</p><p>而 <code>rand()</code> 就是取一个范围是 1 到 65535 的随机整数值，在这里我们假定数据范围是 1 到 10000 ，所以我们自己写了一个 random 函数用来生成 l 到 r 范围内的随机数，其中用取模来限制 <code>rand()</code> 的值的范围。</p><p>这里要特别注意，如果需要更大的数据，你可以将多个 <code>rand()</code> 相乘，但是请注意范围可能会超过 <code>int</code>，必要时记得开 <code>long long</code>。</p><p>学会了生成随机数，我们就可以根据不同题目的输入要求来构造大量的随机数据啦！（因为每次跑代码所得到的结果都不一样）</p><p>数据有了，那我用我自己的程序跑出结果我也不知道对不对啊？而且这样手动生成数据，也太麻烦了吧，效率太低，而且找到我想要的数据就算运气好也要花不少时间，这可怎么办呢？</p><p>接下来就轮到我们的对拍上场辣！</p><p>首先我们需要一个保证正确的代码生成的可执行文件用来作为标准输出正确答案，当某 CQ 发出这个帖子之后，他会在频道当中新开一个分区用来放近期题库正确可执行文件的下载链接，各位可以自行去下载。</p><p>接下来我们假设：<br> 接下来所有的文件都在同一个文件夹里<br> 你的程序生成的可执行文件叫 <code>code.exe</code><br> 你的随机数程序生成的可执行文件叫 <code>rand.exe</code><br> 完全正确的程序生成的可执行文件叫 <code>std.exe</code></p><p>新建一个文件 <code>check.bat</code>（注意后缀名），填入以下代码：</p><div class="language-bat line-numbers-mode" data-highlighter="prismjs" data-ext="bat"><pre><code class="language-bat"><span class="line">@echo off</span>
<span class="line">:loop</span>
<span class="line">rand.exe &gt; data.in</span>
<span class="line">std.exe &lt; data.in &gt; std.out</span>
<span class="line">code.exe &lt; data.in &gt; code.out</span>
<span class="line">fc std.out code.out</span>
<span class="line">if not errorlevel 1 goto loop</span>
<span class="line">pause</span>
<span class="line">goto loop</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们来具体解释这些批处理命令：</p><p><code>@echooff</code>：关闭输入显示（否则刷屏警告）<br><code>:loop</code>：<code>goto</code> 嘛，洒洒水啦~<br><code>&gt;</code>：将输出内容附到指定文件上<br><code>&lt;</code>：将内容输入到程序中运行<br> 两者可以按照逻辑顺序连用<br><code>fc</code>：(file compare)是 <code>windows</code> 的指令，它会比较两个文件之间有什么区别，并且输出结果<br><code>if not errorlevel 1 goto loop</code>：if 大家都很熟，这个 errorlevel 指的就是 fc 的程序返回值，如果是 1，那么这两个文件之间并没有差异，我们就直接 <code>goto loop</code> 生成之后的数据，如果不是 1，那么说明有问题，就停下来让你去 <code>data.in</code> 里面看是什么数据，然后当你按下任意按钮以后它会继续生成新数据。</p><p>这里要注意的是，fc对文件的判断要求可能比oj要求更高，行末的空格最好别有（</p><p>这样就造出了一个全自动的判别机，你可以开着这个程序来自动找到使你程序出错的针对性数据（虽然运气不好的话可能还是要跑很久）</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你正在使用你是 Linux，说明你是操作系统大神，这里就不介绍 Linux 下怎么写对拍了，和 Windows 下实际上是一样的，只是命令不同而已。</p></div>`,25)]))}const r=s(p,[["render",o]]),d=JSON.parse(`{"path":"/posts/C-%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/random.html","title":"随机数据生成 & 正确性验证","lang":"zh-CN","frontmatter":{"title":"随机数据生成 & 正确性验证","date":"2022-11-13T00:00:00.000Z","icon":"ranking-star","order":1,"category":["C 语言学习分享"],"tag":["CPL"],"author":"Kingcq","description":"某 CQ 今天发现有不少同学会在群里面求某道题的测试数据来验证自己程序的正确性。 每个人程序的做法是不同的，错误也很可能出在五花八门的地方，也就是说，同样的数据，别人是对的你不一定对，别人是错的你也不一定就是错的。 经常在群里求数据解决问题是不可取的，首先没有那么多的测试数据来给，其次也并不知道你错在哪里，不能给出更有针对性的数据。 那么我们怎么能更高...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"随机数据生成 & 正确性验证\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-05T07:41:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/C-%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/random.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"随机数据生成 & 正确性验证"}],["meta",{"property":"og:description","content":"某 CQ 今天发现有不少同学会在群里面求某道题的测试数据来验证自己程序的正确性。 每个人程序的做法是不同的，错误也很可能出在五花八门的地方，也就是说，同样的数据，别人是对的你不一定对，别人是错的你也不一定就是错的。 经常在群里求数据解决问题是不可取的，首先没有那么多的测试数据来给，其次也并不知道你错在哪里，不能给出更有针对性的数据。 那么我们怎么能更高..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-05T07:41:30.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:published_time","content":"2022-11-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-05T07:41:30.000Z"}]]},"git":{"createdTime":1738740544000,"updatedTime":1738741290000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":2,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":4.2,"words":1259},"filePathRelative":"posts/C-语言学习分享/random.md","excerpt":"<p>某 CQ 今天发现有不少同学会在群里面求某道题的测试数据来验证自己程序的正确性。</p>\\n<p>每个人程序的做法是不同的，错误也很可能出在五花八门的地方，也就是说，同样的数据，别人是对的你不一定对，别人是错的你也不一定就是错的。</p>\\n<p>经常在群里求数据解决问题是不可取的，首先没有那么多的测试数据来给，其次也并不知道你错在哪里，不能给出更有针对性的数据。</p>\\n<p>那么我们怎么能更高效的获得可能使你程序出错的数据呢？某 CQ 就在这里给大家介绍介绍：</p>\\n<p>首先我们需要自己写个程序来生成随机的测试数据：</p>\\n<p>C 语言怎么写随机数呢？直接上代码你就懂了！</p>","autoDesc":true}`);export{r as comp,d as data};
