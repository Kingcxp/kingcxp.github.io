import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-aj-zILJU.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于 <code>Vue3</code> 的 <code>script</code> 常用语法，显然 <a href="https://cn.vuejs.org/tutorial" target="_blank" rel="noopener noreferrer">Vue3 互动教程</a> 是最好的学习方式，建议你去那里学习。</p><p>对于 <code>Element-Plus</code> 的组件样式和用法查询，你应当前往 <a href="https://element-plus.org/zh-CN/component/overview.html" target="_blank" rel="noopener noreferrer">Element-Plus 官网</a> 阅读。</p></div><p>在这里我们仅对一些易错点介绍，比如需要掌握的 <code>Axios</code> 网络请求库的用法介绍，它与你认知当中的顺序执行不太一样，也就是 <code>Promise</code> 的问题。</p><h3 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>Axios</span></a></h3><p>在浏览器中，所有的网络请求都是<strong>异步</strong>的。</p><p><code>异步</code> 这个概念在操作系统中也有学到，就是 <code>协程</code> 的概念，程序本身还是只有一个线程，但是可能会有多个协程同时运行，在一个协程中，你可能完成了一些事情，在需要等待响应或者等待其他协程的时候，程序会切换到另一个协程，等另一个协程完成之后，再切换回来。</p><p><code>Axios</code> 发起的网络请求也是这样，当你使用类似 <code>Axios.get</code> 的方法时，它会立即返回一个 <code>Promise</code> 对象，但是这个 <code>Promise</code> 对象并不会立即得到结果，而是会等待网络请求完成之后，才会得到结果。</p><p>对于一个 <code>Promise</code> 对象，你可以这样使用它：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">Axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>Axios.get</code> 方法会立即返回一个 <code>Promise</code> 对象，然后我们使用 <code>then</code> 方法来处理这个 <code>Promise</code> 对象的结果，如果网络请求成功，那么 <code>then</code> 方法中的回调函数会被调用，并且 <code>response</code> 参数会包含服务器返回的数据（也就是 <code>Promise&lt;&gt;</code> 尖括号中的类型）；如果网络请求失败，那么 <code>catch</code> 方法中的回调函数会被调用，并且 <code>error</code> 参数会包含错误信息。</p><p>意识到问题所在了吗？如果你写了这样一段代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  Axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    result <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 假设这里你想要使用 result 的结果</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你运行这段内容时，你会在开发者工具中开心地发现你请求成功了，并且返回的答案也正确，但是控制台中输出的 <code>result</code> 却是 <code>null</code>，因为 <code>Axios.get</code> 方法是异步的，它会立即返回一个 <code>Promise</code> 对象，但是并不会立即得到结果，所以 <code>result</code> 的值仍然是 <code>null</code>。</p><p>那么，如何解决这个问题呢？我们可以使用 <code>async/await</code> 语法，它会等待 <code>Promise</code> 对象的结果，然后再继续执行后面的代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> Axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    result <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你可以直接脱去 <code>then</code> 和 <code>catch</code>，直接使用 <code>await</code>：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token keyword">await</span> Axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，你就可以愉快地进行网络请求了。</p><p>你也许会发现，<code>Axios</code> 发送的请求都是互相独立的，如果后端服务器尝试设置你的 <code>cookie</code>，或者你想让自己的每一条请求都附带登录信息，它总是会丢失，这应当怎么办呢？</p><p><code>Axios</code> 提供了 <code>axios.create()</code> 方法，供你创建一个 <code>axios</code> 实例，像这样：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  baseURL<span class="token operator">:</span> <span class="token string">&#39;https://some-domain.com/api/&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 设置请求的根路径</span></span>
<span class="line">  timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 设置请求超时时间</span></span>
<span class="line">  withCredentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许跨域请求携带 cookie</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，还有其它的设置项，这里仅举例</p><p>同时，作为一个合格的网络请求模块，你也可以为这个实例创建 <code>请求拦截器</code> 和 <code>响应拦截器</code>：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">//当前实例的拦截器，对所有要发送给后端的请求进行处理，在其中加入token</span></span>
<span class="line">instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></span>
<span class="line">    config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> config</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//当前实例的拦截器，对所有从后端收到的请求进行处理，检验http的状态码</span></span>
<span class="line">instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></span>
<span class="line">    response <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以创建一个文件，默认导出这个 <code>axios</code> 实例，在其它地方都不使用 <code>axios</code> 包本身而使用这个实例即可。</p><h3 id="function-和-箭头函数" tabindex="-1"><a class="header-anchor" href="#function-和-箭头函数"><span><code>function</code> 和 <code>箭头函数</code></span></a></h3><p>在 JavaScript 中，<code>function</code> 和 <code>箭头函数</code> 是两种不同的函数定义方式，它们在语法和功能上都有一些区别。</p><p><code>function</code> 是标准的函数定义方式，它有函数名，可以接受参数，并且可以返回值。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>箭头函数</code> 是 ES6 引入的一种新的函数定义方式，它没有函数名，只能接受参数，并且可以返回值。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>箭头函数和普通函数的主要区别在于 <code>this</code> 的指向。在普通函数中，<code>this</code> 的指向取决于函数的调用方式，而在箭头函数中，<code>this</code> 的指向是固定的，始终指向函数定义时的上下文。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">growUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 this 指向的是全局对象</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>growUp</code> 函数是一个普通函数，它的 <code>this</code> 指向的是全局对象，而不是 <code>Person</code> 实例。因此，<code>this.age</code> 的值始终是 <code>undefined</code>。</p><p>如果我们将 <code>growUp</code> 函数改为箭头函数，那么 <code>this</code> 的指向就会始终指向 <code>Person</code> 实例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 this 指向的是 Person 实例</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果上面的说法你看不懂，那这里可以说人话：</p><p><code>function</code> 定义的函数只能访问全局定义的变量和方法</p><p><code>箭头函数</code> 定义的函数同时可以访问上下文中定义的变量和方法</p><p>因此，一般建议使用 <code>箭头函数</code> 而非 <code>function</code></p></div>`,36)]))}const u=s(t,[["render",o],["__file","vuescript.html.vue"]]),r=JSON.parse(`{"path":"/posts/Vue3%E7%BD%91%E7%BB%9C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/vuescript.html","title":"4. Vue3 script & Axios","lang":"zh-CN","frontmatter":{"title":"4. Vue3 script & Axios","date":"2025-03-04T00:00:00.000Z","icon":"file-code","order":5,"category":["Vue3 网络前端开发"],"tag":["JavaScript","TypeScript"],"description":"提示 对于 Vue3 的 script 常用语法，显然 Vue3 互动教程 是最好的学习方式，建议你去那里学习。 对于 Element-Plus 的组件样式和用法查询，你应当前往 Element-Plus 官网 阅读。 在这里我们仅对一些易错点介绍，比如需要掌握的 Axios 网络请求库的用法介绍，它与你认知当中的顺序执行不太一样，也就是 Promis...","head":[["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/Vue3%E7%BD%91%E7%BB%9C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/vuescript.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"4. Vue3 script & Axios"}],["meta",{"property":"og:description","content":"提示 对于 Vue3 的 script 常用语法，显然 Vue3 互动教程 是最好的学习方式，建议你去那里学习。 对于 Element-Plus 的组件样式和用法查询，你应当前往 Element-Plus 官网 阅读。 在这里我们仅对一些易错点介绍，比如需要掌握的 Axios 网络请求库的用法介绍，它与你认知当中的顺序执行不太一样，也就是 Promis..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-04T06:57:43.000Z"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2025-03-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-04T06:57:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. Vue3 script & Axios\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-04T06:57:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\",\\"url\\":\\"https://github.com/Kingcxp\\"}]}"]]},"headers":[{"level":3,"title":"Axios","slug":"axios","link":"#axios","children":[]},{"level":3,"title":"function 和 箭头函数","slug":"function-和-箭头函数","link":"#function-和-箭头函数","children":[]}],"git":{"createdTime":1741070770000,"updatedTime":1741071463000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":3,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":4.87,"words":1461},"filePathRelative":"posts/Vue3网络前端开发/vuescript.md","localizedDate":"2025年3月4日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>对于 <code>Vue3</code> 的 <code>script</code> 常用语法，显然 <a href=\\"https://cn.vuejs.org/tutorial\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Vue3 互动教程</a> 是最好的学习方式，建议你去那里学习。</p>\\n<p>对于 <code>Element-Plus</code> 的组件样式和用法查询，你应当前往 <a href=\\"https://element-plus.org/zh-CN/component/overview.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Element-Plus 官网</a> 阅读。</p>\\n</div>","autoDesc":true}`);export{u as comp,r as data};
