import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as c}from"./app-BGVLH4Lj.js";const p={};function i(t,n){return c(),a("div",null,n[0]||(n[0]=[e(`<h2 id="c-programming-language" tabindex="-1"><a class="header-anchor" href="#c-programming-language"><span>C Programming Language</span></a></h2><p>C 语言是自然语言，这意味着编写的时候，我们能像说话一样很清晰地表达自己的意思，例如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先不管这段代码的语法结构等，我们能够很轻松地看懂，它是在屏幕上输出 &quot;Hello, world!&quot; 这句话，然后程序结束。</p><p>那我们现在来分别介绍一下每句话做了什么：</p><hr><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>C 语言是一款非常自然的语言，对吧？我们在说话的时候，也会用到 <em>“像我之前提到的”</em> 这种表达方式，那么在 C 语言中，<code>#include</code> 就是用来做类似的事情的</p><p>当我们使用 <code>#include</code> 并在后面的尖括号里附带一个文件名的时候，C 语言会自动去寻找这个文件，并将这个文件的内容插入到当前文件中，就像我们之前提到的 <em>“像我之前提到的”</em> 一样</p><p>那么 <code>#include &lt;stdio.h&gt;</code> 就是在说：“我要引入一个叫做 <code>stdio.h</code> 的文件，这个文件里有一些我需要用到的函数和变量，你帮我插入到当前文件中吧”</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>#include</code> 后面可以跟两种文件，一种是尖括号里的，一种是双引号里的，这两种文件的区别在于，尖括号里的文件，C 语言编译器会在 C 语言标准库中寻找，而双引号文件，C 语言编译器会从当前文件所在的目录中开始寻找</p></div><hr><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在高中，我们学过 <code>函数</code> 的概念，对吧？<code>函数</code> 在我们的印象里，是不是一个计算结果的式子？</p><p>例如：<code>y = kx + b</code>？</p><p>这里的 <code>函数</code> 同样是这个概念，不过它的含义更加拓展了，我们可以指定这个函数的结果格式，也可以指定这个函数需要有多少个输入参数，参数指的是函数中的自变量，例如 <code>f(x)</code> 中的 <code>x</code></p><p>在 C 语言的函数中，我们在大括号中指定一系列函数的操作步骤，在函数被调用的时候，这些操作步骤会被依次执行，最后返回由这些操作计算得出的指定格式的结果</p><p>而 <code>main</code> 在这里又是一种特殊的函数，C 语言认识这个函数，并且会将它作为整个程序的入口，也就是说，当我们运行一个 C 语言程序的时候，C 语言会首先执行 <code>main</code> 函数中的操作步骤</p><hr><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>printf</code> 是 C 语言标准库中的一个函数，它的作用是将后面的字符串输出到屏幕上，例如 <code>printf(&quot;Hello, world!&quot;);</code> 就会在屏幕上输出 <code>Hello, world!</code> 这句话</p><p>当然，它还有不少进阶用法，这个我们在之后会用到</p><hr><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>return</code> 是 C 语言中的一个关键字，它的作用是使函数返回，后面的返回值是可以自行指定的，在这里，<code>main</code> 函数返回了 0 这个整数，而数字 <code>0</code> 代表这个程序顺利退出</p><p>函数的返回，代表着这个函数已经得到了结果，那么在返回之后剩余的所有步骤都不会再被执行，也就是说，<code>return 0;</code> 后面的所有代码都不会被执行</p><div class="hint-container tip"><p class="hint-container-title">提示</p><h4 id="在你的代码中使用注释" tabindex="-1"><a class="header-anchor" href="#在你的代码中使用注释"><span>在你的代码中使用注释！</span></a></h4><p>注释是 C 语言中的一种特殊语法，它的作用是让代码更加易读，例如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这句话会在屏幕上输出 &quot;Hello, world!&quot;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 C 语言中，注释有两种形式，一种是单行注释，一种是多行注释，单行注释以 <code>//</code> 开头，多行注释以 <code>/*</code> 开头，以 <code>*/</code> 结尾</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><h4 id="在你的代码中使用缩进" tabindex="-1"><a class="header-anchor" href="#在你的代码中使用缩进"><span>在你的代码中使用缩进！</span></a></h4><p>缩进是 C 语言编写的村规之一，它的作用是让代码更加易读，例如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，你会发现 <code>main</code> 函数中的代码都被缩进了一层，这是因为 <code>main</code> 函数中的代码是 <code>main</code> 函数的操作步骤，而 <code>main</code> 函数的操作步骤是 <code>main</code> 函数的子步骤，所以我们需要将它们缩进一层，以表示它们是 <code>main</code> 函数的子步骤</p><p>而如果是 <code>main</code> 函数中的代码还有子步骤，那么我们就需要将它们再缩进一层，以此类推</p></div><h2 id="c-compiler" tabindex="-1"><a class="header-anchor" href="#c-compiler"><span>C Compiler</span></a></h2><p>那么，代码已经写好了，可执行文件去哪里领？</p><p>这就要说到我们的 <code>编译器</code> 了，编译器的作用就是将我们写好的代码，转换成计算机能够理解的机器语言，也就是一个可执行文件</p><p>如何使用编译器呢？</p><p>还记得，我们在环境配置中配置了 <code>vscode</code> 和 <code>gcc</code>，并安装了 <code>vscode</code> 的相关插件吗？</p><p>一个最快捷的方式是，在 <code>vscode</code> 中使用 <code>Code Runner</code>，即编写好你的代码并保存后，在右上角点击 <code>▶</code> 按钮，就可以运行了！同时会自动生成一个同名的可执行文件在你的代码旁边</p><p>当然，如果你更喜欢手动操作，也可以使用 <code>gcc</code> 命令来编译你的代码，在你代码所在的文件夹打开终端（在 <code>vscode</code> 中，这意味着右键你的文件并选择在集成终端中打开）：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">gcc yourfile.c <span class="token parameter variable">-o</span> yourfile</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>yourfile.c</code> 是你的代码文件名，<code>-o</code> 是一个选项，表示输出文件名，<code>yourfile</code> 是你希望输出的文件名，这样，编译器就会将你的代码编译成一个叫做 <code>yourfile</code> 的可执行文件（<code>Windows</code> 上往往是叫 <code>yourfile.exe</code>）</p><p>然后，你就可以在终端中运行这个可执行文件了：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./yourfile</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>./</code> 表示当前文件夹，<code>yourfile</code> 是你的可执行文件名，这样，你的程序就会在终端中运行了！</p><h2 id="试一试" tabindex="-1"><a class="header-anchor" href="#试一试"><span>试一试！</span></a></h2><p>编写一个简单的 C 语言程序，随便在命令行上打印一点东西！</p>`,42)]))}const d=s(p,[["render",i]]),r=JSON.parse(`{"path":"/posts/CPL-Remake/1.html","title":"1. 最初的起点","lang":"zh-CN","frontmatter":{"title":"1. 最初的起点","date":"2025-07-28T00:00:00.000Z","icon":"baby","order":2,"category":["CPL"],"tag":["C Programming Language"],"author":"Kingcq","description":"C Programming Language C 语言是自然语言，这意味着编写的时候，我们能像说话一样很清晰地表达自己的意思，例如： 我们先不管这段代码的语法结构等，我们能够很轻松地看懂，它是在屏幕上输出 \\"Hello, world!\\" 这句话，然后程序结束。 那我们现在来分别介绍一下每句话做了什么： C 语言是一款非常自然的语言，对吧？我们在说话的时...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 最初的起点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-28T13:56:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-Remake/1.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"1. 最初的起点"}],["meta",{"property":"og:description","content":"C Programming Language C 语言是自然语言，这意味着编写的时候，我们能像说话一样很清晰地表达自己的意思，例如： 我们先不管这段代码的语法结构等，我们能够很轻松地看懂，它是在屏幕上输出 \\"Hello, world!\\" 这句话，然后程序结束。 那我们现在来分别介绍一下每句话做了什么： C 语言是一款非常自然的语言，对吧？我们在说话的时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T13:56:31.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"C Programming Language"}],["meta",{"property":"article:published_time","content":"2025-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T13:56:31.000Z"}]]},"git":{"createdTime":1753702289000,"updatedTime":1753710991000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":2,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":5.15,"words":1546},"filePathRelative":"posts/CPL-Remake/1.md","excerpt":"<h2>C Programming Language</h2>\\n<p>C 语言是自然语言，这意味着编写的时候，我们能像说话一样很清晰地表达自己的意思，例如：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, world!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,r as data};
