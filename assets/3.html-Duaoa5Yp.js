import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-CzMZbJz4.js";const t={};function c(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h2><p>写一个代码判断输入的数是正数、负数还是零，当你到手这个需求的时候，你会发现，按照目前为止学过的知识搞不出来，必须要有表达类似 <code>如果…，那么就…，否则就…</code> 这样的语句才行</p><p>换成英文来说就是 <code>if…then…else…</code>，而 C 语言就有差不多这样的表达。在执行顺序看上去，就像是代码在此处进入了岔路口，必须要根据不同的条件选择一条分支来执行，因此，判断语句又被称为分支语句</p><p>例如，对于这个需求，我们可以这样写：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;正数\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;负数\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;零\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>因为 <code>if</code> 语句和一般的函数调用不太相同，所以我更喜欢在之后加一个空格，这样看上去更美观一些，之后的 <code>for</code> 等语句同理</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>if</code> 语句的子代码块不是必须用 <code>{}</code> 包裹的，但是为了代码的可读性考虑，建议还是加上 <code>{}</code>，这样代码的可读性会大大提高，也是一种非常良好的代码编写规范，即使这会让代码看上去更长。</p></div><p>接下来我们来详细剖析一下 <code>if</code> 语句的用法</p><p>最基础的 <code>if</code> 语句非常简单，就长这样：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>condition</code> 是一个条件表达式，它的<em>最终结果可以是任意整数</em>，当这个整数不为零，则条件成立，执行内部的操作，否则，跳过内部的操作，继续执行后面的代码</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>再提醒一次，C 语言中的 <code>if</code> 的判断条件<em>非零即真</em>！</p></div><p>如果条件不成立，你也需要执行一些操作，那么你可以使用 <code>else</code> 语句，它表示“否则”的意思，例如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something else</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要判断多个条件，可以连续使用 <code>if else</code> 语句，组成 <em>combo</em>，例如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something else</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something else</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意，当一个 <code>else</code> 被编写出来后，它会找到离自己最近的 <code>if</code> 进行匹配，在编写逻辑判断语句的时候，最好写完之后重看一遍，确定自己的逻辑是正确的！</p></div>`,17)]))}const u=s(t,[["render",c]]),d=JSON.parse(`{"path":"/posts/CPL-Remake/3.html","title":"3. 分支、循环和数组","lang":"zh-CN","frontmatter":{"title":"3. 分支、循环和数组","date":"2025-07-28T00:00:00.000Z","icon":"bug","order":4,"category":["CPL"],"tag":["C Programming Language"],"author":"Kingcq","description":"分支 写一个代码判断输入的数是正数、负数还是零，当你到手这个需求的时候，你会发现，按照目前为止学过的知识搞不出来，必须要有表达类似 如果…，那么就…，否则就… 这样的语句才行 换成英文来说就是 if…then…else…，而 C 语言就有差不多这样的表达。在执行顺序看上去，就像是代码在此处进入了岔路口，必须要根据不同的条件选择一条分支来执行，因此，判断...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. 分支、循环和数组\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-28T13:56:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-Remake/3.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"3. 分支、循环和数组"}],["meta",{"property":"og:description","content":"分支 写一个代码判断输入的数是正数、负数还是零，当你到手这个需求的时候，你会发现，按照目前为止学过的知识搞不出来，必须要有表达类似 如果…，那么就…，否则就… 这样的语句才行 换成英文来说就是 if…then…else…，而 C 语言就有差不多这样的表达。在执行顺序看上去，就像是代码在此处进入了岔路口，必须要根据不同的条件选择一条分支来执行，因此，判断..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T13:56:31.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"C Programming Language"}],["meta",{"property":"article:published_time","content":"2025-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T13:56:31.000Z"}]]},"git":{"createdTime":1753710991000,"updatedTime":1753710991000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":1,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"posts/CPL-Remake/3.md","excerpt":"<h2>分支</h2>\\n<p>写一个代码判断输入的数是正数、负数还是零，当你到手这个需求的时候，你会发现，按照目前为止学过的知识搞不出来，必须要有表达类似 <code>如果…，那么就…，否则就…</code> 这样的语句才行</p>\\n<p>换成英文来说就是 <code>if…then…else…</code>，而 C 语言就有差不多这样的表达。在执行顺序看上去，就像是代码在此处进入了岔路口，必须要根据不同的条件选择一条分支来执行，因此，判断语句又被称为分支语句</p>\\n<p>例如，对于这个需求，我们可以这样写：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"正数\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"负数\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"零\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{u as comp,d as data};
