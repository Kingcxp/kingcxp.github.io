import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as e}from"./app-BxY7PwmM.js";const t={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>data-types 中提到了一些更进阶的数据类型定义方式，在这里某 CQ 将一些内容重述，以便于更好地理解。</p><h3 id="struct" tabindex="-1"><a class="header-anchor" href="#struct"><span>struct</span></a></h3><p>C 语言不是一种面向对象语言，因此，它没有对象的概念，但是结构体如果用的好的话，也能够媲美对象。</p><p><code>struct</code> 结构体是一种复合类型，它将多个不同类型的变量组合在一起，形成一个整体。</p><p><code>struct</code> 类型的变量在定义时，会分配一段连续的内存空间，其中包含内部所有字段的空间。</p><p>在具体使用的时候，你需要先定义结构体类型及其成员，向编译器告知，你创建了这样一个类型，然后才可以使用这个类型来定义变量：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 定义结构体类型</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> data1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> data2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">double</span> data3<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义结构体变量</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Data</span> data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用结构体变量</span></span>
<span class="line">data<span class="token punctuation">.</span>data1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">data<span class="token punctuation">.</span>data2 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span></span>
<span class="line">data<span class="token punctuation">.</span>data3 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>struct</code> 可以很方便的将多个数据打包，使得程序更加的通俗易懂。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你也可以不给结构体名字，它将作为匿名结构体，你没法再在别处使用它，你只能在创建的时候立刻使用它：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> data1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> data2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">double</span> data3<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">data<span class="token punctuation">.</span>data1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用之前提到过的 <code>typedef</code>，你可以将 <code>struct</code> 类型重命名，这样在定义变量时，就不需要写 <code>struct</code> 关键字了：</p><blockquote><p>你可以在 <code>typedef</code> 定义的别名中加上 <code>_t</code> 后缀，表示这是 <code>typedef</code> 定义的类型</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Data</span> <span class="token class-name">data_t</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">data_t</span> data<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>接下来，关键的来了，我们知道 C++ 中的结构体中是可以定义方法的，那么 C 语言中有没有办法实现类似的功能呢？</p><p>有的，兄弟，有的，我们可以使用函数指针来申明一些结构体成员，在创建结构体变量实例时，我们可以将函数赋值给这些成员，这样就可以实现类似的方法功能了：</p><p>比如，我们创建一个 <code>utils_t</code> 类型，来存放一些工具函数：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> utils <span class="token class-name">utils_t</span></span>
<span class="line"><span class="token comment">// 因为只是定义，所以函数参数部分，你可以不写变量名，实现的时候还是要写的</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">utils</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>swap<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>max<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>min<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 实现这些函数</span></span>
<span class="line"><span class="token comment">// 为避免重名，你最好加上前缀</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">utils_swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">*</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">utils_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">utils_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在使用时，动态创建 \`utils_t\` 实例，在使用过后也指定销毁方法</span></span>
<span class="line"><span class="token comment">// 这样看上去麻烦，但反而更有利于代码的管理</span></span>
<span class="line"><span class="token comment">// 比如说你需要在创建时初始化一些字段值，在销毁时做一些清理工作，这样写就会很好改动。</span></span>
<span class="line"><span class="token class-name">utils_t</span> <span class="token operator">*</span><span class="token function">create_utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">utils_t</span> <span class="token operator">*</span>this <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">utils_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    this<span class="token operator">-&gt;</span>swap <span class="token operator">=</span> utils_swap<span class="token punctuation">;</span></span>
<span class="line">    this<span class="token operator">-&gt;</span>max <span class="token operator">=</span> utils_max<span class="token punctuation">;</span></span>
<span class="line">    this<span class="token operator">-&gt;</span>min <span class="token operator">=</span> utils_min<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> this<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">destroy_utils</span><span class="token punctuation">(</span><span class="token class-name">utils_t</span> <span class="token operator">*</span>this<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">free</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>上面定义的方法都相当于是静态方法，这些方法不会与实例进行交互，如果一些方法涉及到与结构体实例发生交互，你只能通过传入实例来实现，像这样：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Dog</span> <span class="token class-name">dog_t</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>grow<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">dog_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 \`this\`，让含义更贴近面向对象表达</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">dog_grow</span><span class="token punctuation">(</span><span class="token class-name">dog_t</span><span class="token operator">*</span> this<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    this<span class="token operator">-&gt;</span>age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token comment">// 使用</span></span>
<span class="line">dog<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="union" tabindex="-1"><a class="header-anchor" href="#union"><span>union</span></a></h3><p><code>union</code> 联合体，与 <code>struct</code> 结构体类似，但是它只能存放一种数据类型，而且所有字段共享同一块内存空间，因此，联合体的大小等于其中最大的字段的大小。</p><p>联合体通常用于存储一些互斥的数据，比如，一个变量，它可能是整数，也可能是浮点数，也可能是字符，那么就可以使用联合体来存储，这样在存储时，只需要分配一块内存空间即可。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">union</span> Data <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> data1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> data2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">double</span> data3<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">union</span> Data data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">data<span class="token punctuation">.</span>data1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 此时，data2 和 data3 的值将不可预测</span></span>
<span class="line">data<span class="token punctuation">.</span>data2 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 此时，data1 和 data3 的值将不可预测</span></span>
<span class="line">data<span class="token punctuation">.</span>data3 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 此时，data1 和 data2 的值将不可预测</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>union</code> 只是一种辅助手段，如果滥用，他只会严重破坏代码的可读性。你只应当在清楚自己到底在做什么的时候使用它。</p><p>题单链接：</p><p><a href="https://www.luogu.com.cn/training/249952" target="_blank" rel="noopener noreferrer">南哪2022-7-data-types - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>这次只有三道题</p>`,23)]))}const u=s(t,[["render",c],["__file","7.html.vue"]]),d=JSON.parse(`{"path":"/posts/DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/7.html","title":"南哪 2022-7-data-types","lang":"zh-CN","frontmatter":{"title":"南哪 2022-7-data-types","date":"2022-11-13T00:00:00.000Z","icon":"face-grin-beam-sweat","order":11,"category":["CPL DotOJ 补完计划"],"tag":["CPL","DotOJ"],"author":"Kingcq","description":"data-types 中提到了一些更进阶的数据类型定义方式，在这里某 CQ 将一些内容重述，以便于更好地理解。 struct C 语言不是一种面向对象语言，因此，它没有对象的概念，但是结构体如果用的好的话，也能够媲美对象。 struct 结构体是一种复合类型，它将多个不同类型的变量组合在一起，形成一个整体。 struct 类型的变量在定义时，会分配一段...","head":[["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/7.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"南哪 2022-7-data-types"}],["meta",{"property":"og:description","content":"data-types 中提到了一些更进阶的数据类型定义方式，在这里某 CQ 将一些内容重述，以便于更好地理解。 struct C 语言不是一种面向对象语言，因此，它没有对象的概念，但是结构体如果用的好的话，也能够媲美对象。 struct 结构体是一种复合类型，它将多个不同类型的变量组合在一起，形成一个整体。 struct 类型的变量在定义时，会分配一段..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-05T07:41:30.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:tag","content":"DotOJ"}],["meta",{"property":"article:published_time","content":"2022-11-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-05T07:41:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"南哪 2022-7-data-types\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-05T07:41:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"]]},"headers":[{"level":3,"title":"struct","slug":"struct","link":"#struct","children":[]},{"level":3,"title":"union","slug":"union","link":"#union","children":[]}],"git":{"createdTime":1738740544000,"updatedTime":1738741290000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":2,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":3.87,"words":1162},"filePathRelative":"posts/DotOJ-补完计划/7.md","localizedDate":"2022年11月13日","excerpt":"<p>data-types 中提到了一些更进阶的数据类型定义方式，在这里某 CQ 将一些内容重述，以便于更好地理解。</p>\\n<h3>struct</h3>\\n<p>C 语言不是一种面向对象语言，因此，它没有对象的概念，但是结构体如果用的好的话，也能够媲美对象。</p>\\n<p><code>struct</code> 结构体是一种复合类型，它将多个不同类型的变量组合在一起，形成一个整体。</p>\\n<p><code>struct</code> 类型的变量在定义时，会分配一段连续的内存空间，其中包含内部所有字段的空间。</p>\\n<p>在具体使用的时候，你需要先定义结构体类型及其成员，向编译器告知，你创建了这样一个类型，然后才可以使用这个类型来定义变量：</p>","autoDesc":true}`);export{u as comp,d as data};
