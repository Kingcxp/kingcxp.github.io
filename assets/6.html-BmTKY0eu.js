import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as t}from"./app-BBnF5_qW.js";const e={};function c(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h2><p>结构体 <code>struct</code> 是 C 语言中的一种特殊变量类型，它能将不同类型的数据组合成一个整体：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">// 定义一个名为 Data 的结构体类型</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">info</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> a<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">char</span> b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">float</span> c<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">info</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">3.14f</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 定义并初始化一个 Data 类型的变量 data</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你也可以不给结构体名字，它将作为匿名结构体，你没法再在别处使用它，你只能在创建的时候立刻使用它：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> data1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">char</span> data2<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">double</span> data3<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">data<span class="token punctuation">.</span>data1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>配合 <code>typedef</code> 语法，你可以通过创建类型别名省去结构体定义时所需要写的 <code>struct</code>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token class-name">data_t</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 不需要写 struct</span></span>
<span class="line"><span class="token class-name">data_t</span> data<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>结构体变量类型的命名规则也是使用 <code>snake_case</code> 命名法，即小写字母和下划线组合，并且首字母小写。</p><p>但如果你使用了 <code>typedef</code> 语法创建了别名，你应当在后面加上 <code>_t</code> 后缀，以使表达更加清楚。</p></div><p>那么，结构体可以储存变量我明白了，那我如果想把函数也打包进来，作为这个数据类型所创建的变量能够使用的方法，有没有办法呢？</p><p>有的，兄弟，有的，恰恰是这种方法，能够让 C 语言这个不是面向对象的语言变得面向对象起来！</p><div class="hint-container tip"><p class="hint-container-title">提示</p><h4 id="什么是对象" tabindex="-1"><a class="header-anchor" href="#什么是对象"><span>什么是对象？</span></a></h4><p>对象是面向对象编程（OOP）中的一个基本概念，它是一个包含数据和行为的实体。对象可以看作是现实世界中的事物或概念的抽象，它具有状态和行为。在面向对象编程中，对象是程序的基本单元，它封装了数据和操作数据的方法，并且可以与其他对象进行交互。</p><p>对象通常由两个部分组成：</p><ol><li><strong>属性（属性）</strong>：对象的属性是对象所具有的特性和特征，它描述了对象的状态。例如，一个人的属性可能包括姓名、年龄、性别等。</li><li><strong>方法（方法）</strong>：对象的方法是对象所具有的行为和操作，它描述了对象的行为。例如，一个人的方法可能包括行走、说话、吃饭等。</li></ol></div><p>但因为 C 语言不能在初始化时自动指定变量的初始值，因此我们建议自行指定结构体的创建和删除方法，并全程使用创建出来的指针访问这个变量：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果是专门为某个结构体设计的函数，我们建议使用 <code>this</code> 作为第一个参数，以表示这个函数所操作的对象。</p><p>另外，这个函数的名称应当加上这个结构体的名称作为前缀，以标注这个供给该结构体使用的函数。</p></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_cat</span> <span class="token class-name">cat_t</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">_cat</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>set_age<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">cat_t</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>speak<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">cat_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">cat_set_age</span><span class="token punctuation">(</span><span class="token class-name">cat_t</span> <span class="token operator">*</span>this<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  this<span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">cat_speak</span><span class="token punctuation">(</span><span class="token class-name">cat_t</span> <span class="token operator">*</span>this<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s: Meow~\\n&quot;</span><span class="token punctuation">,</span> this<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">cat_t</span> <span class="token operator">*</span><span class="token function">create_cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">cat_t</span> <span class="token operator">*</span>cat <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">cat_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  cat<span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 字符串需要一个 &#39;\\0&#39; 字符作为结尾标识，因此需要多分配一个字节的空间</span></span>
<span class="line">  cat<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">strcpy</span><span class="token punctuation">(</span>cat<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  cat<span class="token operator">-&gt;</span>set_age <span class="token operator">=</span> cat_set_age<span class="token punctuation">;</span></span>
<span class="line">  cat<span class="token operator">-&gt;</span>speak <span class="token operator">=</span> cat_speak<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注意，这里需要传入指针的指针，因为我们在释放后需要修改原指针的值，以防止悬空指针</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">destroy_cat</span><span class="token punctuation">(</span><span class="token class-name">cat_t</span> <span class="token operator">*</span><span class="token operator">*</span>cat<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>cat<span class="token punctuation">)</span><span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 将已经释放的指针置为 NULL，防止悬空指针，这看似无用，但是是一种好习惯</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">*</span>cat<span class="token punctuation">)</span><span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">*</span>cat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 完整使用小猫</span></span>
<span class="line">  <span class="token class-name">cat_t</span> <span class="token operator">*</span>cat <span class="token operator">=</span> <span class="token function">create_cat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  cat<span class="token operator">-&gt;</span><span class="token function">set_age</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  cat<span class="token operator">-&gt;</span><span class="token function">speak</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">destroy_cat</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> cat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 NULL</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><h4 id="什么是悬空指针" tabindex="-1"><a class="header-anchor" href="#什么是悬空指针"><span>什么是悬空指针？</span></a></h4><p>悬空指针（Dangling Pointer）是指向已释放内存的指针。当一个指针指向的内存被释放后，该指针仍然保留对已释放内存的引用，此时该指针就变成了悬空指针。悬空指针可能导致程序崩溃或产生不可预测的行为，因此在使用指针时需要特别注意避免悬空指针。</p></div><h2 id="试一试" tabindex="-1"><a class="header-anchor" href="#试一试"><span>试一试！</span></a></h2><p><a href="https://www.luogu.com.cn/training/249952#problems" target="_blank" rel="noopener noreferrer">DotOJ 补完计划 - 2022-7-data-types</a></p>`,15)]))}const u=s(e,[["render",c]]),r=JSON.parse(`{"path":"/posts/CPL-Remake/6.html","title":"6. 结构体和共用体","lang":"zh-CN","frontmatter":{"title":"6. 结构体和共用体","date":"2025-07-28T00:00:00.000Z","icon":"arrow-up-from-ground-water","order":7,"category":["CPL"],"tag":["C Programming Language"],"author":"Kingcq","description":"结构体 结构体 struct 是 C 语言中的一种特殊变量类型，它能将不同类型的数据组合成一个整体： 提示 你也可以不给结构体名字，它将作为匿名结构体，你没法再在别处使用它，你只能在创建的时候立刻使用它： 提示 配合 typedef 语法，你可以通过创建类型别名省去结构体定义时所需要写的 struct： 提示 结构体变量类型的命名规则也是使用 snak...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. 结构体和共用体\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-29T05:16:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-Remake/6.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"6. 结构体和共用体"}],["meta",{"property":"og:description","content":"结构体 结构体 struct 是 C 语言中的一种特殊变量类型，它能将不同类型的数据组合成一个整体： 提示 你也可以不给结构体名字，它将作为匿名结构体，你没法再在别处使用它，你只能在创建的时候立刻使用它： 提示 配合 typedef 语法，你可以通过创建类型别名省去结构体定义时所需要写的 struct： 提示 结构体变量类型的命名规则也是使用 snak..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-29T05:16:13.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"C Programming Language"}],["meta",{"property":"article:published_time","content":"2025-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-29T05:16:13.000Z"}]]},"git":{"createdTime":1753766173000,"updatedTime":1753766173000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":1,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":3.64,"words":1093},"filePathRelative":"posts/CPL-Remake/6.md","excerpt":"<h2>结构体</h2>\\n<p>结构体 <code>struct</code> 是 C 语言中的一种特殊变量类型，它能将不同类型的数据组合成一个整体：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token comment\\">// 定义一个名为 Data 的结构体类型</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">info</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">char</span> b<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">float</span> c<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">info</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token char\\">'a'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3.14f</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 定义并初始化一个 Data 类型的变量 data</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{u as comp,r as data};
