import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,o as c}from"./app-70ZglK5M.js";const p={};function o(t,s){return c(),n("div",null,s[0]||(s[0]=[e(`<h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>什么是变量？顾名思义，变量是一个可以被改变的量。在计算机中，变量是用来存储数据的容器。变量可以存储各种类型的数据，如整数、浮点数、字符串等。</p><p>在 C 语言中，变量可以被声明，你需要在声明时指定变量的类型和名称。</p><p>此外，你可以使用 <code>赋值符号（=）</code> 来给变量赋值。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> number <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> letter <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>赋值符号（=）是 C 语言中的赋值运算符，用于将右侧的值赋给左侧的变量。</p><p>赋值符号的左侧只能是指定的变量，右侧可以是任何结果满足被赋值变量类型的表达式。</p></div><p>如果许多个变量具有相同的类型，你可以使用逗号分隔符来声明多个变量：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="变量的作用域" tabindex="-1"><a class="header-anchor" href="#变量的作用域"><span>变量的作用域</span></a></h3><p>变量的作用域表示该变量在程序中可以被正确访问的范围。</p><p>对于于全局变量，它们在整个程序中都可以被访问。全局变量通常在函数外部声明：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">// 这里不可以访问 PI</span></span>
<span class="line"><span class="token keyword">int</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span></span>
<span class="line"><span class="token comment">// 这里可以访问 PI</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这里可以访问 PI</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>为保证全局变量的安全性，一般将全局变量声明为常量或静态变量。</p><p>常量和静态变量的含义会在稍后提到</p></div><p>而对于大括号 <code>{}</code> 内部声明的变量，它们只能在当前大括号内被访问。这种变量被称为局部变量：</p><p>局部变量一旦离开其声明的大括号，就会立刻被销毁，此后再也无法访问。</p><p>此外，变量需要先声明才能够被使用</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这里也访问不到 a</span></span>
<span class="line">  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span></span>
<span class="line">  <span class="token comment">// 这里可以访问到 a</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 这里访问不到 a</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量和静态变量" tabindex="-1"><a class="header-anchor" href="#常量和静态变量"><span>常量和静态变量</span></a></h3><p>常量（const）和静态变量（static）是 C 语言中的两种特殊变量。</p><p>常量是一种不能被修改的变量。在声明常量时，需要使用 <code>const</code> 关键字。常量通常用于表示不会改变的值，如圆周率、自然对数的底数等。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>静态变量是一种在整个程序运行期间都存在的变量。在声明静态变量时，需要使用 <code>static</code> 关键字。静态变量通常用于表示需要在函数调用之间保持状态的变量，如计数器、累加器等。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>静态变量的特点在于，即使离开变量所在的作用域，静态变量不会被销毁，并仍然保持其值不变：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> count<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，每次调用上面的 <code>counter()</code> 函数，<code>count</code> 的值都会增加 1，而不是每次都返回 1。</p><h3 id="变量的命名规则" tabindex="-1"><a class="header-anchor" href="#变量的命名规则"><span>变量的命名规则</span></a></h3><p>在 C 语言中，变量命名我们一般遵循以下规则</p><ul><li>对于一般的局部变量和函数，变量名一般使用小写字母，单词之间使用下划线 <code>_</code> 分隔，即 <code>snake_case</code> 命名法</li><li>也可以使用匈牙利命名法，即变量名以类型前缀开头，之后名称每个单词首字母大写，如 <code>int iAge</code>，<code>float fpNumber</code>，但个人觉得这种命名方式非常丑而且没有必要。</li><li>对于常量，变量名一般使用大写字母，单词之间使用下划线 <code>_</code> 分隔，即 <code>UPPER_CASE</code> 命名法</li><li>其它的命名规则会在说到对应的语法时提到</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>在 C 语言中，数据类型用于表示变量可以存储的数据类型。C 语言中的数据类型包括以下几种：</p><ul><li>整型（<code>short</code>、<code>int</code>、<code>long long</code>）（对应类型分 <code>signed</code> 和 <code>unsigned</code>）</li><li>浮点型（<code>float</code>、<code>double</code>、<code>long double</code>）</li><li>字符型（<code>char</code>）</li><li>布尔型（<code>bool</code>）（C 语言需要包含头文件 <code>stdbool.h</code>）</li><li>其它类型（进度未解锁）</li></ul><h3 id="整型" tabindex="-1"><a class="header-anchor" href="#整型"><span>整型</span></a></h3><h4 id="short" tabindex="-1"><a class="header-anchor" href="#short"><span>short</span></a></h4><p><code>short</code> 是一种较小的整数类型，占用 2 个字节（16 位）的内存空间。</p><p>既然它占用了二进制上 16 位的空间，那么它最大能是多少呢？</p><p>首先，当我们定义整型类型时，它默认是 <code>signed</code> 整型类型，即代表它有符号，因此，还需要牺牲一位二进制位表示符号的正负</p><p>因此，<code>short</code> 实际上只拥有 15 位来表示数值，而 15 位二进制数能够表示的最大值是 <code>32767</code>，最小值是 <code>-32768</code></p><p>而如果你不需要符号，你可以在定义 <code>short</code> 类型时，使用 <code>unsigned</code> 关键字来表示无符号整型，这样，<code>short</code> 就拥有 16 位来表示数值，因此，它的最大值是 <code>65535</code>，最小值是 <code>0</code>：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>之后的整型类型只在存储空间上有区别，之后的就不详细讲解了</p><div class="hint-container tip"><p class="hint-container-title">提示</p><h5 id="为啥最小值可以比最大值多-1" tabindex="-1"><a class="header-anchor" href="#为啥最小值可以比最大值多-1"><span>为啥最小值可以比最大值多 1？</span></a></h5><p>因为 <code>short</code> 的二进制表示中，最高位是符号位，当符号位为 1 时，表示负数，当符号位为 0 时，表示正数。</p><p>因此，当符号位为 1 时，表示负数，而负数的表示方式是补码表示法，即最高位为 1（表示为负数），其余位取反，然后加 1。</p><p>那 <code>-0</code> 这个数怎么办呢？在这个时候，符号位就会被直接解释为负数，因此，<code>-0</code> 就被解释为 <code>-32768</code>。</p><p>这也是为什么，当你取 <code>32767 + 1</code> 时，得到的却是 <code>-32768</code> 了</p><h5 id="为什么负数要使用补码表示法" tabindex="-1"><a class="header-anchor" href="#为什么负数要使用补码表示法"><span>为什么负数要使用补码表示法？</span></a></h5><p>减法需要退位，但计算机的设计是每位分开计算的，只能用 1 位的临时寄存器来记录进位，退位操作根本无法实现</p><p>因此，出现了补码表示法，它是来想办法将减法转换为加法的</p><h5 id="补码怎么想出来的" tabindex="-1"><a class="header-anchor" href="#补码怎么想出来的"><span>补码怎么想出来的？</span></a></h5><p>如果说一个数减去 <code>x</code> 和一个数加上 <code>y</code> 相等，那么是不是可以得到，<code>y = -x</code>？</p><p>那不对啊，在二进制上，没有办法表示 <code>-x</code> 啊？</p><p>有的，兄弟，有的，回想起我们小学学过的整数除法，是不是有 <code>商余</code> 的概念？</p><p>举个例子让你回想起来：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token number">4</span> ÷ <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">1</span> …… <span class="token number">1</span></span>
<span class="line"><span class="token number">7</span> ÷ <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">2</span> …… <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>那这样的话，4 和 7 在同时整除三之后，是不是相等的？</p><p>同理，对于 <code>short</code> 类型，能用来表示数字的只有 16 位，当我们得到的结果超过 16 位时，多出来的那一位就会被丢弃，因此，两个数字相加，实际上得到的结果是除以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span></span></span></span> 的余数</p><p>那么我们回到除 <code>3</code> 的情景，如果我现在要得到 <code>4 - 2</code> 在整除 3 之后得到的结果，那显然它是 <code>2</code></p><p>那有没有另外一个数字，能让 <code>4</code> 加上它再整除 <code>3</code> 之后得到的结果还是 <code>2</code> 呢？</p><p>答案自然是有的，我们找到最小的一个正整数，也就是 <code>1</code></p><p>那么在同时除以三的基础上，加上 <code>1</code> 就相当于将原来的数字减去 <code>2</code>，因此，<code>1</code> 在这里就可以看作是 <code>-2</code> 的补码</p><p>再仔细一瞧，您猜怎么着？<code>1 + 2</code> 正好就是 <code>3</code>，也就是原本要被整除的那个数</p><p>那同理推断，一个负整数 <code>short</code> 的变量，加上它的补码，得到的结果就是原本要被整除的那个数</p><p>所以补码的值就很好计算了，只需要将原本的数字取反，然后加 <code>1</code> 就可以得到补码了</p></div><h4 id="int" tabindex="-1"><a class="header-anchor" href="#int"><span>int</span></a></h4><p><code>int</code> 是一种标准的整数类型，占用 4 个字节（32 位）的内存空间。</p><p>通常情况下，<code>int</code> 的最大值是 <code>2147483647</code>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>），最小值是 <code>-2147483648</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>int</code> 的大小范围建议牢记，一些题目可能会在数据范围上作文章，大多围绕 <code>int</code> 的范围来出题，因此要特别小心超出 <code>int</code> 范围的情况</p></div><h4 id="long-long" tabindex="-1"><a class="header-anchor" href="#long-long"><span>long long</span></a></h4><p><code>long long</code> 是一种非常大的整数类型，占用 8 个字节（64 位）的内存空间。</p><h3 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型"><span>浮点型</span></a></h3><h4 id="float" tabindex="-1"><a class="header-anchor" href="#float"><span>float</span></a></h4><p><code>float</code> 是一种单精度浮点数类型，占用 4 个字节（32 位）的内存空间。</p><h4 id="double" tabindex="-1"><a class="header-anchor" href="#double"><span>double</span></a></h4><p><code>double</code> 是一种双精度浮点数类型，占用 8 个字节（64 位）的内存空间。</p><h4 id="long-double" tabindex="-1"><a class="header-anchor" href="#long-double"><span>long double</span></a></h4><p><code>long double</code> 是一种扩展精度浮点数类型，占用 10/16 个字节（80 / 128 位）的内存空间。具体占用大小因平台而异</p><hr><p>如果直接写小数运算，那么 C 语言默认使用的是 <code>double</code> 类型，一般来说，<code>double</code> 的大小也够用，一般不会用到 <code>long double</code> 类型</p><p>浮点型变量的存储格式采取 <a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener noreferrer">IEEE 754</a> 格式，因为展开讲起来有些麻烦，所以就不展开了，一般来说考前看一眼就够用，一般也用不上这么精细</p><h3 id="字符型" tabindex="-1"><a class="header-anchor" href="#字符型"><span>字符型</span></a></h3><h4 id="char" tabindex="-1"><a class="header-anchor" href="#char"><span>char</span></a></h4><p><code>char</code> 是一种字符类型，占用 1 个字节（8 位）的内存空间。</p><p><code>char</code> 类型的变量可以存储一个字符，如字母、数字、符号等。</p><p>字符需要用单引号 <code>&#39;</code> 括起来，如 <code>&#39;A&#39;</code>、<code>&#39;1&#39;</code>、<code>&#39;!&#39;</code> 等。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">char</span> letter <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>char</code> 类型的变量实际上存储的是字符的 <code>ASCII</code> 码值，因此，<code>char</code> 类型的变量也可以存储整数，并参与整数运算：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 C 语言中，<code>char</code> 默认是 <code>signed</code> 格式，这会导致它浪费了 128 个值，而 <code>128 ~ 255</code> 实际上是存在对应字符的，因此，在使用 <code>char</code> 输出 <code>ASCII</code> 码大于 <code>127</code> 的字符时，务必注意 <code>char</code> 此时是 <code>unsigned</code> 还是 <code>signed</code> 格式</p><h3 id="布尔型" tabindex="-1"><a class="header-anchor" href="#布尔型"><span>布尔型</span></a></h3><h4 id="bool" tabindex="-1"><a class="header-anchor" href="#bool"><span>bool</span></a></h4><p><code>bool</code> 是一种二元类型，理论上应该只需要占用 1 个二进制位，但很遗憾，因为地址空间的申请必须按照字节大小对齐，因此，<code>bool</code> 类型实际上占用 1 个字节（8 位）的内存空间。</p><p><code>bool</code> 类型的变量只能存储 <code>true</code> 或 <code>false</code> 两个值。</p><p>因此，实际上 <code>true = 1</code>，<code>false = 0</code></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出"><span>输入输出</span></a></h2><p>在 C 语言中，输入输出是使用 <code>scanf</code> 和 <code>printf</code> 函数来实现的，当然，也有 <code>putchar</code>，<code>getchar</code> 这种更加原始的方法。</p><p>要使用它们，需要先包含头文件 <code>stdio.h</code></p><h3 id="scanf" tabindex="-1"><a class="header-anchor" href="#scanf"><span>scanf</span></a></h3><p><code>scanf</code> 函数用于从标准输入读取数据，并将其存储到指定的变量中。</p><p><code>scanf</code> 函数的语法如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>format</code> 的类型目前尚未解锁，稍安勿躁哦~</p></div><p>其中，<code>format</code> 是一个字符串，用于指定输入数据的格式，<code>...</code> 表示可以接受任意数量的参数，这些参数是用于存储输入数据的变量。</p><p>例如，以下代码从标准输入读取一个整数和一个浮点数，并将其存储到 <code>a</code> 和 <code>b</code> 变量中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%f&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>%d</code> 表示读取一个整数，<code>%f</code> 表示读取一个浮点数，<code>&amp;a</code> 和 <code>&amp;b</code> 表示将读取的数据存储到 <code>a</code> 和 <code>b</code> 变量中。</p><p>这里的 <code>&amp;</code> 表示取地址，含义是，将变量所存储的位置告诉 <code>scanf</code> 函数，这样 <code>scanf</code> 函数才能将读取的数据存储到这个位置。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>虽然 <code>scanf</code> 可以指定输入的格式，但实际上当你不指定格式，只是一味的写 <code>%?</code>时，<code>scanf</code> 还是会自动忽略两个输入之间的空白符，因此，反而不必担心输入的格式问题</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><em><code>%</code> 号表示法</em></p><p><code>%</code> 号表示法用于指定输入输出的格式。例如，<code>%d</code> 表示输入输出一个整数，<code>%f</code> 表示输入输出一个浮点数，<code>%c</code> 表示输入输出一个字符，<code>%s</code> 表示输入输出一个字符串。</p><p>其它的一些用法会在之后提到，或可自行查阅</p></div><h3 id="printf" tabindex="-1"><a class="header-anchor" href="#printf"><span>printf</span></a></h3><p><code>printf</code> 函数用于将数据输出到标准输出。</p><p><code>printf</code> 函数的语法如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>format</code> 是一个字符串，用于指定输出数据的格式，<code>...</code> 表示可以接受任意数量的参数，这些参数是要输出的数据。</p><p>例如，以下代码将整数 <code>a</code> 和浮点数 <code>b</code> 输出到标准输出：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %f\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\\n</code> 表示换行符，它们俩合在一起表示一个字符</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>\\</code> 转义符号</p><p><code>\\</code> 是转义符号，用于表示特殊的字符。例如，<code>\\n</code> 表示换行符，<code>\\t</code> 表示制表符，<code>\\&quot;</code> 表示双引号，<code>\\&#39;</code>表示单引号。</p><p>在字符串中，如果需要输出反斜杠，需要使用两个反斜杠 <code>\\\\</code> 来表示一个反斜杠</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>printf</code> 的输出格式还能有更多花样，这里挑几个比较好用的：</p><ul><li>&quot;%?d&quot;：输出一个整数，其中 <code>?</code> 表示输出的位数，如果输出的位数不足，则会在前面补空格，如果超出位数，则照常输出不会有变化</li><li>&quot;%?f&quot;：和上一个同理，但是是浮点数</li><li>&quot;%x&quot;：输出一个整数，以十六进制的形式输出，也可以用来输入</li><li>&quot;%X&quot;：和上一个同理，但是是十六进制的大写形式</li><li>&quot;%.?d&quot;：输出一个整数，其中 <code>?</code> 表示输出的位数，如果输出的位数不足，则会在前面补零，如果超出位数，则不会起作用</li><li>&quot;%.?f&quot;：输出一个浮点数，其中 <code>?</code> 表示保留小数的位数，如果输出的位数不足，则会在后面补零，如果超出位数，则会将超出的部分截掉</li><li>&quot;%?.?d&quot;：相当于之前提到的两种方法的结合</li><li>&quot;%?.?f&quot;：同理</li></ul></div><h3 id="getchar" tabindex="-1"><a class="header-anchor" href="#getchar"><span>getchar</span></a></h3><p><code>getchar</code> 函数用于从标准输入<em>严格</em>读取下一个字符，这意味着读取的字符也包含换行符、空格等。</p><p><code>getchar</code> 函数的语法如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>getchar</code> 函数返回读取的字符的 <code>ASCII</code> 码值</p><p>例如，以下代码从标准输入读取一个字符，并将其存储到 <code>c</code> 变量中：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="putchar" tabindex="-1"><a class="header-anchor" href="#putchar"><span>putchar</span></a></h3><p><code>putchar</code> 函数用于将一个字符输出到标准输出。</p><p><code>putchar</code> 函数的语法如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>putchar</code> 函数接受一个整数参数 <code>c</code>，表示要输出的字符的 <code>ASCII</code> 码值。</p><p>例如，以下代码将字符 <code>c</code> 输出到标准输出：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><p>算术运算符用于执行基本的算术运算，包括加法、减法、乘法、除法和取模运算。</p><ul><li><code>+</code>：加法运算符，用于将两个操作数相加。</li><li><code>-</code>：减法运算符，用于将一个操作数减去另一个操作数。</li><li><code>*</code>：乘法运算符，用于将两个操作数相乘。</li><li><code>/</code>：除法运算符，用于将一个操作数除以另一个操作数。对于整数除法，结果会舍去小数部分。</li><li><code>%</code>：取模运算符，用于计算两个操作数的余数。</li><li><code>++</code>：自增运算符，用于将操作数加 1。</li><li><code>--</code>：自减运算符，用于将操作数减 1。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>++</code> 和 <code>--</code> 这两个运算符有说法，它们可以放在操作数的前面，也可以放在操作数的后面，放在前面表示先加 1 或减 1，再进行运算，放在后面表示先进行运算，再加 1 或减 1<br> 例如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">// a = 2, b = 2</span></span>
<span class="line"><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// c = 2, a = 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><p>位运算符用于对整数进行位操作。</p><ul><li><code>&amp;</code>：按位与运算符，用于将两个操作数的对应位进行与运算。</li><li><code>|</code>：按位或运算符，用于将两个操作数的对应位进行或运算。</li><li><code>^</code>：按位异或运算符，用于将两个操作数的对应位进行异或运算。</li><li><code>~</code>：按位取反运算符，用于将操作数的所有位进行取反运算。</li><li><code>&lt;&lt;</code>：左移运算符，用于将操作数的所有位向左移动指定的位数。</li><li><code>&gt;&gt;</code>：右移运算符，用于将操作数的所有位向右移动指定的位数。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>位运算符的优先级较低，因此在使用时需要注意运算符的优先级，建议多使用括号来明确运算顺序。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>位运算的速度比算术运算快很多，因此，在一些可以用位运算符替代算术运算的地方，可以试试使用位运算符！</p></div><h3 id="特殊的加减方式" tabindex="-1"><a class="header-anchor" href="#特殊的加减方式"><span>特殊的加减方式</span></a></h3><p>对于变量，除了 <code>x = x + 1</code> 这种赋值方法，你也可以使用类似 <code>x += 1</code> 这种赋值方法，即将运算符提前，这样的写法对于大部分的二目运算符都可以使用。这样写的好处是代码更加简洁，但请确定好运算符之间的运算顺序，否则可能会出现意想不到的结果</p><h2 id="试一试" tabindex="-1"><a class="header-anchor" href="#试一试"><span>试一试！</span></a></h2><p><a href="https://www.luogu.com.cn/training/242331#problems" target="_blank" rel="noopener noreferrer">DotOJ 补完计划 - 南哪 2022-0-intro</a><br><a href="https://www.luogu.com.cn/training/242380#problems" target="_blank" rel="noopener noreferrer">DotOJ 补完计划 - 南哪 2022-1-types-io</a></p>`,126)]))}const d=a(p,[["render",o]]),r=JSON.parse(`{"path":"/posts/CPL-Remake/2.html","title":"2. 变量和数据类型","lang":"zh-CN","frontmatter":{"title":"2. 变量和数据类型","date":"2025-07-28T00:00:00.000Z","icon":"baby-carriage","order":3,"category":["CPL"],"tag":["C Programming Language"],"author":"Kingcq","description":"变量 什么是变量？顾名思义，变量是一个可以被改变的量。在计算机中，变量是用来存储数据的容器。变量可以存储各种类型的数据，如整数、浮点数、字符串等。 在 C 语言中，变量可以被声明，你需要在声明时指定变量的类型和名称。 此外，你可以使用 赋值符号（=） 来给变量赋值。 提示 赋值符号（=）是 C 语言中的赋值运算符，用于将右侧的值赋给左侧的变量。 赋值符...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. 变量和数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-29T05:16:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-Remake/2.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"2. 变量和数据类型"}],["meta",{"property":"og:description","content":"变量 什么是变量？顾名思义，变量是一个可以被改变的量。在计算机中，变量是用来存储数据的容器。变量可以存储各种类型的数据，如整数、浮点数、字符串等。 在 C 语言中，变量可以被声明，你需要在声明时指定变量的类型和名称。 此外，你可以使用 赋值符号（=） 来给变量赋值。 提示 赋值符号（=）是 C 语言中的赋值运算符，用于将右侧的值赋给左侧的变量。 赋值符..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-29T05:16:13.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"C Programming Language"}],["meta",{"property":"article:published_time","content":"2025-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-29T05:16:13.000Z"}]]},"git":{"createdTime":1753702289000,"updatedTime":1753766173000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":3,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":14.16,"words":4247},"filePathRelative":"posts/CPL-Remake/2.md","excerpt":"<h2>变量</h2>\\n<p>什么是变量？顾名思义，变量是一个可以被改变的量。在计算机中，变量是用来存储数据的容器。变量可以存储各种类型的数据，如整数、浮点数、字符串等。</p>\\n<p>在 C 语言中，变量可以被声明，你需要在声明时指定变量的类型和名称。</p>\\n<p>此外，你可以使用 <code>赋值符号（=）</code> 来给变量赋值。</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token keyword\\">int</span> age <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">float</span> number <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.14159</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">char</span> letter <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'A'</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{d as comp,r as data};
