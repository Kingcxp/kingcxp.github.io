import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as o,o as a}from"./app-B6yu4Jx0.js";const p="/assets/4-1-XO9gt5vm.jpg",r="/assets/4-2-DHRVe0d_.jpg",n="/assets/4-3-BK4-wKPD.jpg",c="/assets/4-4-BNaTrFes.jpg",s={};function g(m,t){return a(),i("div",null,t[0]||(t[0]=[o('<p>在游戏中我们时常能见到某个实体围绕另一个实体做运动，它实际上是以这个被围绕的实体为参照的相对位置，如果直接使用绝对位置来计算固然可以，但是十分麻烦。比如某游戏中主角有一个闪电球始终环绕着旋转，这时我们既要考虑主角的运动情况，还要考虑到球绕着主角的旋转情况，计算起来非常地繁琐。</p><p>又没有更好的方法可以解决这个问题呢？</p><p>我们可以用“树”的结构来解决这个问题，依照上文的例子，我们把闪电球作为子节点连接到主角上，这时，我们便只需要考虑球的旋转就行，其他的位置已经由主角决定好，就相当于，坐标的变换从父节点到子节点一路叠Buff，用这种结构，我们甚至能为这个闪电球再添加围绕它的别的什么球。</p><p>每个节点的性质需要能被绘制、能做坐标系上的变换，不能被随便拷贝（防止内存泄漏），所以最后得出的结构是这样的：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实现：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>顺便，我们借着SceneNode顺便实现一下实体类（Entity），它只需要负责所有实体都会做的事情：运动。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体实现非常弱智，就不放了。</p>',11)]))}const f=e(s,[["render",g],["__file","4.html.vue"]]),u=JSON.parse(`{"path":"/posts/C__-SFML-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/4.html","title":"4. 更好的画面编排方式！","lang":"zh-CN","frontmatter":{"title":"4. 更好的画面编排方式！","date":"2024-03-17T00:00:00.000Z","icon":"paintbrush","order":4,"category":["C++ SFML"],"tag":["C++","SFML"],"author":"Kingcq","description":"在游戏中我们时常能见到某个实体围绕另一个实体做运动，它实际上是以这个被围绕的实体为参照的相对位置，如果直接使用绝对位置来计算固然可以，但是十分麻烦。比如某游戏中主角有一个闪电球始终环绕着旋转，这时我们既要考虑主角的运动情况，还要考虑到球绕着主角的旋转情况，计算起来非常地繁琐。 又没有更好的方法可以解决这个问题呢？ 我们可以用“树”的结构来解决这个问题，...","head":[["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/C__-SFML-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/4.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"4. 更好的画面编排方式！"}],["meta",{"property":"og:description","content":"在游戏中我们时常能见到某个实体围绕另一个实体做运动，它实际上是以这个被围绕的实体为参照的相对位置，如果直接使用绝对位置来计算固然可以，但是十分麻烦。比如某游戏中主角有一个闪电球始终环绕着旋转，这时我们既要考虑主角的运动情况，还要考虑到球绕着主角的旋转情况，计算起来非常地繁琐。 又没有更好的方法可以解决这个问题呢？ 我们可以用“树”的结构来解决这个问题，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-05T07:41:30.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"SFML"}],["meta",{"property":"article:published_time","content":"2024-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-05T07:41:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. 更好的画面编排方式！\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-05T07:41:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"]]},"headers":[],"git":{"createdTime":1738740544000,"updatedTime":1738741290000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":2,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":1.32,"words":397},"filePathRelative":"posts/C++-SFML-游戏开发/4.md","localizedDate":"2024年3月17日","excerpt":"<p>在游戏中我们时常能见到某个实体围绕另一个实体做运动，它实际上是以这个被围绕的实体为参照的相对位置，如果直接使用绝对位置来计算固然可以，但是十分麻烦。比如某游戏中主角有一个闪电球始终环绕着旋转，这时我们既要考虑主角的运动情况，还要考虑到球绕着主角的旋转情况，计算起来非常地繁琐。</p>\\n<p>又没有更好的方法可以解决这个问题呢？</p>\\n<p>我们可以用“树”的结构来解决这个问题，依照上文的例子，我们把闪电球作为子节点连接到主角上，这时，我们便只需要考虑球的旋转就行，其他的位置已经由主角决定好，就相当于，坐标的变换从父节点到子节点一路叠Buff，用这种结构，我们甚至能为这个闪电球再添加围绕它的别的什么球。</p>","autoDesc":true}`);export{f as comp,u as data};
