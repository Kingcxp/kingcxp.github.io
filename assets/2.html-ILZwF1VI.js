import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as p}from"./app-B6yu4Jx0.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>if-for-array。在这一章中我们学会了 C 语言编程中最基础也是最重要的两种结构：分支结构以及循环结构</p><p>以及一种最重要的写法：数组，这使得我们开始有能力处理大量的数据。</p><p><code>if</code> 语句，先来看一下用法：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;是闰年。\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;是个整十数的年份。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;貌似是个年份&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>if</code> 语句中条件成立的时候，便会执行 <code>if</code> 语句之后大括号里面的内容，如果条件不成立，且这个 <code>if</code> 后面有紧接着对应的 <code>else</code> 的时候，便会执行 <code>else</code> 之后大括号里面的内容</p><p><code>if</code> 语句可以进行嵌套，类似上面的写法，来对某个值进行分类</p><p>同时，在使用 <code>if-else</code> 语句的时候，某 CQ 希望大家无论语句多少都加上大括号，以避免一些逻辑上的问题，因为有时，<code>if</code> 里面仍然有 <code>if-else</code> ，而如果没有加大括号，编译器便会选择最近的 <code>if</code> 来作为判断条件，这可能会导致一些意料之外的结果</p><p>如果你想使用多种判断，你可以使用逻辑与(<code>&amp;&amp;</code>)还有逻辑或(<code>||</code>)来连接多个判断。</p><p>其它的逻辑判断符号除了相等(<code>==</code>)特别一些（为了和赋值语句区分开），其它的也不太容易错</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>if</code> 判断条件中非 0 即真，比如：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些if条件之后的语句可以执行</p><p>而：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>if</code> 之后的语句并不能执行。</p></div><p><code>for</code> 循环，先来看一下写法：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>for</code> 循环当中我们用两个分号将其分成了三个部分。</p><p>第一个部分是初始化部分，在其中可以直接定义一个变量，也可以直接给某个变量附上初值，也可以不填。</p><p>第二个部分是判断部分，只有判断条件成立，<code>for</code> 循环才会继续。</p><p>第三个部分是处理部分，在每次循环结束的时候，这里面的操作都会进行一次。</p><p>在每次循环结束并完成 <code>for</code> 循环中的处理部分后，<code>for</code> 循环会进行一次判断部分，如果判断不成立，<code>for</code> 循环就会结束。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可以使用 <code>continue</code> 语句来直接进入下一次循环</p><p>你可以使用 <code>break</code> 语句来直接跳出循环</p></div><p>我们还学习了数组。数组这东西好理解啊，我们把它想象成一个有限长的数列，数列中的每一个位置上都存储了一个对应类型的变量，我们需要提前指定这个数组的大小，我们也需要通过指定位置来调用某一个元素。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a 是我们建的数组的名字，我们在后面加上方括号，填上数字来告诉编译器我们想定义一个数组，长度为多少，之后我们就可以通过在方括号里填数组下标的形式来访问某一个特定的元素。</p><p>结合 <code>for</code> 循环和数组，我们便能对大量的数据进行处理，统一读入、统一输出。</p><p>一些提示：</p><p>当同学们使用 <code>for</code> 循环的时候，可以灵活运用内部的三大部分，不一定每一个部分都要死板的填上东西，只要你的思路没有错误，你可以采取更花式的写法，你也可以把 <code>for</code> 循环变成下一次要提到的 <code>while</code> 循环，因为定义和处理部分完全可以不填。</p><p>这便是 2-if-for-array 的大致内容，某 CQ 希望同学们在题单的习题中能够练习掌握这些基本结构。</p><p>我们在结尾附上位运算的运算法则：</p><p>与运算（&amp;）：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或运算（|）：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token number">0</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>异或运算（^）</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>位移运算（&lt;&lt;、&gt;&gt;）</p><p>a &lt;&lt; x 将 a 左移 x 位，相当于乘上 2 的 x 次方，右移同理</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>超出存储范围的位数将被抹除，不足的将填上0</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>位运算的速度比正常运算要快，灵活使用可以提高代码的效率，但是使用时，需要注意运算符的运算顺序，必要的情况下，尽量加上括号</p><p>比如，判断一个数是否为偶数，如果使用 <code>%</code> 运算符的话，除法的速度非常的慢，而如果使用 <code>n &amp; 1</code> 来获取 n 二进制下第一位的取值来判断的话，速度会快很多</p></div><p>题单链接：</p><p><a href="https://www.luogu.com.cn/training/242411" target="_blank" rel="noopener noreferrer">南哪2022-2-if-for-array - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>`,38)]))}const r=s(t,[["render",o],["__file","2.html.vue"]]),u=JSON.parse(`{"path":"/posts/DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/2.html","title":"南哪 2022-2-if-for-array","lang":"zh-CN","frontmatter":{"title":"南哪 2022-2-if-for-array","date":"2022-11-06T00:00:00.000Z","icon":"face-grin-beam-sweat","order":4,"category":["CPL DotOJ 补完计划"],"tag":["CPL","DotOJ"],"author":"Kingcq","description":"if-for-array。在这一章中我们学会了 C 语言编程中最基础也是最重要的两种结构：分支结构以及循环结构 以及一种最重要的写法：数组，这使得我们开始有能力处理大量的数据。 if 语句，先来看一下用法： 当 if 语句中条件成立的时候，便会执行 if 语句之后大括号里面的内容，如果条件不成立，且这个 if 后面有紧接着对应的 else 的时候，便会...","head":[["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/2.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"南哪 2022-2-if-for-array"}],["meta",{"property":"og:description","content":"if-for-array。在这一章中我们学会了 C 语言编程中最基础也是最重要的两种结构：分支结构以及循环结构 以及一种最重要的写法：数组，这使得我们开始有能力处理大量的数据。 if 语句，先来看一下用法： 当 if 语句中条件成立的时候，便会执行 if 语句之后大括号里面的内容，如果条件不成立，且这个 if 后面有紧接着对应的 else 的时候，便会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-05T07:41:30.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:tag","content":"DotOJ"}],["meta",{"property":"article:published_time","content":"2022-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-05T07:41:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"南哪 2022-2-if-for-array\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-05T07:41:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"]]},"headers":[],"git":{"createdTime":1738740544000,"updatedTime":1738741290000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":2,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":4.31,"words":1292},"filePathRelative":"posts/DotOJ-补完计划/2.md","localizedDate":"2022年11月6日","excerpt":"<p>if-for-array。在这一章中我们学会了 C 语言编程中最基础也是最重要的两种结构：分支结构以及循环结构</p>\\n<p>以及一种最重要的写法：数组，这使得我们开始有能力处理大量的数据。</p>\\n<p><code>if</code> 语句，先来看一下用法：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\" data-title=\\"c\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>year <span class=\\"token operator\\">%</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> year <span class=\\"token operator\\">%</span> <span class=\\"token number\\">100</span> <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> year <span class=\\"token operator\\">%</span> <span class=\\"token number\\">400</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"是闰年。\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>year <span class=\\"token operator\\">%</span> <span class=\\"token number\\">10</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"是个整十数的年份。\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"貌似是个年份\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{r as comp,u as data};
