import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as e}from"./app-70ZglK5M.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>大家好啊，这里是某 CQ ！</p><p>这次是第一次准时推出的C-PL dotOJ补完计划！</p><p>其实这章题目还是挺水的，老师貌似是有选择性的听取了上次开会的提议，让OJ的前几题较为简单，便于练习。</p><p>这章主要是要求我们通过函数将代码分块，各个函数解决小范围内的一些问题，然后将它们组合起来解决整个问题。</p><p>如果你并没有学习函数并能灵活使用，那么这次的OJ作业对你来说仍然十分煎熬磨人。</p><p>那么，函数究竟是干嘛用的呢？</p><p>来看下面一个例子：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x <span class="token operator">-=</span> n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x <span class="token operator">+=</span> n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（这代码当然是个死循环，不要想着去运行）</p><p>（某 CQ 将这个函数用在了约瑟夫问题当中，他发现这玩意真的很好用。）</p><p>通过写这样一个 <code>cycle</code> 函数，我们将 <code>x</code> 的值成功的限制在了 1 到 n 的范围内，使得 <code>x</code> 可以在某一范围内循环地往右运动。</p><p>你实际上可以发现函数只不过是把一些东西放到另一个地方去写罢了。这有什么用呢？</p><p>非也！当你在很多地方都要做同一种操作，你就堆在主函数里面？那自然写出来的代码是十分臃肿的。</p><p>想想不久前你可能仍然挣扎在数百行代码之中，但你会发现你实际上大部分的代码都是在复制粘贴。</p><p>如果有一种代码能够统一的表示这些操作，那该多好啊？</p><p>这就是函数的用途所在，把一些繁复的语句打包，在你想用的时候，说一声就完事了。</p><p>我们来分析一下函数的定义方法：</p><p>首先，函数是不能定义在某一个函数里面的，我们一直在写的 <code>int main()</code> 就是一个特殊的函数。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>main</code> 作为 C 语言规定的程序的入口，所有的程序都从这里开始执行，因此，每一个 C 语言程序都必须包含 <code>main</code> 函数</p></div><p>我们以上面的 <code>cycle</code> 函数为例，来解释一下函数的结构：</p><p>首先是这个函数的返回值类型：我们在 <code>cycle</code> 函数中需要获得 <code>x</code> 限制在 1 到 n 范围内的值，所以它的返回值肯定是我们想要得到的那个值，也就是一个 <code>int</code> 值。</p><p>然后是这个函数的名字，这个不必说，函数后面一定有括号，括号中可以填一些传入该函数的参数，说人话，就是告诉函数它需要知道这些值，它才能给你算出答案来。在 <code>cycle</code> 函数中我们传入了经过处理的 <code>x</code> 值，希望通过函数将它限制在 1 到 n 的范围内。</p><p>另外，如果你想要传入多个参数，你必须用逗号隔开并分别指定每一个变量的类型，即使变量类型是一样的也不行。</p><p>最后是这个函数的主体部分，具体怎么实现自然不必说，大家应该都会。</p><p>特别的，函数有一种特别的类型，叫做 <code>void</code> 函数，<code>void</code> 函数没有返回值，而仅仅是作为一个操作存在，在主函数中可以直接调用这个函数来实现这个操作。</p><p>这也是某 CQ 一直想让你们把关键的变量放在主函数外面的原因。当你将函数定义在这些变量后面的时候，因为这些变量已经声明，在函数中没有变量与之重名的情况下（注意！这个非常的重要！），你可以调用和修改这些变量！</p><p>举一个 <code>void</code> 函数的例子：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span></span>
<span class="line">        <span class="token operator">++</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>r<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这样一个函数，我们便实现了一个简单的操作：将数组从 l 到 r 这个区间反转。</p><p>（这也正是某 CQ 在这周的 E 题 下一个排列中用到的函数）</p><p>在函数的使用过程中，我们需要特别注意这一点：</p><p>当一个函数有了返回值，这个函数就会直接结束。</p><p>比如说大家可能已经尝试通过在主函数里直接 <code>return 0;</code> 来提前结束主函数，这也是一个优化的小技巧，当你的函数已经得出结论，没必要继续下去的时候，你能直接通过返回值来立即离开这个已经没有用的函数。</p><p>可能你想问，<code>void</code> 函数也能返回值吗？</p><p>当然可以啊，<code>void</code> 只要返回空的不就行了嘛，也就是说，在 <code>void</code> 函数中，你也可以使用 <code>return;</code> 来直接退出。</p><p>这样就大致讲解了函数的使用方法。</p><p>还不明白？来告诉你们一个使用实例：</p><p>本周作业 D 题，也就是确定进制那道题，你可以编写一个判断是否确认符合进制规则的函数，再编写一个将 n 进制的数转化为 10 进制的数的函数，然后判断p,q,r是否在某一个进制下符合条件？只需要在这三个数都符合条件的情况下，转化为十进制的 p 和 q 的乘积等于十进制下的 r 就行了哦</p><p>是不是感觉比不用函数的思路简单许多？</p><p>（某 CQ 表示函数真的很好用，大家一定要多加练习）</p><p>这次的题单也许会出现之前题单中出现的题目，某 CQ 这次希望大家使用函数的方法来解决这些题目。</p><p>感谢各位的收看！</p><p>题单链接：</p><p><a href="https://www.luogu.com.cn/training/243762" target="_blank" rel="noopener noreferrer">南哪2022-5-function - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>`,44)]))}const u=s(t,[["render",c]]),r=JSON.parse(`{"path":"/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/5.html","title":"南哪 2022-5-function","lang":"zh-CN","frontmatter":{"title":"南哪 2022-5-function","date":"2022-11-06T00:00:00.000Z","icon":"face-grin-beam-sweat","order":7,"category":["CPL DotOJ 补完计划"],"tag":["CPL","DotOJ"],"author":"Kingcq","description":"大家好啊，这里是某 CQ ！ 这次是第一次准时推出的C-PL dotOJ补完计划！ 其实这章题目还是挺水的，老师貌似是有选择性的听取了上次开会的提议，让OJ的前几题较为简单，便于练习。 这章主要是要求我们通过函数将代码分块，各个函数解决小范围内的一些问题，然后将它们组合起来解决整个问题。 如果你并没有学习函数并能灵活使用，那么这次的OJ作业对你来说仍然...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"南哪 2022-5-function\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-28T11:31:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/5.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"南哪 2022-5-function"}],["meta",{"property":"og:description","content":"大家好啊，这里是某 CQ ！ 这次是第一次准时推出的C-PL dotOJ补完计划！ 其实这章题目还是挺水的，老师貌似是有选择性的听取了上次开会的提议，让OJ的前几题较为简单，便于练习。 这章主要是要求我们通过函数将代码分块，各个函数解决小范围内的一些问题，然后将它们组合起来解决整个问题。 如果你并没有学习函数并能灵活使用，那么这次的OJ作业对你来说仍然..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T11:31:29.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"DotOJ"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:published_time","content":"2022-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T11:31:29.000Z"}]]},"git":{"createdTime":1738740544000,"updatedTime":1753702289000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":3,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":5.15,"words":1546},"filePathRelative":"posts/CPL-DotOJ-补完计划/5.md","excerpt":"<p>大家好啊，这里是某 CQ ！</p>\\n<p>这次是第一次准时推出的C-PL dotOJ补完计划！</p>\\n<p>其实这章题目还是挺水的，老师貌似是有选择性的听取了上次开会的提议，让OJ的前几题较为简单，便于练习。</p>\\n<p>这章主要是要求我们通过函数将代码分块，各个函数解决小范围内的一些问题，然后将它们组合起来解决整个问题。</p>\\n<p>如果你并没有学习函数并能灵活使用，那么这次的OJ作业对你来说仍然十分煎熬磨人。</p>\\n<p>那么，函数究竟是干嘛用的呢？</p>\\n<p>来看下面一个例子：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">cycle</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">&gt;</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        x <span class=\\"token operator\\">-=</span> n<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        x <span class=\\"token operator\\">+=</span> n<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> x<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        x <span class=\\"token operator\\">=</span> <span class=\\"token function\\">cycle</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{u as comp,r as data};
