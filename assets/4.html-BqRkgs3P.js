import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-70ZglK5M.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>这一章仍然在与上两章内容重复，只多了一个 <code>goto</code> 语句</p><p><code>goto</code> 语句并不建议使用，因为会造成代码逻辑的混乱，但当处在多重循环之中，想要一下子跳出所有的循环，一层一层 <code>break</code> 比较麻烦，这时候 <code>goto</code> 语句才有了用武之地。</p><p>简单介绍一下使用方式：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// n = 0 情况下，答案显然可以直接得出，那么可以跳过求解步骤直接输出答案</span></span>
<span class="line">    <span class="token keyword">goto</span> End<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 假装这里有一大堆用于求解 ans 的语句</span></span>
<span class="line">End<span class="token operator">:</span></span>
<span class="line"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>goto</code> 实际上是历史遗留问题，它来自于汇编语言，在高级语言中不建议使用，因为它的使用会导致代码逻辑混乱，难以调试。</p></div><p>这次题单里面更多的会出现二维数组的题目，可以将它想象成一个棋盘，每一个格子都存上一个变量。</p><p>题单链接：</p><p><a href="https://www.luogu.com.cn/training/242415" target="_blank" rel="noopener noreferrer">南哪2022-4-loops - 题单 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>`,8)]))}const r=s(p,[["render",o]]),u=JSON.parse(`{"path":"/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/4.html","title":"南哪 2022-4-loop","lang":"zh-CN","frontmatter":{"title":"南哪 2022-4-loop","date":"2022-11-06T00:00:00.000Z","icon":"face-grin-beam-sweat","order":6,"category":["CPL DotOJ 补完计划"],"tag":["CPL","DotOJ"],"author":"Kingcq","description":"这一章仍然在与上两章内容重复，只多了一个 goto 语句 goto 语句并不建议使用，因为会造成代码逻辑的混乱，但当处在多重循环之中，想要一下子跳出所有的循环，一层一层 break 比较麻烦，这时候 goto 语句才有了用武之地。 简单介绍一下使用方式： 提示 goto 实际上是历史遗留问题，它来自于汇编语言，在高级语言中不建议使用，因为它的使用会导致...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"南哪 2022-4-loop\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-28T11:31:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kingcq\\"}]}"],["meta",{"property":"og:url","content":"https://kingcxp.github.io/posts/CPL-DotOJ-%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92/4.html"}],["meta",{"property":"og:site_name","content":"Kingcq's Blog"}],["meta",{"property":"og:title","content":"南哪 2022-4-loop"}],["meta",{"property":"og:description","content":"这一章仍然在与上两章内容重复，只多了一个 goto 语句 goto 语句并不建议使用，因为会造成代码逻辑的混乱，但当处在多重循环之中，想要一下子跳出所有的循环，一层一层 break 比较麻烦，这时候 goto 语句才有了用武之地。 简单介绍一下使用方式： 提示 goto 实际上是历史遗留问题，它来自于汇编语言，在高级语言中不建议使用，因为它的使用会导致..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T11:31:29.000Z"}],["meta",{"property":"article:author","content":"Kingcq"}],["meta",{"property":"article:tag","content":"DotOJ"}],["meta",{"property":"article:tag","content":"CPL"}],["meta",{"property":"article:published_time","content":"2022-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T11:31:29.000Z"}]]},"git":{"createdTime":1738740544000,"updatedTime":1753702289000,"contributors":[{"name":"Kingcq","username":"Kingcq","email":"404291187@qq.com","commits":3,"url":"https://github.com/Kingcq"}]},"readingTime":{"minutes":1.04,"words":311},"filePathRelative":"posts/CPL-DotOJ-补完计划/4.md","excerpt":"<p>这一章仍然在与上两章内容重复，只多了一个 <code>goto</code> 语句</p>\\n<p><code>goto</code> 语句并不建议使用，因为会造成代码逻辑的混乱，但当处在多重循环之中，想要一下子跳出所有的循环，一层一层 <code>break</code> 比较麻烦，这时候 <code>goto</code> 语句才有了用武之地。</p>\\n<p>简单介绍一下使用方式：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"c\\"><pre><code class=\\"language-c\\"><span class=\\"line\\"><span class=\\"token keyword\\">int</span> ans <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">// n = 0 情况下，答案显然可以直接得出，那么可以跳过求解步骤直接输出答案</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">goto</span> End<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 假装这里有一大堆用于求解 ans 的语句</span></span>\\n<span class=\\"line\\">End<span class=\\"token operator\\">:</span></span>\\n<span class=\\"line\\"><span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> ans<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{r as comp,u as data};
